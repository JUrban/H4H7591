Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.int_arith
% (108747)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 661
% Passive clauses: 9105
% Generated clauses: 18775
% Final active clauses: 655
% Final passive clauses: 8159
% Input formulas: 62
% Initial clauses: 226
% 
% Duplicate literals: 400
% Trivial inequalities: 63
% Fw subsumption resolutions: 1796
% Fw demodulations: 483
% Bw demodulations: 5
% 
% Simple tautologies: 239
% Equational tautologies: 55
% Forward subsumptions: 6080
% 
% Binary resolution: 10475
% Factoring: 1207
% Forward superposition: 2188
% Backward superposition: 1709
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 17
% 
% Split clauses: 390
% Split components: 786
% SAT solver clauses: 682
% SAT solver unit clauses: 14
% SAT solver binary clauses: 250
% 
% Sat splits: 390
% 
% TWLsolver clauses: 682
% TWLsolver calls for satisfiability: 364
% 
% Memory used [KB]: 8955
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.int_arith
% (108768)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 377
% Passive clauses: 2445
% Generated clauses: 10765
% Final active clauses: 371
% Final passive clauses: 2047
% Input formulas: 62
% Initial clauses: 226
% 
% Duplicate literals: 199
% Trivial inequalities: 30
% Fw subsumption resolutions: 967
% Fw demodulations: 639
% Bw demodulations: 25
% Condensations: 215
% Global subsumptions: 22
% 
% Simple tautologies: 286
% Equational tautologies: 19
% Forward subsumptions: 3117
% 
% Binary resolution: 3069
% Factoring: 149
% Forward superposition: 1224
% Backward superposition: 1419
% Self superposition: 54
% Equality factoring: 30
% Equality resolution: 8
% 
% Split clauses: 48
% Split components: 97
% SAT solver clauses: 3072
% SAT solver unit clauses: 228
% SAT solver binary clauses: 81
% SAT solver learnt clauses: 44
% SAT solver learnt literals: 10
% 
% Sat splits: 48
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2984
% TWLsolver calls for satisfiability: 1837
% 
% Memory used [KB]: 12281
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f64409,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f876,f880,f878,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2680,f2586,f2682,f2590,f2684,f2593,f2687,f2597,f2689,f2600,f2691,f2603,f2693,f2606,f2695,f2609,f2697,f2612,f2699,f2615,f2701,f2618,f2703,f2621,f2705,f2624,f2707,f2627,f2709,f2630,f2711,f2633,f2713,f2636,f2715,f2639,f2802,f2803,f4210,f4211,f4212,f4213,f4214,f4512,f4514,f4515,f4517,f4713,f4714,f7678,f7681,f7679,f16341,f16343,f16472,f16474,f16476,f16480,f16482,f16484,f16486,f16488,f16490,f16492,f16494,f16496,f16498,f16500,f16502,f16506,f16508,f16510,f16512,f16514,f16516,f16518,f16520,f16522,f16524,f16526,f16528,f16530,f16532,f16552,f16554,f16574,f16576,f16582,f16588,f16616,f16675,f16712,f16771,f16944,f16948,f16956,f16958,f16962,f16964,f16968,f16972,f16981,f16986,f16990,f16994,f17046,f17062,f17078,f17099,f17115,f17117,f17139,f17156,f17178,f17195,f17197,f17199,f17201,f17203,f20059,f20060,f17249,f17251,f17253,f17255,f17257,f17259,f17261,f17264,f17266,f17268,f17270,f17272,f17274,f17276,f17278,f17280,f17282,f17285,f17287,f17289,f17348,f17350,f17352,f17355,f17357,f17359,f17361,f17363,f17366,f17368,f17379,f17390,f17407,f17411,f17420,f17422,f17429,f17431,f17448,f17454,f17463,f17465,f17472,f17474,f17485,f17494,f17505,f17514,f17516,f17533,f17535,f17546,f17548,f17567,f17569,f17580,f17582,f17603,f17605,f17616,f17618,f17630,f17641,f17653,f17664,f17692,f17720,f17741,f17743,f17770,f17773,f17775,f17794,f17796,f17798,f17808,f17810,f17820,f17822,f17832,f17834,f17844,f17846,f17876,f17900,f17918,f17920,f17935,f17937,f17939,f17978,f17980,f17982,f17984,f17986,f17988,f18012,f18015,f18037,f18040,f18063,f18065,f18085,f18087,f18089,f18102,f18114,f18126,f18128,f18140,f18142,f18160,f18184,f18210,f18234,f18246,f18248,f18250,f18252,f18254,f18256,f18269,f18271,f18273,f18275,f18277,f18279,f18281,f18288,f18290,f18292,f18295,f18303,f18308,f18310,f18312,f18318,f18320,f18326,f18328,f18334,f18336,f18342,f18344,f18346,f18352,f18354,f18360,f18362,f18365,f18367,f18370,f18372,f18378,f18380,f18388,f18390,f18395,f18397,f18404,f18406,f18414,f18424,f18431,f18433,f18439,f18444,f18446,f18452,f18457,f18459,f18465,f18467,f18469,f18477,f18482,f18484,f18491,f18507,f18516,f18526,f18533,f18541,f18543,f18545,f18554,f18556,f18563,f18599,f18613,f18627,f18641,f18655,f18669,f18708,f18736,f18764,f18792,f18820,f18848,f18887,f18903,f18919,f18935,f18951,f18967,f19019,f19041,f19063,f19085,f19107,f19129,f19160,f19171,f19182,f19193,f19204,f19215,f19247,f19259,f19271,f19283,f19295,f19307,f19324,f19334,f19344,f19354,f19364,f19374,f19391,f19401,f19411,f19421,f19431,f19441,f19474,f19487,f19500,f19513,f19526,f19539,f19564,f19576,f19588,f19600,f19612,f19624,f19652,f19670,f19688,f19706,f19724,f19742,f19780,f19857,f19859,f19863,f19865,f19881,f19889,f19892,f19898,f19904,f19907,f19913,f19919,f19922,f19927,f19930,f19933,f19937,f19951,f19956,f19958,f19964,f19967,f19977,f20061,f20062,f20063,f20064,f20065,f20066,f20067,f20068,f20069,f20070,f20071,f20072,f20073,f20074,f20075,f20076,f20077,f20078,f20079,f20080,f20081,f20082,f20083,f20084,f20087,f20089,f20091,f20093,f20095,f20098,f20099,f20100,f20104,f20107,f20109,f20111,f20113,f20116,f20117,f20118,f20122,f20125,f20128,f20131,f20134,f20137,f20138,f20139,f20143,f20146,f20148,f20150,f20152,f20155,f20156,f20157,f20161,f20164,f20167,f20170,f20173,f20176,f20177,f20178,f20180,f20182,f20184,f20186,f20188,f20190,f20191,f20192,f20193,f20194,f20195,f20196,f20197,f20198,f20199,f20200,f20202,f20204,f20206,f20207,f20208,f20209,f20210,f20212,f20214,f20217,f20218,f20219,f20220,f20221,f20224,f20227,f20230,f20231,f20232,f20233,f20234,f20236,f20238,f20241,f20242,f20243,f20244,f20245,f20248,f20251,f20254,f20255,f20256,f20257,f20258,f20260,f20262,f20264,f20265,f20266,f20267,f20268,f20269,f20270,f20271,f20272,f20273,f20274,f20275,f20276,f20277,f20278,f20279,f20280,f20570,f20571,f20587,f20588,f20589,f20590,f20591,f20592,f20593,f20594,f20598,f20599,f20600,f20601,f20602,f20603,f20607,f20608,f20609,f20610,f20611,f20612,f20613,f20614,f20615,f20616,f20617,f20618,f20619,f20620,f20621,f20622,f20623,f20624,f20625,f20626,f20627,f20628,f20630,f20631,f20632,f20633,f20634,f20635,f20636,f20637,f20638,f20639,f20640,f20641,f20642,f20643,f20644,f20645,f20650,f20651,f20652,f20653,f20654,f20655,f20656,f20657,f20658,f20659,f20660,f20661,f20662,f20663,f20664,f20665,f20666,f20667,f20668,f20669,f20670,f20671,f20672,f20673,f20674,f20675,f20676,f20677,f20678,f20679,f20680,f20681,f20682,f20683,f20684,f20685,f20686,f20687,f20688,f20689,f20690,f20691,f20692,f20693,f20694,f20695,f20696,f20697,f20698,f20699,f20700,f20701,f20702,f20703,f20704,f20705,f20706,f20707,f20708,f20709,f20710,f20711,f20712,f20713,f20714,f20715,f20716,f20717,f20718,f20719,f20720,f20721,f20722,f20723,f20724,f20725,f20726,f20727,f20728,f20729,f20730,f20731,f20732,f20733,f20734,f20735,f20736,f20737,f20738,f20739,f20740,f20741,f20742,f20743,f20744,f20745,f20746,f20747,f20748,f20749,f20750,f20751,f20752,f20753,f20754,f20755,f20756,f20757,f20758,f20759,f20760,f20761,f20762,f20763,f20764,f20765,f20766,f20767,f20768,f20769,f20770,f20771,f20772,f20773,f20774,f20775,f20776,f20777,f20778,f20779,f20780,f20781,f20782,f20783,f20784,f20785,f20786,f20787,f20788,f20789,f20790,f20791,f20792,f20793,f20794,f20795,f20796,f20797,f20798,f20799,f20800,f20801,f20802,f20803,f20804,f20805,f20806,f20807,f20808,f20809,f20810,f20811,f20812,f20813,f20814,f20815,f20816,f20817,f20818,f20819,f20820,f20821,f20822,f20823,f20824,f20825,f20826,f20827,f20828,f20829,f20830,f20831,f20832,f20833,f20834,f20835,f20836,f20837,f20838,f20839,f20840,f20841,f20842,f20843,f20844,f20845,f20846,f20847,f20848,f20849,f20850,f20851,f20852,f20853,f20854,f20855,f20856,f20857,f20858,f20859,f20860,f20861,f20862,f20863,f20864,f20865,f20866,f20867,f20868,f20869,f20870,f20871,f20872,f20873,f20874,f20875,f20876,f20877,f20878,f20879,f20880,f20881,f20882,f20883,f20884,f20885,f20886,f20887,f20888,f20889,f20890,f20891,f20892,f20893,f20894,f20895,f20896,f20897,f20898,f20899,f20900,f20901,f20902,f20903,f20904,f20905,f20906,f20907,f20908,f20909,f20910,f20911,f20912,f20913,f20914,f20915,f20916,f20917,f20918,f20919,f20920,f20921,f20922,f20923,f20924,f20925,f20926,f20927,f20928,f20929,f20930,f20931,f20932,f20933,f20934,f20935,f20936,f20937,f20938,f20939,f20940,f20941,f20942,f20943,f20944,f20945,f20946,f20947,f20948,f20949,f20950,f20951,f20952,f20953,f20954,f20955,f20956,f20957,f20958,f20959,f20960,f20961,f20962,f20963,f20964,f20965,f20966,f20967,f20968,f20969,f20970,f20971,f20972,f20973,f20974,f20975,f20976,f20977,f20978,f20979,f20980,f20981,f20982,f20983,f20984,f20985,f20986,f20987,f20988,f20989,f20990,f20991,f20992,f20993,f20994,f20995,f20996,f20997,f20998,f20999,f21000,f21001,f21002,f21003,f21004,f21005,f21006,f21007,f21008,f21009,f21010,f21011,f21012,f21013,f21014,f21015,f21016,f21017,f21018,f21019,f21020,f21021,f21022,f21023,f21024,f21025,f21026,f21027,f21028,f21029,f21030,f21031,f21032,f21033,f21034,f21035,f21036,f21037,f21038,f21039,f21040,f21041,f21042,f21043,f21044,f21045,f21046,f21047,f21048,f21049,f21050,f21051,f21052,f21053,f21054,f21055,f21056,f21057,f21058,f21059,f21060,f21061,f21062,f21063,f21064,f21065,f21066,f21067,f21068,f21069,f21070,f21071,f21072,f21073,f21074,f21075,f21076,f21077,f21078,f21079,f21080,f21094,f21095,f21096,f21097,f21098,f21099,f21100,f21101,f21102,f21103,f21104,f21105,f21106,f21107,f21108,f21109,f21110,f21111,f21112,f21113,f21114,f21115,f21117,f21119,f21121,f21123,f21124,f21125,f21126,f21127,f21128,f21129,f21130,f21131,f21132,f21133,f21134,f21135,f21136,f21137,f21138,f21139,f21140,f21141,f21150,f21151,f21152,f21153,f21154,f21155,f21156,f21157,f21158,f21159,f21160,f21161,f21162,f21163,f21164,f21165,f21166,f21167,f21168,f21169,f21170,f21171,f21172,f21173,f21174,f21175,f21176,f21177,f21178,f21179,f21180,f21181,f21182,f21183,f21184,f21185,f21186,f21187,f21188,f21189,f21190,f21191,f21192,f21193,f21194,f21195,f21196,f21197,f21198,f21199,f21200,f21201,f21202,f21203,f21204,f21205,f21206,f21207,f21208,f21209,f21210,f21211,f21212,f21213,f21214,f21215,f21216,f21217,f21218,f21219,f21220,f21221,f21222,f21223,f21224,f21225,f21226,f21227,f21228,f21229,f21230,f21231,f21232,f21233,f21234,f21235,f21236,f21237,f21238,f21239,f21240,f21241,f21242,f21243,f21244,f21245,f21246,f21247,f21248,f21249,f21250,f21251,f21252,f21253,f21254,f21255,f21256,f21257,f21258,f21259,f21260,f21261,f21262,f21263,f21264,f21265,f21266,f21267,f21268,f21269,f21270,f21271,f21272,f21273,f21274,f21275,f21276,f21277,f21278,f21279,f21280,f21281,f21282,f21283,f21284,f21285,f21286,f21287,f21288,f21289,f21290,f21291,f21292,f21293,f21294,f21295,f21296,f21297,f21298,f21299,f21300,f21301,f21302,f21303,f21304,f21305,f21306,f21307,f21308,f21309,f21310,f21311,f21312,f21313,f21314,f21315,f21316,f21317,f21318,f21319,f21320,f21321,f21322,f21323,f21324,f21325,f21326,f21327,f21328,f21329,f21330,f21331,f21332,f21333,f21334,f21335,f21336,f21337,f21338,f21339,f21340,f21341,f21342,f21343,f21344,f21345,f21346,f21347,f21348,f21349,f21350,f21351,f21352,f21353,f21354,f21355,f21356,f21357,f21358,f21359,f21360,f21361,f21362,f21363,f21364,f21365,f21366,f21367,f21368,f21369,f21370,f21371,f21372,f21373,f21374,f21375,f21376,f21377,f21378,f21379,f21380,f21381,f21382,f21383,f21384,f21385,f21386,f21387,f21388,f21389,f21390,f21391,f21392,f21393,f21394,f21395,f21396,f21397,f21398,f21399,f21400,f21401,f21402,f21403,f21404,f21405,f21406,f21407,f21408,f21409,f21410,f21411,f21412,f21413,f21414,f21415,f21416,f21417,f21418,f21419,f21420,f21421,f21422,f21423,f21424,f21425,f21426,f21427,f21428,f21429,f21430,f21431,f21432,f21433,f21434,f24693,f23688,f24720,f24718,f23714,f24724,f24667,f24648,f24647,f24725,f24642,f24641,f24628,f24735,f24627,f24596,f24717,f24594,f24593,f24742,f24744,f24743,f24749,f24750,f24553,f24732,f24760,f24761,f16342,f24546,f24545,f24495,f24733,f24492,f24734,f13842,f13557,f13555,f13375,f13373,f13193,f4218,f24809,f12908,f24810,f4220,f12906,f24812,f12726,f4221,f24813,f12724,f24814,f12544,f12362,f24816,f4216,f4215,f24817,f24818,f4717,f4716,f4715,f24815,f24819,f4223,f24811,f13840,f13191,f4727,f24820,f12542,f12360,f24821,f4725,f33075,f33079,f33083,f33082,f39798,f39805,f39808,f39811,f39815,f39817,f39819,f39778,f39777,f39776,f39816,f39813,f39821,f39774,f39822,f39773,f39772,f39826,f39771,f39803,f39801,f39823,f39768,f39825,f39800,f39799,f51347,f51348,f51353,f51354,f51355,f51350,f51356,f51374,f51376,f51377,f51378,f51379,f51380,f51381,f51382,f51383,f51384,f51385,f51386,f51387,f56263,f61972,f61973,f2587,f64394])).
fof(f64394,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f64393,f540])).
fof(f540,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f307,f304])).
fof(f304,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.int_arith.lt_justify_multiplication',aHL_TRUTH)).
fof(f307,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f30])).
fof(f30,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.int_arith.lt_justify_multiplication','thm.bool.NOT_CLAUSES|split|1')).
fof(f64393,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f62976,f602])).
fof(f602,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f382,f330])).
fof(f330,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f208])).
fof(f208,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.int_arith.lt_justify_multiplication','thm.bool.EQ_CLAUSES|split|2')).
fof(f382,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0] : ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X7] : ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X7))))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_LT_REFL')).
fof(f62976,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f62931,f1416])).
fof(f1416,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) )),
  inference(subsumption_resolution,[],[f1411,f304])).
fof(f1411,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) )),
  inference(superposition,[],[f447,f586])).
fof(f586,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f302,f326])).
fof(f326,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f206])).
fof(f206,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.int_arith.lt_justify_multiplication','thm.bool.EQ_CLAUSES|split|0')).
fof(f302,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))))),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) & s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f150])).
fof(f150,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) => s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6)))) => s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X8))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6)))) => s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X8))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))))))),
  file('thm.int_arith.lt_justify_multiplication','thm.int_arith.lt_justify_multiplication')).
fof(f447,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(flattening,[],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(ennf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) => p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X7,X8,X15] : ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X8)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X15))))) => p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X15)))))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_LT_TRANS')).
fof(f62931,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f62930,f540])).
fof(f62930,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f62929,f879])).
fof(f879,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl2),
  inference(cnf_transformation,[],[f879_D])).
fof(f879_D,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f62929,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | $spl0),
  inference(forward_demodulation,[],[f62928,f1432])).
fof(f1432,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f445,f311])).
fof(f311,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X7] : s('type.integer.int',X7) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_ADD_LID')).
fof(f445,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X7,X8,X15] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X15),s('type.integer.int',X8))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int',X15)))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_LT_ADD_SUB')).
fof(f62928,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | $spl0),
  inference(subsumption_resolution,[],[f62768,f304])).
fof(f62768,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | $spl0),
  inference(superposition,[],[f396,f56647])).
fof(f56647,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | $spl0),
  inference(forward_demodulation,[],[f56638,f446])).
fof(f446,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) = s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) = s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X7,X8,X15] : s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X15))))) = s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X15)))))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_SUB_LDISTRIB')).
fof(f56638,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))))) | $spl0),
  inference(condensation,[],[f56637])).
fof(f56637,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13)))))))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f56490])).
fof(f56490,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f878,f3990])).
fof(f3990,plain,(
  ( ! [X10,X8,X9] : (s(bool,X10) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int',X8))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f1432,f752])).
fof(f752,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f313,f313])).
fof(f313,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,'F_0') = s(bool,X9))),
  file('thm.int_arith.lt_justify_multiplication','thm.bool.BOOL_CASES_AX')).
fof(f396,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) & (((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) & (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))),
  inference(flattening,[],[f244])).
fof(f244,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))) & (((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) & (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) <=> ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X16,X17] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int',X17)))))) <=> ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X17))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_MUL_SIGN_CASES|split|0')).
fof(f2587,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f2587_D])).
fof(f2587_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f61973,plain,(
  ( ! [X175] : (s(bool,'F_0') = s(bool,g(s(bool,X175))) | s(bool,X175) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl142),
  inference(cnf_transformation,[],[f61973_D])).
fof(f61973_D,plain,(
  ( ! [X175] : (s(bool,'F_0') = s(bool,g(s(bool,X175))) | s(bool,X175) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f61972,plain,(
  ( ! [X175,X174] : (s(bool,'F_0') = s(bool,g(s(bool,X175))) | s(bool,X175) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,X174)) ) | ($spl2 | $spl88)),
  inference(subsumption_resolution,[],[f61934,f326])).
fof(f61934,plain,(
  ( ! [X175,X174] : (p(s(bool,X174)) | s(bool,'F_0') = s(bool,g(s(bool,X175))) | s(bool,X175) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,X174)) ) | ($spl2 | $spl88)),
  inference(superposition,[],[f24743,f56453])).
fof(f56453,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,X1)) ) | $spl2),
  inference(subsumption_resolution,[],[f56343,f582])).
fof(f582,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f540,f325])).
fof(f325,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f206])).
fof(f56343,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,X1)) ) | $spl2),
  inference(superposition,[],[f879,f752])).
fof(f56263,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f56262,f540])).
fof(f56262,plain,(
  p(s(bool,'F_0')) | $spl3),
  inference(forward_demodulation,[],[f56261,f53465])).
fof(f53465,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | $spl3),
  inference(forward_demodulation,[],[f51761,f446])).
fof(f51761,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))))) | $spl3),
  inference(unit_resulting_resolution,[],[f51660,f4542])).
fof(f4542,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(superposition,[],[f1434,f311])).
fof(f1434,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int',X5))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X4)))))) )),
  inference(superposition,[],[f445,f313])).
fof(f51660,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(backward_demodulation,[],[f51520,f21711])).
fof(f21711,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))),
  inference(unit_resulting_resolution,[],[f873,f540,f476])).
fof(f476,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP5(X2,X1,X0)) & (~sP5(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP5(X2,X1,X0))),
  inference(definition_folding,[],[f143,f192,f191,f190,f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : (sP2(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f190,plain,(
  ! [X1,X0,X2] : (sP3(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f191,plain,(
  ! [X2,X0,X1] : (sP4(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f192,plain,(
  ! [X2,X1,X0] : (sP5(X2,X1,X0) <=> (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f143,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X18,X17,X16] : ((p(s(bool,X16)) <=> s(bool,X17) = s(bool,X18)) <=> ((p(s(bool,X16)) | p(s(bool,X17)) | p(s(bool,X18))) & (p(s(bool,X16)) | ~p(s(bool,X18)) | ~p(s(bool,X17))) & (p(s(bool,X17)) | ~p(s(bool,X18)) | ~p(s(bool,X16))) & (p(s(bool,X18)) | ~p(s(bool,X17)) | ~p(s(bool,X16)))))),
  file('thm.int_arith.lt_justify_multiplication','thm.sat.sat_2|49|_prove_ltb')).
fof(f873,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))),
  inference(unit_resulting_resolution,[],[f540,f303,f473])).
fof(f473,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f278])).
fof(f303,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))),
  inference(cnf_transformation,[],[f203])).
fof(f51520,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f582,f880,f2641])).
fof(f2641,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f2315,f304])).
fof(f2315,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f390,f752])).
fof(f390,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f165])).
fof(f165,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X10,X11] : ((p(s(bool,X10)) => p(s(bool,X11))) => ((p(s(bool,X11)) => p(s(bool,X10))) => s(bool,X10) = s(bool,X11)))),
  file('thm.int_arith.lt_justify_multiplication','thm.bool.IMP_ANTISYM_AX')).
fof(f56261,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))))) | $spl3),
  inference(subsumption_resolution,[],[f56085,f304])).
fof(f56085,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))))) | $spl3),
  inference(superposition,[],[f1621,f51389])).
fof(f51389,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl3),
  inference(unit_resulting_resolution,[],[f582,f880,f3990])).
fof(f1621,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))))) )),
  inference(subsumption_resolution,[],[f1617,f304])).
fof(f1617,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))))) )),
  inference(superposition,[],[f399,f586])).
fof(f399,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f51387,plain,(
  $false | ($spl0 | $spl3)),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375,f880])).
fof(f51375,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl0),
  inference(forward_demodulation,[],[f21711,f878])).
fof(f35158,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | $spl0),
  inference(unit_resulting_resolution,[],[f540,f2045,f33344])).
fof(f51165,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f51164])).
fof(f51164,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X91) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f51122,f326])).
fof(f51122,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,X90)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X91) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2674,f2129])).
fof(f51163,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f51162,f1432])).
fof(f51162,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(condensation,[],[f51161])).
fof(f51161,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f51112,f326])).
fof(f51112,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,X45)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2674,f3990])).
fof(f51156,plain,(
  ( ! [X37,X38,X36] : (s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(forward_demodulation,[],[f51155,f311])).
fof(f51155,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(forward_demodulation,[],[f51154,f311])).
fof(f51154,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f51110,f540])).
fof(f51110,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f2674,f1901])).
fof(f51107,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X29) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f2674,f1432])).
fof(f51153,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X1)))) )),
  inference(condensation,[],[f51152])).
fof(f51152,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f51104,f326])).
fof(f51104,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,X16)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2674,f3988])).
fof(f51146,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f51145])).
fof(f51145,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X68)))) | s(bool,X70) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X71),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f51086,f326])).
fof(f51086,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,X69)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X68)))) | s(bool,X70) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X71),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f2674,f2129])).
fof(f51076,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))) | s(bool,X25) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f2674,f445])).
fof(f51144,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f51143])).
fof(f51143,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f51073,f326])).
fof(f51073,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,X11)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2674,f2141])).
fof(f51142,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f51141,f1432])).
fof(f51141,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(condensation,[],[f51140])).
fof(f51140,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f51072,f326])).
fof(f51072,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2674,f3990])).
fof(f51135,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f51134,f540])).
fof(f51134,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f51067,f602])).
fof(f51067,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(factoring,[],[f2674])).
fof(f51025,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X102),s('type.integer.int',X101)))))) | s(bool,X103) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X102))) | s(bool,'T_0') = s(bool,X103) | s(bool,X104) = s(bool,X105) | s(bool,X105) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X101))) | s(bool,X104) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) )),
  inference(subsumption_resolution,[],[f51006,f304])).
fof(f51006,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X102),s('type.integer.int',X101)))))) | s(bool,X103) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X102))) | s(bool,'T_0') = s(bool,X103) | s(bool,X104) = s(bool,X105) | s(bool,X105) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X101))) | s(bool,X104) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f2673,f2129])).
fof(f51022,plain,(
  ( ! [X54,X52,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int',X51)))))) | s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f50996,f304])).
fof(f50996,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int',X51)))))) | s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2673,f752])).
fof(f50989,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28)))))))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X29))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f2673,f1432])).
fof(f51021,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23)))) )),
  inference(subsumption_resolution,[],[f50988,f304])).
fof(f50988,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23)))) )),
  inference(superposition,[],[f2673,f3992])).
fof(f51020,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X11))) | s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X9))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f50985,f304])).
fof(f50985,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X11))) | s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X9))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f2673,f3990])).
fof(f50984,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2673,f3987])).
fof(f51019,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f50983,f304])).
fof(f50983,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2673,f5893])).
fof(f51018,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',sK12)))))) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f50982,f304])).
fof(f50982,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',sK12)))))) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f2673,f586])).
fof(f50938,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X81),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X82) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X81))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f50915,f304])).
fof(f50915,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X81),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X82) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X81))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f2672,f2129])).
fof(f50929,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X31),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f50905,f304])).
fof(f50905,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X31),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f2672,f752])).
fof(f50903,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f2672,f445])).
fof(f50928,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X21))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(subsumption_resolution,[],[f50902,f304])).
fof(f50902,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X21))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(superposition,[],[f2672,f1434])).
fof(f50927,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f50901,f304])).
fof(f50901,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f2672,f2114])).
fof(f50853,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X80),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X82) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X81))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f50830,f304])).
fof(f50830,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X80),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X82) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X81))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f2671,f2129])).
fof(f50844,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f50820,f304])).
fof(f50820,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f2671,f752])).
fof(f50818,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f2671,f445])).
fof(f50843,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X21))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(subsumption_resolution,[],[f50817,f304])).
fof(f50817,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X21))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(superposition,[],[f2671,f1434])).
fof(f50842,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X16))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f50816,f304])).
fof(f50816,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X16))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f2671,f2114])).
fof(f50773,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50772])).
fof(f50772,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X68)))) | s(bool,X70) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X68),s('type.integer.int',X71))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f50722,f326])).
fof(f50722,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,X69)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X68)))) | s(bool,X70) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X68),s('type.integer.int',X71))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f2670,f2129])).
fof(f50712,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))) | s(bool,X25) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int',X26))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f2670,f445])).
fof(f50771,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f50770])).
fof(f50770,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f50709,f326])).
fof(f50709,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,X11)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2670,f2141])).
fof(f50769,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(forward_demodulation,[],[f50768,f1432])).
fof(f50768,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(condensation,[],[f50767])).
fof(f50767,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X8))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f50708,f326])).
fof(f50708,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X8))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2670,f3990])).
fof(f50754,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50753])).
fof(f50753,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X91) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X92))))) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f50692,f326])).
fof(f50692,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,X90)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X91) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X92))))) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2670,f2129])).
fof(f50752,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(forward_demodulation,[],[f50751,f1432])).
fof(f50751,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(condensation,[],[f50750])).
fof(f50750,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X44),s('type.integer.int',X47))))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f50682,f326])).
fof(f50682,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,X45)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X44),s('type.integer.int',X47))))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2670,f3990])).
fof(f50745,plain,(
  ( ! [X37,X38,X36] : (s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))),s('type.integer.int',X38))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(forward_demodulation,[],[f50744,f311])).
fof(f50744,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(forward_demodulation,[],[f50743,f311])).
fof(f50743,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f50680,f540])).
fof(f50680,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X37) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f2670,f1901])).
fof(f50677,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X29) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int',X30))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f2670,f1432])).
fof(f50742,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X1)))) )),
  inference(condensation,[],[f50741])).
fof(f50741,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f50674,f326])).
fof(f50674,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,X16)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2670,f3988])).
fof(f50735,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f50734,f540])).
fof(f50734,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f50667,f602])).
fof(f50667,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(factoring,[],[f2670])).
fof(f50664,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f540,f35466,f517])).
fof(f50659,plain,(
  ~sP11('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f35445,f513])).
fof(f50655,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50654])).
fof(f50654,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X70)))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X68),s('type.integer.int',X70))))) | s(bool,'T_0') = s(bool,X71) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f50611,f326])).
fof(f50611,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,X69)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X70)))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X68),s('type.integer.int',X70))))) | s(bool,'T_0') = s(bool,X71) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f2669,f2129])).
fof(f50601,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25)))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int',X25))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f2669,f445])).
fof(f50653,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f50652])).
fof(f50652,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))),s('type.integer.int',X12))))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f50598,f326])).
fof(f50598,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,X11)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))),s('type.integer.int',X12))))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2669,f2141])).
fof(f50651,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(forward_demodulation,[],[f50650,f1432])).
fof(f50650,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f50649])).
fof(f50649,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f50597,f326])).
fof(f50597,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2669,f3990])).
fof(f50648,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f50595,f540])).
fof(f50595,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f2669,f602])).
fof(f50637,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50636])).
fof(f50636,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X91),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X92) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X91),s('type.integer.int',X89))))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f50581,f326])).
fof(f50581,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,X90)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X91),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X92) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X91),s('type.integer.int',X89))))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2669,f2129])).
fof(f50635,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(forward_demodulation,[],[f50634,f1432])).
fof(f50634,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(condensation,[],[f50633])).
fof(f50633,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X47) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X46),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f50571,f326])).
fof(f50571,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,X45)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X47) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X46),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2669,f3990])).
fof(f50566,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))))))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f2669,f1432])).
fof(f50626,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(condensation,[],[f50625])).
fof(f50625,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f50563,f326])).
fof(f50563,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,X16)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2669,f3988])).
fof(f50544,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50543])).
fof(f50543,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X70)))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X70),s('type.integer.int',X68))))) | s(bool,'T_0') = s(bool,X71) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f50500,f326])).
fof(f50500,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,X69)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X70)))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X70),s('type.integer.int',X68))))) | s(bool,'T_0') = s(bool,X71) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f2668,f2129])).
fof(f50490,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25)))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f2668,f445])).
fof(f50542,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f50541])).
fof(f50541,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f50487,f326])).
fof(f50487,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,X11)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2668,f2141])).
fof(f50540,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(forward_demodulation,[],[f50539,f1432])).
fof(f50539,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f50538])).
fof(f50538,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f50486,f326])).
fof(f50486,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2668,f3990])).
fof(f50527,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50526])).
fof(f50526,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X91),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X92) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X91))))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f50470,f326])).
fof(f50470,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,X90)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X91),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X92) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X91))))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2668,f2129])).
fof(f50525,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(forward_demodulation,[],[f50524,f1432])).
fof(f50524,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(condensation,[],[f50523])).
fof(f50523,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X47) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X44),s('type.integer.int',X46))))) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f50460,f326])).
fof(f50460,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,X45)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X47) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X44),s('type.integer.int',X46))))) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2668,f3990])).
fof(f50518,plain,(
  ( ! [X37,X38,X36] : (s(bool,X38) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X36))),s('type.integer.int',X37))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(forward_demodulation,[],[f50517,f311])).
fof(f50517,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X38) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int',X37))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f50458,f540])).
fof(f50458,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X38) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36))),s('type.integer.int',X36))),s('type.integer.int',X37))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f2668,f1901])).
fof(f50516,plain,(
  ( ! [X31,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f50456,f540])).
fof(f50456,plain,(
  ( ! [X31,X32] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f2668,f602])).
fof(f50455,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int',X29))))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f2668,f1432])).
fof(f50515,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(condensation,[],[f50514])).
fof(f50514,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X17))))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f50452,f326])).
fof(f50452,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,X16)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X17))))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2668,f3988])).
fof(f50435,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50434])).
fof(f50434,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X68)))) | s(bool,X70) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X71),s('type.integer.int',X68))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f50384,f326])).
fof(f50384,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (p(s(bool,X69)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X68)))) | s(bool,X70) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X71),s('type.integer.int',X68))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f2667,f2129])).
fof(f50374,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))) | s(bool,X25) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f2667,f445])).
fof(f50433,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f50432])).
fof(f50432,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f50371,f326])).
fof(f50371,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,X11)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2667,f2141])).
fof(f50431,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(forward_demodulation,[],[f50430,f1432])).
fof(f50430,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(condensation,[],[f50429])).
fof(f50429,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f50370,f326])).
fof(f50370,plain,(
  ( ! [X6,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2667,f3990])).
fof(f50416,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f50415])).
fof(f50415,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X91) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int',X89))))) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f50354,f326])).
fof(f50354,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,X90)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X91) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int',X89))))) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X89))) | s(bool,'T_0') = s(bool,X90) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2667,f2129])).
fof(f50414,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(forward_demodulation,[],[f50413,f1432])).
fof(f50413,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(condensation,[],[f50412])).
fof(f50412,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f50344,f326])).
fof(f50344,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,X45)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2667,f3990])).
fof(f50339,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X29) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f2667,f1432])).
fof(f50404,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X1)))) )),
  inference(condensation,[],[f50403])).
fof(f50403,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f50336,f326])).
fof(f50336,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,X16)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2667,f3988])).
fof(f50397,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f50396,f540])).
fof(f50396,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f50329,f602])).
fof(f50329,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(factoring,[],[f2667])).
fof(f50327,plain,(
  ~sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f35081,f456])).
fof(f50296,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X81),s('type.integer.int',X80)))))) | s(bool,X82) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f50279,f304])).
fof(f50279,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X81),s('type.integer.int',X80)))))) | s(bool,X82) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f2666,f2129])).
fof(f50293,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X31),s('type.integer.int',X30)))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f50269,f304])).
fof(f50269,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X31),s('type.integer.int',X30)))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f2666,f752])).
fof(f50267,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f2666,f445])).
fof(f50292,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20)))))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(subsumption_resolution,[],[f50266,f304])).
fof(f50266,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20)))))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(superposition,[],[f2666,f1434])).
fof(f50291,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15)))))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f50265,f304])).
fof(f50265,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15)))))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f2666,f2114])).
fof(f50241,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X148),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int',X148)))) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))),s('type.integer.int',X147))))) | s(bool,X149) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(subsumption_resolution,[],[f50209,f304])).
fof(f50209,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X148),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int',X148)))) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))),s('type.integer.int',X147))))) | s(bool,X149) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f5136,f2129])).
fof(f50238,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X66))),s('type.integer.int',X67))),s('type.integer.int',X64)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67))),s('type.integer.int',X64)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int',X68))))) )),
  inference(forward_demodulation,[],[f50197,f445])).
fof(f50197,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67))),s('type.integer.int',X64)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X66))),s('type.integer.int',X67)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int',X68))))) )),
  inference(superposition,[],[f5136,f445])).
fof(f50237,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int',X62)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(forward_demodulation,[],[f50236,f445])).
fof(f50236,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X60))),s('type.integer.int',X61)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int',X62)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(subsumption_resolution,[],[f50196,f304])).
fof(f50196,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X60))),s('type.integer.int',X61)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int',X62)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(superposition,[],[f5136,f1434])).
fof(f50235,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X55)))) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(forward_demodulation,[],[f50234,f445])).
fof(f50234,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X53))),s('type.integer.int',X54)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X55)))) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f50195,f304])).
fof(f50195,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X53))),s('type.integer.int',X54)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X55)))) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f5136,f2114])).
fof(f50182,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',X4)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int',X4)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X5))))) )),
  inference(superposition,[],[f5136,f446])).
fof(f49984,plain,(
  ( ! [X191,X196,X194,X192,X190,X197,X195,X193] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X192),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X191),s('type.integer.int',X193)))))) | s(bool,X194) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X192),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X190),s('type.integer.int',X193))))) | s(bool,'T_0') = s(bool,X194) | s(bool,X195) = s(bool,X196) | s(bool,X196) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X190),s('type.integer.int',X191))) | s(bool,X195) = s(bool,X197) | s(bool,'T_0') = s(bool,X197)) )),
  inference(subsumption_resolution,[],[f49960,f304])).
fof(f49960,plain,(
  ( ! [X191,X196,X194,X192,X190,X197,X195,X193] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X192),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X191),s('type.integer.int',X193)))))) | s(bool,X194) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X192),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X190),s('type.integer.int',X193))))) | s(bool,'T_0') = s(bool,X194) | s(bool,X195) = s(bool,X196) | s(bool,X196) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X190),s('type.integer.int',X191))) | s(bool,X195) = s(bool,X197) | s(bool,'T_0') = s(bool,X197)) )),
  inference(superposition,[],[f5138,f2129])).
fof(f49981,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X121),s('type.integer.int',X123)))))) | s(bool,X124) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X120),s('type.integer.int',X123))))) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X120),s('type.integer.int',X121))) | s(bool,'T_0') = s(bool,X125)) )),
  inference(subsumption_resolution,[],[f49950,f304])).
fof(f49950,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X121),s('type.integer.int',X123)))))) | s(bool,X124) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X120),s('type.integer.int',X123))))) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X120),s('type.integer.int',X121))) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f5138,f752])).
fof(f49944,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X95),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X97),s('type.integer.int',X96)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X98),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X97),s('type.integer.int',X99)))))) | s(bool,X100) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X98),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X96))),s('type.integer.int',X99))))) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f5138,f445])).
fof(f49980,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X93)))))) | s(bool,X94) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X90))),s('type.integer.int',X93))))) | s(bool,'T_0') = s(bool,X94) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) )),
  inference(subsumption_resolution,[],[f49943,f304])).
fof(f49943,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X93)))))) | s(bool,X94) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X90))),s('type.integer.int',X93))))) | s(bool,'T_0') = s(bool,X94) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) )),
  inference(superposition,[],[f5138,f1434])).
fof(f49979,plain,(
  ( ! [X88,X87,X85,X83,X86,X84,X82] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))) | s(bool,X87) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X86))))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X83))))) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f49942,f304])).
fof(f49942,plain,(
  ( ! [X88,X87,X85,X83,X86,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))) | s(bool,X87) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X86))))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X83))))) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f5138,f2114])).
fof(f49940,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X70)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int',X71))),s('type.integer.int',X73)))))) | s(bool,X74) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int',X70))),s('type.integer.int',X73))))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f5138,f3987])).
fof(f49978,plain,(
  ( ! [X68,X66,X67] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X67)))))) | s(bool,X68) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X67))))) | s(bool,'T_0') = s(bool,X68)) ) | $spl0),
  inference(subsumption_resolution,[],[f49939,f304])).
fof(f49939,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X67)))))) | s(bool,X68) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X67))))) | s(bool,'T_0') = s(bool,X68)) ) | $spl0),
  inference(superposition,[],[f5138,f878])).
fof(f49938,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int',X61)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X61),s('type.integer.int',X62))),s('type.integer.int',X64)))))) | s(bool,X65) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X64))))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f5138,f1432])).
fof(f49977,plain,(
  ( ! [X59,X57,X60,X58,X56] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int',X59)))))) | s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X59))))) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int',X56)))) )),
  inference(subsumption_resolution,[],[f49937,f304])).
fof(f49937,plain,(
  ( ! [X59,X57,X60,X58,X56] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int',X59)))))) | s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X59))))) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int',X56)))) )),
  inference(superposition,[],[f5138,f3992])).
fof(f49976,plain,(
  ( ! [X39,X43,X41,X44,X42,X40] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X42)))))) | s(bool,X43) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X42))))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int',X39))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f49934,f304])).
fof(f49934,plain,(
  ( ! [X39,X43,X41,X44,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X42)))))) | s(bool,X43) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X42))))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int',X39))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f5138,f3990])).
fof(f49933,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X33),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X33),s('type.integer.int',X34)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X36),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X35))))),s('type.integer.int',X37)))))) | s(bool,X38) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X36),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X37))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f5138,f3987])).
fof(f49975,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X31)))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f49932,f304])).
fof(f49932,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X31)))))) | s(bool,X32) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X31))))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f5138,f5893])).
fof(f49974,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int',X28)))))) | s(bool,X29) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X28))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f49931,f304])).
fof(f49931,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int',X28)))))) | s(bool,X29) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X28))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f5138,f586])).
fof(f49729,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3)) )),
  inference(forward_demodulation,[],[f49728,f1432])).
fof(f49728,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(forward_demodulation,[],[f49716,f311])).
fof(f49716,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int',X1)),X2,X3) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4649,f311])).
fof(f49519,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3)) )),
  inference(forward_demodulation,[],[f49518,f1432])).
fof(f49518,plain,(
  ( ! [X2,X0,X3,X1] : (~sP10('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(forward_demodulation,[],[f49506,f311])).
fof(f49506,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int',X1)),X2,X3) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4648,f311])).
fof(f47880,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int',X103)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X103),s('type.integer.int',X102))),s('type.integer.int',X101)))))) | s(bool,X104) = s(bool,X105) | s(bool,X105) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X101))) | s(bool,X104) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) )),
  inference(subsumption_resolution,[],[f47862,f304])).
fof(f47862,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int',X103)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X103),s('type.integer.int',X102))),s('type.integer.int',X101)))))) | s(bool,X104) = s(bool,X105) | s(bool,X105) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X101))) | s(bool,X104) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f3995,f2129])).
fof(f47877,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X53)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X53),s('type.integer.int',X52))),s('type.integer.int',X51)))))) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f47852,f304])).
fof(f47852,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X53)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X53),s('type.integer.int',X52))),s('type.integer.int',X51)))))) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f3995,f752])).
fof(f47845,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int',X27)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int',X30)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X30),s('type.integer.int',X29))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X27),s('type.integer.int',X28))))))))) )),
  inference(superposition,[],[f3995,f1432])).
fof(f47876,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int',X26)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23)))) )),
  inference(subsumption_resolution,[],[f47844,f304])).
fof(f47844,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int',X26)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23)))) )),
  inference(superposition,[],[f3995,f3992])).
fof(f47875,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X12)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))))) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X9))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f47841,f304])).
fof(f47841,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X12)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))))) | s(bool,X13) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X9))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3995,f3990])).
fof(f47840,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X8)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))))))))) )),
  inference(superposition,[],[f3995,f3987])).
fof(f47874,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))))))) )),
  inference(subsumption_resolution,[],[f47839,f304])).
fof(f47839,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))))))) )),
  inference(superposition,[],[f3995,f5893])).
fof(f47873,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0))),s('type.integer.int',sK12))))))) )),
  inference(subsumption_resolution,[],[f47838,f304])).
fof(f47838,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0))),s('type.integer.int',sK12))))))) )),
  inference(superposition,[],[f3995,f586])).
fof(f47780,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X82),s('type.integer.int',X81))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f47764,f304])).
fof(f47764,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X82),s('type.integer.int',X81))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f3994,f2129])).
fof(f47777,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int',X32)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X32),s('type.integer.int',X31))),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f47754,f304])).
fof(f47754,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int',X32)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X32),s('type.integer.int',X31))),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f3994,f752])).
fof(f47752,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int',X26)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f3994,f445])).
fof(f47776,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int',X22)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X22),s('type.integer.int',X21))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(subsumption_resolution,[],[f47751,f304])).
fof(f47751,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int',X22)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X22),s('type.integer.int',X21))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(superposition,[],[f3994,f1434])).
fof(f47775,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X17)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X17),s('type.integer.int',X16))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f47750,f304])).
fof(f47750,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X17)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X17),s('type.integer.int',X16))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f3994,f2114])).
fof(f47699,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X81),s('type.integer.int',X82))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X81)))) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f47683,f304])).
fof(f47683,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X81),s('type.integer.int',X82))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X81)))) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f3993,f2129])).
fof(f47696,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int',X31)))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f47673,f304])).
fof(f47673,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int',X31)))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f3993,f752])).
fof(f47671,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X25),s('type.integer.int',X26))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X26),s('type.integer.int',X25))))) )),
  inference(superposition,[],[f3993,f445])).
fof(f47695,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X21),s('type.integer.int',X22))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int',X21)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(subsumption_resolution,[],[f47670,f304])).
fof(f47670,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X21),s('type.integer.int',X22))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int',X21)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X20)))))) )),
  inference(superposition,[],[f3993,f1434])).
fof(f47694,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X16),s('type.integer.int',X17))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int',X16)))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f47669,f304])).
fof(f47669,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X16),s('type.integer.int',X17))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int',X16)))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f3993,f2114])).
fof(f47604,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (p(s(bool,X148)) | sP1(X148,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X147))),s('type.integer.int',X146))),s('type.integer.int',X145))) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))),s('type.integer.int',X147))))) | s(bool,X149) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(subsumption_resolution,[],[f47572,f304])).
fof(f47572,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | p(s(bool,X148)) | sP1(X148,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X147))),s('type.integer.int',X146))),s('type.integer.int',X145))) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))),s('type.integer.int',X147))))) | s(bool,X149) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f4176,f2129])).
fof(f47560,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67))),s('type.integer.int',X64)))))) | p(s(bool,X68)) | sP1(X68,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int',X67))),s('type.integer.int',X66))),s('type.integer.int',X65)))) )),
  inference(superposition,[],[f4176,f445])).
fof(f47595,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (p(s(bool,X62)) | sP1(X62,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X61))),s('type.integer.int',X60))),s('type.integer.int',X59))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(subsumption_resolution,[],[f47559,f304])).
fof(f47559,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | sP1(X62,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X61))),s('type.integer.int',X60))),s('type.integer.int',X59))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(superposition,[],[f4176,f1434])).
fof(f47594,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (p(s(bool,X55)) | sP1(X55,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X51))),s('type.integer.int',X54))),s('type.integer.int',X53))),s('type.integer.int',X52))) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f47558,f304])).
fof(f47558,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X55)) | sP1(X55,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X51))),s('type.integer.int',X54))),s('type.integer.int',X53))),s('type.integer.int',X52))) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f4176,f2114])).
fof(f47545,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',X4)))))) | p(s(bool,X5)) | sP1(X5,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f4176,f446])).
fof(f47374,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (p(s(bool,X148)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X147))),s('type.integer.int',X146))),s('type.integer.int',X145)),X148) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))),s('type.integer.int',X147))))) | s(bool,X149) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(subsumption_resolution,[],[f47342,f304])).
fof(f47342,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | p(s(bool,X148)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X147))),s('type.integer.int',X146))),s('type.integer.int',X145)),X148) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))),s('type.integer.int',X147))))) | s(bool,X149) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f4140,f2129])).
fof(f47330,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67))),s('type.integer.int',X64)))))) | p(s(bool,X68)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int',X67))),s('type.integer.int',X66))),s('type.integer.int',X65)),X68)) )),
  inference(superposition,[],[f4140,f445])).
fof(f47365,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (p(s(bool,X62)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X61))),s('type.integer.int',X60))),s('type.integer.int',X59)),X62) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(subsumption_resolution,[],[f47329,f304])).
fof(f47329,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X61))),s('type.integer.int',X60))),s('type.integer.int',X59)),X62) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int',X61))),s('type.integer.int',X58)))))) )),
  inference(superposition,[],[f4140,f1434])).
fof(f47364,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (p(s(bool,X55)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X51))),s('type.integer.int',X54))),s('type.integer.int',X53))),s('type.integer.int',X52)),X55) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f47328,f304])).
fof(f47328,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X55)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X51))),s('type.integer.int',X54))),s('type.integer.int',X53))),s('type.integer.int',X52)),X55) | s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int',X51))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f4140,f2114])).
fof(f47315,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',X4)))))) | p(s(bool,X5)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X5)) )),
  inference(superposition,[],[f4140,f446])).
fof(f46974,plain,(
  ( ! [X341,X343,X339,X340,X342,X338] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X338),s('type.integer.int',X340))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X338),s('type.integer.int',X339)))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X341),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X342),s('type.integer.int',X343))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X338),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X339),s('type.integer.int',X340))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X341),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X342),s('type.integer.int',X343)))))) )),
  inference(superposition,[],[f4629,f3987])).
fof(f46971,plain,(
  ( ! [X325,X327,X323,X324,X326,X322] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X322),s('type.integer.int',X324))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X322),s('type.integer.int',X323)))))) | p(s(bool,X325)) | ~sP11(X326,X325,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X322),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X323),s('type.integer.int',X324))))))) | s(bool,X326) = s(bool,X327) | s(bool,'T_0') = s(bool,X327)) )),
  inference(superposition,[],[f2659,f3987])).
fof(f46970,plain,(
  ( ! [X321,X316,X318,X320,X317,X319] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X316),s('type.integer.int',X318))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X316),s('type.integer.int',X317)))))) | p(s(bool,X319)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X316),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X317),s('type.integer.int',X318)))))),X320,X319) | s(bool,X320) = s(bool,X321) | s(bool,'T_0') = s(bool,X321)) )),
  inference(superposition,[],[f2646,f3987])).
fof(f46969,plain,(
  ( ! [X313,X315,X312,X314,X311] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X311),s('type.integer.int',X313))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X311),s('type.integer.int',X312)))))) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X311),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X312),s('type.integer.int',X313)))))),X314) | s(bool,X314) = s(bool,X315) | s(bool,'T_0') = s(bool,X315)) )),
  inference(superposition,[],[f2645,f3987])).
fof(f46968,plain,(
  ( ! [X308,X310,X306,X309,X307] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X306),s('type.integer.int',X308))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X306),s('type.integer.int',X307)))))) | sP1(X309,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X306),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X307),s('type.integer.int',X308))))))) | s(bool,X309) = s(bool,X310) | s(bool,'T_0') = s(bool,X310)) )),
  inference(superposition,[],[f2644,f3987])).
fof(f46967,plain,(
  ( ! [X302,X304,X301,X303,X305] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X301),s('type.integer.int',X303))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X301),s('type.integer.int',X302)))))) | s(bool,X304) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X301),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X302),s('type.integer.int',X303))))))) | s(bool,X304) = s(bool,X305) | s(bool,'T_0') = s(bool,X305)) )),
  inference(superposition,[],[f2641,f3987])).
fof(f46966,plain,(
  ( ! [X300,X298,X297,X299] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X297),s('type.integer.int',X299))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X297),s('type.integer.int',X298))))) | s(bool,X300) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X297),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X298),s('type.integer.int',X299))))))) | s(bool,'T_0') = s(bool,X300)) )),
  inference(superposition,[],[f2640,f3987])).
fof(f46963,plain,(
  ( ! [X288,X290,X287,X289,X286] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X286),s('type.integer.int',X288))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X286),s('type.integer.int',X287)))))) | s(bool,X289) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X286),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X287),s('type.integer.int',X288))))))) | s(bool,X289) = s(bool,X290) | s(bool,'T_0') = s(bool,X290)) )),
  inference(superposition,[],[f2276,f3987])).
fof(f46962,plain,(
  ( ! [X280,X282,X285,X281,X283,X284] : (s(bool,f(s(X283,sK15(X284,X285,bool,X283)))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X280),s('type.integer.int',X282))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X280),s('type.integer.int',X281))))) | s(fun(X283,bool),X284) = s(fun(X283,bool),X285) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X280),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X281),s('type.integer.int',X282))))))) | s(bool,'T_0') = s(bool,g(s(X283,sK15(X284,X285,bool,X283))))) )),
  inference(superposition,[],[f2214,f3987])).
fof(f46961,plain,(
  ( ! [X277,X279,X275,X276,X278,X274] : (s(X277,f(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X274),s('type.integer.int',X276))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X274),s('type.integer.int',X275))))))) != s(X277,g(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X274),s('type.integer.int',X276))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X274),s('type.integer.int',X275))))))) | s(fun(bool,X277),X278) = s(fun(bool,X277),X279) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X274),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X275),s('type.integer.int',X276))))))) | s(bool,'T_0') = s(bool,sK15(X278,X279,X277,bool))) )),
  inference(superposition,[],[f2213,f3987])).
fof(f46949,plain,(
  ( ! [X208,X206,X209,X207] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X206),s('type.integer.int',X208))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X206),s('type.integer.int',X207)))))) | s(bool,X209) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X206),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X207),s('type.integer.int',X208))))))) | s(bool,'T_0') = s(bool,X209)) )),
  inference(superposition,[],[f816,f3987])).
fof(f46944,plain,(
  ( ! [X189,X187,X188,X186] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X186),s('type.integer.int',X188))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X186),s('type.integer.int',X187)))))) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X186),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X187),s('type.integer.int',X188)))))),X189)) )),
  inference(superposition,[],[f694,f3987])).
fof(f46943,plain,(
  ( ! [X185,X182,X184,X183] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X182),s('type.integer.int',X184))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X182),s('type.integer.int',X183)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X182),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X183),s('type.integer.int',X184)))))),X185)) )),
  inference(superposition,[],[f662,f3987])).
fof(f46942,plain,(
  ( ! [X180,X178,X181,X179] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X178),s('type.integer.int',X180))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X178),s('type.integer.int',X179)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X181,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X178),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X179),s('type.integer.int',X180)))))))) )),
  inference(superposition,[],[f657,f3987])).
fof(f46941,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X173),s('type.integer.int',X175))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X173),s('type.integer.int',X174)))))) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X173),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X174),s('type.integer.int',X175)))))),X176,X177) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X173),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X174),s('type.integer.int',X175)))))),X176,X177)) )),
  inference(superposition,[],[f529,f3987])).
fof(f46940,plain,(
  ( ! [X171,X169,X172,X170,X168] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X168),s('type.integer.int',X170))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X168),s('type.integer.int',X169)))))) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X168),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X169),s('type.integer.int',X170)))))),X171,X172) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X168),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X169),s('type.integer.int',X170)))))),X171,X172)) )),
  inference(superposition,[],[f528,f3987])).
fof(f46927,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X103),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X103),s('type.integer.int',X104)))))) | sP5(X106,X107,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X103),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X105))))))) | ~sP4(X106,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X103),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X105)))))),X107) | ~sP3(X107,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X103),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X105)))))),X106) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X103),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X105)))))),X107,X106)) )),
  inference(superposition,[],[f458,f3987])).
fof(f46921,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X78),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X78),s('type.integer.int',X79)))))) | ~p(s(bool,X81)) | s(bool,X81) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X78),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X79),s('type.integer.int',X80)))))))) )),
  inference(superposition,[],[f390,f3987])).
fof(f46919,plain,(
  ( ! [X70,X72,X71,X73] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X70),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X70),s('type.integer.int',X71)))))) | p(s(bool,X73)) | s(bool,X73) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X70),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X72)))))))) )),
  inference(superposition,[],[f387,f3987])).
fof(f46918,plain,(
  ( ! [X68,X69,X67] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int',X68)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))))))) )),
  inference(superposition,[],[f330,f3987])).
fof(f46917,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X64),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X64),s('type.integer.int',X65)))))) | s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X64),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X65),s('type.integer.int',X66)))))))) )),
  inference(superposition,[],[f329,f3987])).
fof(f46916,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int',X62)))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X63)))))))) )),
  inference(superposition,[],[f326,f3987])).
fof(f46915,plain,(
  ( ! [X59,X60,X58] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X58),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X58),s('type.integer.int',X59))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))))))))) )),
  inference(superposition,[],[f325,f3987])).
fof(f46912,plain,(
  ( ! [X47,X50,X48,X46,X49] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X46),s('type.integer.int',X48))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X46),s('type.integer.int',X47)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X49),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X47),s('type.integer.int',X48)))))))) | s(bool,X50) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X49),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f2665,f3987])).
fof(f46910,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X37),s('type.integer.int',X39))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X37),s('type.integer.int',X38)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X38),s('type.integer.int',X39))))),s('type.integer.int',X41)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X41)))))) )),
  inference(superposition,[],[f4620,f3987])).
fof(f46909,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X33),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X33),s('type.integer.int',X34)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X36)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X35))))),s('type.integer.int',X36))))))) )),
  inference(superposition,[],[f399,f3987])).
fof(f46908,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int',X30)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X30),s('type.integer.int',X31))))),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f405,f3987])).
fof(f46907,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int',X27))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int',X26)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X27))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f406,f3987])).
fof(f46906,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X22),s('type.integer.int',X24))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X22),s('type.integer.int',X23)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24))))))))))) )),
  inference(superposition,[],[f1621,f3987])).
fof(f46905,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f395,f3987])).
fof(f46997,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X7)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f46904,f1432])).
fof(f46904,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X7),s('type.integer.int',X8)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f396,f3987])).
fof(f46903,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f397,f3987])).
fof(f46996,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f46902,f1432])).
fof(f46902,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f398,f3987])).
fof(f46897,plain,(
  ( ! [X313,X310,X312,X314,X309,X311] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X309),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X311),s('type.integer.int',X310)))))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X312),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X313),s('type.integer.int',X314))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X309),s('type.integer.int',X310))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X309),s('type.integer.int',X311))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X312),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X313),s('type.integer.int',X314)))))) )),
  inference(superposition,[],[f4629,f3987])).
fof(f46894,plain,(
  ( ! [X294,X296,X298,X293,X295,X297] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X293),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X295),s('type.integer.int',X294)))))))) | p(s(bool,X296)) | ~sP11(X297,X296,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X293),s('type.integer.int',X294))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X293),s('type.integer.int',X295))))) | s(bool,X297) = s(bool,X298) | s(bool,'T_0') = s(bool,X298)) )),
  inference(superposition,[],[f2659,f3987])).
fof(f46893,plain,(
  ( ! [X292,X288,X290,X287,X289,X291] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X287),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X289),s('type.integer.int',X288)))))))) | p(s(bool,X290)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X287),s('type.integer.int',X288))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X287),s('type.integer.int',X289)))),X291,X290) | s(bool,X291) = s(bool,X292) | s(bool,'T_0') = s(bool,X292)) )),
  inference(superposition,[],[f2646,f3987])).
fof(f46892,plain,(
  ( ! [X282,X285,X283,X284,X286] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X282),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X284),s('type.integer.int',X283)))))))) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X282),s('type.integer.int',X283))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X282),s('type.integer.int',X284)))),X285) | s(bool,X285) = s(bool,X286) | s(bool,'T_0') = s(bool,X286)) )),
  inference(superposition,[],[f2645,f3987])).
fof(f46891,plain,(
  ( ! [X280,X277,X279,X281,X278] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X277),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X279),s('type.integer.int',X278)))))))) | sP1(X280,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X277),s('type.integer.int',X278))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X277),s('type.integer.int',X279))))) | s(bool,X280) = s(bool,X281) | s(bool,'T_0') = s(bool,X281)) )),
  inference(superposition,[],[f2644,f3987])).
fof(f46890,plain,(
  ( ! [X273,X275,X276,X272,X274] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X272),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X274),s('type.integer.int',X273)))))))) | s(bool,X275) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X272),s('type.integer.int',X273))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X272),s('type.integer.int',X274))))) | s(bool,X275) = s(bool,X276) | s(bool,'T_0') = s(bool,X276)) )),
  inference(superposition,[],[f2641,f3987])).
fof(f46889,plain,(
  ( ! [X269,X271,X268,X270] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X268),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X270),s('type.integer.int',X269))))))) | s(bool,X271) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X268),s('type.integer.int',X269))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X268),s('type.integer.int',X270))))) | s(bool,'T_0') = s(bool,X271)) )),
  inference(superposition,[],[f2640,f3987])).
fof(f46886,plain,(
  ( ! [X261,X257,X259,X260,X258] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X257),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X259),s('type.integer.int',X258)))))))) | s(bool,X260) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X257),s('type.integer.int',X258))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X257),s('type.integer.int',X259))))) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261)) )),
  inference(superposition,[],[f2276,f3987])).
fof(f46885,plain,(
  ( ! [X255,X253,X251,X254,X256,X252] : (s(bool,f(s(X254,sK15(X255,X256,bool,X254)))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X253),s('type.integer.int',X252))))))) | s(fun(X254,bool),X255) = s(fun(X254,bool),X256) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X251),s('type.integer.int',X252))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X251),s('type.integer.int',X253))))) | s(bool,'T_0') = s(bool,g(s(X254,sK15(X255,X256,bool,X254))))) )),
  inference(superposition,[],[f2214,f3987])).
fof(f46884,plain,(
  ( ! [X249,X246,X250,X248,X247,X245] : (s(X248,f(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X247),s('type.integer.int',X246))))))))) != s(X248,g(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X247),s('type.integer.int',X246))))))))) | s(fun(bool,X248),X249) = s(fun(bool,X248),X250) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int',X246))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int',X247))))) | s(bool,'T_0') = s(bool,sK15(X249,X250,X248,bool))) )),
  inference(superposition,[],[f2213,f3987])).
fof(f46872,plain,(
  ( ! [X177,X180,X178,X179] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X177),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X179),s('type.integer.int',X178)))))))) | s(bool,X180) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X177),s('type.integer.int',X178))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X177),s('type.integer.int',X179))))) | s(bool,'T_0') = s(bool,X180)) )),
  inference(superposition,[],[f816,f3987])).
fof(f46867,plain,(
  ( ! [X158,X159,X157,X160] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X157),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X159),s('type.integer.int',X158)))))))) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X157),s('type.integer.int',X158))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X157),s('type.integer.int',X159)))),X160)) )),
  inference(superposition,[],[f694,f3987])).
fof(f46866,plain,(
  ( ! [X156,X154,X155,X153] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X153),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X155),s('type.integer.int',X154)))))))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X153),s('type.integer.int',X154))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X153),s('type.integer.int',X155)))),X156)) )),
  inference(superposition,[],[f662,f3987])).
fof(f46865,plain,(
  ( ! [X152,X151,X149,X150] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X149),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X151),s('type.integer.int',X150)))))))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X152,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X149),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X149),s('type.integer.int',X151)))))) )),
  inference(superposition,[],[f657,f3987])).
fof(f46864,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X146),s('type.integer.int',X145)))))))) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int',X146)))),X147,X148) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int',X146)))),X147,X148)) )),
  inference(superposition,[],[f529,f3987])).
fof(f46863,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X141),s('type.integer.int',X140)))))))) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int',X141)))),X142,X143) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int',X141)))),X142,X143)) )),
  inference(superposition,[],[f528,f3987])).
fof(f46862,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X134),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X136),s('type.integer.int',X135)))))))) | ~p(s(bool,X137)) | p(s(bool,X138)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X134),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X134),s('type.integer.int',X136)))),X138,X137)) )),
  inference(superposition,[],[f525,f3987])).
fof(f46861,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X129),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X131),s('type.integer.int',X130)))))))) | ~p(s(bool,X132)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X129),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X129),s('type.integer.int',X131)))),X132,X133)) )),
  inference(superposition,[],[f524,f3987])).
fof(f46860,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X124),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X126),s('type.integer.int',X125)))))))) | p(s(bool,X127)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X124),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X124),s('type.integer.int',X126)))),X128,X127)) )),
  inference(superposition,[],[f523,f3987])).
fof(f46859,plain,(
  ( ! [X123,X121,X122,X120,X119] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X121),s('type.integer.int',X120)))))))) | p(s(bool,X122)) | ~p(s(bool,X123)) | ~sP10(X123,X122,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int',X120))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int',X121)))))) )),
  inference(superposition,[],[f518,f3987])).
fof(f46858,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X116),s('type.integer.int',X115)))))))) | p(s(bool,X117)) | p(s(bool,X118)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int',X115))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int',X116)))),X118,X117)) )),
  inference(superposition,[],[f508,f3987])).
fof(f46857,plain,(
  ( ! [X111,X109,X112,X110,X113] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X109),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X111),s('type.integer.int',X110)))))))) | ~p(s(bool,X112)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X109),s('type.integer.int',X110))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X109),s('type.integer.int',X111)))),X112,X113)) )),
  inference(superposition,[],[f507,f3987])).
fof(f46856,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X104),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X106),s('type.integer.int',X105)))))))) | ~p(s(bool,X107)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X104),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X104),s('type.integer.int',X106)))),X108,X107)) )),
  inference(superposition,[],[f506,f3987])).
fof(f46855,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X101),s('type.integer.int',X100)))))))) | p(s(bool,X102)) | p(s(bool,X103)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int',X101)))),X102,X103)) )),
  inference(superposition,[],[f501,f3987])).
fof(f46854,plain,(
  ( ! [X94,X97,X95,X98,X96] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X94),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X96),s('type.integer.int',X95)))))))) | ~p(s(bool,X97)) | p(s(bool,X98)) | ~sP7(X98,X97,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X94),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X94),s('type.integer.int',X96)))))) )),
  inference(superposition,[],[f493,f3987])).
fof(f46853,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))))) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP6(X92,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X90))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X91)))),X93)) )),
  inference(superposition,[],[f484,f3987])).
fof(f46852,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X86),s('type.integer.int',X85)))))))) | ~p(s(bool,X87)) | p(s(bool,X88)) | ~sP3(X87,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int',X86)))),X88)) )),
  inference(superposition,[],[f465,f3987])).
fof(f46851,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X79),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X81),s('type.integer.int',X80)))))))) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP4(X82,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X79),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X79),s('type.integer.int',X81)))),X83)) )),
  inference(superposition,[],[f461,f3987])).
fof(f46850,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X76),s('type.integer.int',X75)))))))) | sP5(X77,X78,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X76))))) | ~sP4(X77,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X76)))),X78) | ~sP3(X78,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X76)))),X77) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int',X76)))),X78,X77)) )),
  inference(superposition,[],[f458,f3987])).
fof(f46849,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X70)))))))) | ~p(s(bool,X72)) | p(s(bool,X73)) | ~sP5(X72,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int',X71)))),X73)) )),
  inference(superposition,[],[f457,f3987])).
fof(f46848,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X66)))))))) | p(s(bool,X68)) | sP1(X68,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X65),s('type.integer.int',X67)))))) )),
  inference(superposition,[],[f431,f3987])).
fof(f46847,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X63),s('type.integer.int',X62)))))))) | p(s(bool,X64)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int',X63)))),X64)) )),
  inference(superposition,[],[f428,f3987])).
fof(f46846,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X58)))))))) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X57),s('type.integer.int',X59)))),X60)) )),
  inference(superposition,[],[f413,f3987])).
fof(f46845,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X53),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X54)))))))) | sP0(X56,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X53),s('type.integer.int',X55)))))) )),
  inference(superposition,[],[f412,f3987])).
fof(f46844,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X49),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X51),s('type.integer.int',X50)))))))) | ~p(s(bool,X52)) | s(bool,X52) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X49),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X49),s('type.integer.int',X51)))))) )),
  inference(superposition,[],[f390,f3987])).
fof(f46842,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X41),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X43),s('type.integer.int',X42)))))))) | p(s(bool,X44)) | s(bool,X44) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X41),s('type.integer.int',X42))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X41),s('type.integer.int',X43)))))) )),
  inference(superposition,[],[f387,f3987])).
fof(f46841,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X40),s('type.integer.int',X39)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int',X39))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int',X40)))))) )),
  inference(superposition,[],[f330,f3987])).
fof(f46840,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X35),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X37),s('type.integer.int',X36)))))))) | s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X35),s('type.integer.int',X37)))))) )),
  inference(superposition,[],[f329,f3987])).
fof(f46839,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X33)))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X32),s('type.integer.int',X33))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X32),s('type.integer.int',X34)))))) )),
  inference(superposition,[],[f326,f3987])).
fof(f46838,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X30))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X29),s('type.integer.int',X31))))))) )),
  inference(superposition,[],[f325,f3987])).
fof(f46836,plain,(
  ( ! [X24,X23,X25,X22] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X24),s('type.integer.int',X23)))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X22),s('type.integer.int',X24))),s('type.integer.int',X25)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X22),s('type.integer.int',X23))),s('type.integer.int',X25))))) )),
  inference(superposition,[],[f447,f3987])).
fof(f46835,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X19),s('type.integer.int',X18)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int',X19)))))) | s(bool,X21) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f2665,f3987])).
fof(f46833,plain,(
  ( ! [X12,X10,X8,X11,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X9)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int',X10))),s('type.integer.int',X12)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X12)))))) )),
  inference(superposition,[],[f4620,f3987])).
fof(f46832,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X7),s('type.integer.int',X7)))))))) )),
  inference(superposition,[],[f583,f3987])).
fof(f46827,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X98),s('type.integer.int',X99))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X95),s('type.integer.int',X97))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X95),s('type.integer.int',X96))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X98))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X95),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X96),s('type.integer.int',X97)))))))) )),
  inference(superposition,[],[f3987,f3990])).
fof(f46826,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X93),s('type.integer.int',X94))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int',X91))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X94),s('type.integer.int',X93))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X92)))))))) )),
  inference(superposition,[],[f3987,f3988])).
fof(f46825,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X88))),s('type.integer.int',X89))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int',X85))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X87),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X89),s('type.integer.int',X88))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X85),s('type.integer.int',X86)))))))) )),
  inference(superposition,[],[f3987,f2141])).
fof(f46816,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X35))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int',X31))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X35))),s('type.integer.int',X34))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32)))))))) )),
  inference(superposition,[],[f3987,f2114])).
fof(f46809,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X6) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3987,f3990])).
fof(f46808,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) )),
  inference(superposition,[],[f3987,f446])).
fof(f46799,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X103),s('type.integer.int',X104))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X100),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X102),s('type.integer.int',X101))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X103))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X100),s('type.integer.int',X101))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X100),s('type.integer.int',X102)))))) )),
  inference(superposition,[],[f3987,f3990])).
fof(f46798,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X98),s('type.integer.int',X99))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X95),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X97),s('type.integer.int',X96))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X99),s('type.integer.int',X98))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X95),s('type.integer.int',X96))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X95),s('type.integer.int',X97)))))) )),
  inference(superposition,[],[f3987,f3988])).
fof(f46797,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X90))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X94),s('type.integer.int',X93))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X90))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X89),s('type.integer.int',X91)))))) )),
  inference(superposition,[],[f3987,f2141])).
fof(f46793,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X66))))))) | s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X65),s('type.integer.int',X67))))) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f3987,f2129])).
fof(f46792,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (s(bool,X62) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X61),s('type.integer.int',X60))))))) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int',X61))))) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f3987,f2129])).
fof(f46791,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,X56) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X53),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X54))))))) | s(bool,X57) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X53),s('type.integer.int',X55))))) | s(bool,'T_0') = s(bool,X56) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f3987,f2129])).
fof(f46789,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,X44) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X41),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X43),s('type.integer.int',X42))))))) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X41),s('type.integer.int',X42))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X41),s('type.integer.int',X43))))) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f3987,f2129])).
fof(f46788,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X35),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X37),s('type.integer.int',X36))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X40))),s('type.integer.int',X39))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X35),s('type.integer.int',X37)))))) )),
  inference(superposition,[],[f3987,f2114])).
fof(f46780,plain,(
  ( ! [X6,X7,X5] : (s(bool,X7) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X6))))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3987,f2071])).
fof(f46779,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X4)))))))) )),
  inference(superposition,[],[f3987,f602])).
fof(f46702,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) )),
  inference(superposition,[],[f3953,f446])).
fof(f46614,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) )),
  inference(superposition,[],[f3913,f446])).
fof(f46545,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))) )),
  inference(superposition,[],[f3893,f446])).
fof(f46466,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))) )),
  inference(superposition,[],[f3870,f446])).
fof(f46456,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(unit_resulting_resolution,[],[f540,f3870,f473])).
fof(f46357,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65] : (s(fun(X64,bool),X65) = s(fun(X64,bool),X66) | s(bool,X67) = s(bool,g(s(X64,sK15(X65,X66,bool,X64)))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,f(s(X64,sK15(X65,X66,bool,X64)))) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(trivial_inequality_removal,[],[f46347])).
fof(f46347,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X64,bool),X65) = s(fun(X64,bool),X66) | s(bool,X67) = s(bool,g(s(X64,sK15(X65,X66,bool,X64)))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,f(s(X64,sK15(X65,X66,bool,X64)))) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f2365,f2129])).
fof(f46359,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,X7) = s(bool,g(s(X4,sK15(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(X4,sK15(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(trivial_inequality_removal,[],[f46337])).
fof(f46337,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,X7) = s(bool,g(s(X4,sK15(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(X4,sK15(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2365,f752])).
fof(f44263,plain,(
  ( ! [X146,X144,X149,X147,X145,X143,X148] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X144),s('type.integer.int',X146)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X143),s('type.integer.int',X146))))) | s(bool,X147) = s(bool,X148) | s(bool,X148) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X143),s('type.integer.int',X144))) | s(bool,X147) = s(bool,X149) | s(bool,'T_0') = s(bool,X149)) )),
  inference(subsumption_resolution,[],[f44240,f304])).
fof(f44240,plain,(
  ( ! [X146,X144,X149,X147,X145,X143,X148] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X144),s('type.integer.int',X146)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X143),s('type.integer.int',X146))))) | s(bool,X147) = s(bool,X148) | s(bool,X148) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X143),s('type.integer.int',X144))) | s(bool,X147) = s(bool,X149) | s(bool,'T_0') = s(bool,X149)) )),
  inference(superposition,[],[f4620,f2129])).
fof(f44260,plain,(
  ( ! [X87,X85,X83,X86,X84] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X83),s('type.integer.int',X86))))) | s(bool,X87) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X83),s('type.integer.int',X84))) | s(bool,'T_0') = s(bool,X87)) )),
  inference(subsumption_resolution,[],[f44230,f304])).
fof(f44230,plain,(
  ( ! [X87,X85,X83,X86,X84] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X83),s('type.integer.int',X86))))) | s(bool,X87) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X83),s('type.integer.int',X84))) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f4620,f752])).
fof(f44225,plain,(
  ( ! [X70,X68,X71,X69,X67] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X69),s('type.integer.int',X68)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X70),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X70),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X67),s('type.integer.int',X68))),s('type.integer.int',X71)))))) )),
  inference(superposition,[],[f4620,f445])).
fof(f44259,plain,(
  ( ! [X66,X64,X62,X65,X63] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X66)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int',X66))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X63)))))) )),
  inference(subsumption_resolution,[],[f44224,f304])).
fof(f44224,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X66)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int',X66))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X63)))))) )),
  inference(superposition,[],[f4620,f1434])).
fof(f44258,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X58),s('type.integer.int',X60)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int',X60))))) | s(bool,X61) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X58),s('type.integer.int',X57))))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f44223,f304])).
fof(f44223,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X58),s('type.integer.int',X60)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int',X60))))) | s(bool,X61) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X58),s('type.integer.int',X57))))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f4620,f2114])).
fof(f44257,plain,(
  ( ! [X48,X49] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X49)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X49)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f44221,f304])).
fof(f44221,plain,(
  ( ! [X48,X49] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X49)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X49)))))) ) | $spl0),
  inference(superposition,[],[f4620,f878])).
fof(f44220,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X45),s('type.integer.int',X44)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int',X45))),s('type.integer.int',X47)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X46),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X47)))))) )),
  inference(superposition,[],[f4620,f1432])).
fof(f44256,plain,(
  ( ! [X43,X41,X42,X40] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X40),s('type.integer.int',X41))),s('type.integer.int',X43)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X43))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int',X40)))) )),
  inference(subsumption_resolution,[],[f44219,f304])).
fof(f44219,plain,(
  ( ! [X43,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X40),s('type.integer.int',X41))),s('type.integer.int',X43)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X43))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int',X40)))) )),
  inference(superposition,[],[f4620,f3992])).
fof(f44255,plain,(
  ( ! [X30,X28,X26,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X27))),s('type.integer.int',X29)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X29))))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int',X26))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f44216,f304])).
fof(f44216,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X27))),s('type.integer.int',X29)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X29))))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int',X26))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f4620,f3990])).
fof(f44254,plain,(
  ( ! [X24,X25] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X25)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25)))))) )),
  inference(subsumption_resolution,[],[f44215,f304])).
fof(f44215,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X25)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25)))))) )),
  inference(superposition,[],[f4620,f5893])).
fof(f44253,plain,(
  ( ! [X23,X22] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int',X23)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X23)))))) )),
  inference(subsumption_resolution,[],[f44214,f304])).
fof(f44214,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int',X23)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X23)))))) )),
  inference(superposition,[],[f4620,f586])).
fof(f43961,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)),X4) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f43960])).
fof(f43960,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X413),s('type.integer.int',X414))),s('type.integer.int',X415)),X417) | s(bool,X417) = s(bool,X418) | s(bool,'T_0') = s(bool,X418) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X413),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X415),s('type.integer.int',X414))))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(subsumption_resolution,[],[f43718,f326])).
fof(f43718,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (p(s(bool,X416)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X413),s('type.integer.int',X414))),s('type.integer.int',X415)),X417) | s(bool,X417) = s(bool,X418) | s(bool,'T_0') = s(bool,X418) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X413),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X415),s('type.integer.int',X414))))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(superposition,[],[f2645,f2141])).
fof(f43959,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | sP1(X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',X4))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f43958])).
fof(f43958,plain,(
  ( ! [X412,X408,X410,X407,X409,X411] : (sP1(X411,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X407),s('type.integer.int',X408))),s('type.integer.int',X409))) | s(bool,X411) = s(bool,X412) | s(bool,'T_0') = s(bool,X412) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X407),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X409),s('type.integer.int',X408))))) | s(bool,'T_0') = s(bool,X410)) )),
  inference(subsumption_resolution,[],[f43717,f326])).
fof(f43717,plain,(
  ( ! [X412,X408,X410,X407,X409,X411] : (p(s(bool,X410)) | sP1(X411,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X407),s('type.integer.int',X408))),s('type.integer.int',X409))) | s(bool,X411) = s(bool,X412) | s(bool,'T_0') = s(bool,X412) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X407),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X409),s('type.integer.int',X408))))) | s(bool,'T_0') = s(bool,X410)) )),
  inference(superposition,[],[f2644,f2141])).
fof(f43953,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',X4))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f43952])).
fof(f43952,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (s(bool,X386) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X382),s('type.integer.int',X383))),s('type.integer.int',X384))) | s(bool,X386) = s(bool,X387) | s(bool,'T_0') = s(bool,X387) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X382),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X384),s('type.integer.int',X383))))) | s(bool,'T_0') = s(bool,X385)) )),
  inference(subsumption_resolution,[],[f43712,f326])).
fof(f43712,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (p(s(bool,X385)) | s(bool,X386) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X382),s('type.integer.int',X383))),s('type.integer.int',X384))) | s(bool,X386) = s(bool,X387) | s(bool,'T_0') = s(bool,X387) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X382),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X384),s('type.integer.int',X383))))) | s(bool,'T_0') = s(bool,X385)) )),
  inference(superposition,[],[f2276,f2141])).
fof(f43639,plain,(
  ( ! [X938,X942,X940,X939,X937,X941] : (s(bool,f(s(X937,sK15(X938,X939,bool,X937)))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X940),s('type.integer.int',X941))),s('type.integer.int',X942))) | s(fun(X937,bool),X938) = s(fun(X937,bool),X939) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X940),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X942),s('type.integer.int',X941))))) | s(bool,'T_0') = s(bool,g(s(X937,sK15(X938,X939,bool,X937))))) )),
  inference(superposition,[],[f444,f2141])).
fof(f43904,plain,(
  ( ! [X584,X586,X585] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X584),s('type.integer.int',X585))),s('type.integer.int',X586))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X584),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X586),s('type.integer.int',X585)))))) )),
  inference(subsumption_resolution,[],[f43583,f583])).
fof(f43583,plain,(
  ( ! [X584,X586,X585,X583] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X584),s('type.integer.int',X585))),s('type.integer.int',X586))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X584),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X586),s('type.integer.int',X585))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X583),s('type.integer.int',X583)))) )),
  inference(superposition,[],[f583,f2141])).
fof(f43810,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X4))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f43809])).
fof(f43809,plain,(
  ( ! [X109,X107,X105,X110,X108,X106] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X106),s('type.integer.int',X107))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int',X110))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X108),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X110),s('type.integer.int',X109))))) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X107),s('type.integer.int',X106)))))) )),
  inference(duplicate_literal_removal,[],[f43461])).
fof(f43461,plain,(
  ( ! [X109,X107,X105,X110,X108,X106] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X106),s('type.integer.int',X107))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int',X110))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X108),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X110),s('type.integer.int',X109))))) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X107),s('type.integer.int',X106))))) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f2141,f3990])).
fof(f43812,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int',X3)))) )),
  inference(condensation,[],[f43811])).
fof(f43811,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int',X104))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X100),s('type.integer.int',X101))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X103))))) | s(bool,'T_0') = s(bool,X99) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X101),s('type.integer.int',X100)))) )),
  inference(duplicate_literal_removal,[],[f43460])).
fof(f43460,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int',X104))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X100),s('type.integer.int',X101))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X103))))) | s(bool,'T_0') = s(bool,X99) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X101),s('type.integer.int',X100))) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f2141,f3988])).
fof(f43814,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int',X5))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X4)))))) )),
  inference(condensation,[],[f43813])).
fof(f43813,plain,(
  ( ! [X94,X92,X97,X95,X93,X98,X96] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int',X95))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X96),s('type.integer.int',X97))),s('type.integer.int',X98))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X98),s('type.integer.int',X97))))) | s(bool,'T_0') = s(bool,X92) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X93),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X95),s('type.integer.int',X94)))))) )),
  inference(duplicate_literal_removal,[],[f43459])).
fof(f43459,plain,(
  ( ! [X94,X92,X97,X95,X93,X98,X96] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int',X95))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X96),s('type.integer.int',X97))),s('type.integer.int',X98))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X98),s('type.integer.int',X97))))) | s(bool,'T_0') = s(bool,X92) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X93),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X95),s('type.integer.int',X94))))) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f2141,f2141])).
fof(f43828,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X5))),s('type.integer.int',X4)))) )),
  inference(condensation,[],[f43827])).
fof(f43827,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X34))),s('type.integer.int',X35))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X35),s('type.integer.int',X34))))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X30),s('type.integer.int',X32))),s('type.integer.int',X31)))) )),
  inference(duplicate_literal_removal,[],[f43450])).
fof(f43450,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X34))),s('type.integer.int',X35))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X35),s('type.integer.int',X34))))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X30),s('type.integer.int',X32))),s('type.integer.int',X31))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f2141,f2114])).
fof(f43836,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) )),
  inference(condensation,[],[f43835])).
fof(f43835,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f43444])).
fof(f43444,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2141,f313])).
fof(f43422,plain,(
  ( ! [X414,X420,X416,X418,X415,X417,X419] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X417),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X418),s('type.integer.int',X419))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X414),s('type.integer.int',X415))),s('type.integer.int',X416))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X417),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X418),s('type.integer.int',X419))))) | s(bool,X420) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X414),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X416),s('type.integer.int',X415))))) | s(bool,'T_0') = s(bool,X420)) )),
  inference(subsumption_resolution,[],[f43084,f304])).
fof(f43084,plain,(
  ( ! [X414,X420,X416,X418,X415,X417,X419] : (~p(s(bool,'T_0')) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X417),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X418),s('type.integer.int',X419))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X414),s('type.integer.int',X415))),s('type.integer.int',X416))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X417),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X418),s('type.integer.int',X419))))) | s(bool,X420) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X414),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X416),s('type.integer.int',X415))))) | s(bool,'T_0') = s(bool,X420)) )),
  inference(superposition,[],[f4629,f2114])).
fof(f43421,plain,(
  ( ! [X397,X399,X395,X401,X396,X398,X400] : (p(s(bool,X398)) | ~sP11(X399,X398,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X395),s('type.integer.int',X396))),s('type.integer.int',X397))) | s(bool,X399) = s(bool,X400) | s(bool,'T_0') = s(bool,X400) | s(bool,X401) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X395),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X397),s('type.integer.int',X396))))) | s(bool,'T_0') = s(bool,X401)) )),
  inference(subsumption_resolution,[],[f43081,f304])).
fof(f43081,plain,(
  ( ! [X397,X399,X395,X401,X396,X398,X400] : (~p(s(bool,'T_0')) | p(s(bool,X398)) | ~sP11(X399,X398,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X395),s('type.integer.int',X396))),s('type.integer.int',X397))) | s(bool,X399) = s(bool,X400) | s(bool,'T_0') = s(bool,X400) | s(bool,X401) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X395),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X397),s('type.integer.int',X396))))) | s(bool,'T_0') = s(bool,X401)) )),
  inference(superposition,[],[f2659,f2114])).
fof(f43420,plain,(
  ( ! [X389,X391,X393,X388,X390,X392,X394] : (p(s(bool,X391)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X388),s('type.integer.int',X389))),s('type.integer.int',X390)),X392,X391) | s(bool,X392) = s(bool,X393) | s(bool,'T_0') = s(bool,X393) | s(bool,X394) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X388),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X390),s('type.integer.int',X389))))) | s(bool,'T_0') = s(bool,X394)) )),
  inference(subsumption_resolution,[],[f43080,f304])).
fof(f43080,plain,(
  ( ! [X389,X391,X393,X388,X390,X392,X394] : (~p(s(bool,'T_0')) | p(s(bool,X391)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X388),s('type.integer.int',X389))),s('type.integer.int',X390)),X392,X391) | s(bool,X392) = s(bool,X393) | s(bool,'T_0') = s(bool,X393) | s(bool,X394) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X388),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X390),s('type.integer.int',X389))))) | s(bool,'T_0') = s(bool,X394)) )),
  inference(superposition,[],[f2646,f2114])).
fof(f43419,plain,(
  ( ! [X269,X265,X267,X268,X266] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X265),s('type.integer.int',X266))),s('type.integer.int',X267)),X268) | s(bool,X269) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X265),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X267),s('type.integer.int',X266))))) | s(bool,'T_0') = s(bool,X269)) )),
  inference(subsumption_resolution,[],[f43061,f304])).
fof(f43061,plain,(
  ( ! [X269,X265,X267,X268,X266] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X265),s('type.integer.int',X266))),s('type.integer.int',X267)),X268) | s(bool,X269) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X265),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X267),s('type.integer.int',X266))))) | s(bool,'T_0') = s(bool,X269)) )),
  inference(superposition,[],[f694,f2114])).
fof(f43418,plain,(
  ( ! [X261,X263,X260,X262,X264] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X260),s('type.integer.int',X261))),s('type.integer.int',X262)),X263) | s(bool,X264) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X260),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X262),s('type.integer.int',X261))))) | s(bool,'T_0') = s(bool,X264)) )),
  inference(subsumption_resolution,[],[f43060,f304])).
fof(f43060,plain,(
  ( ! [X261,X263,X260,X262,X264] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X260),s('type.integer.int',X261))),s('type.integer.int',X262)),X263) | s(bool,X264) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X260),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X262),s('type.integer.int',X261))))) | s(bool,'T_0') = s(bool,X264)) )),
  inference(superposition,[],[f662,f2114])).
fof(f43417,plain,(
  ( ! [X255,X257,X259,X256,X258] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X258,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X255),s('type.integer.int',X256))),s('type.integer.int',X257))) | s(bool,X259) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X255),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X257),s('type.integer.int',X256))))) | s(bool,'T_0') = s(bool,X259)) )),
  inference(subsumption_resolution,[],[f43059,f304])).
fof(f43059,plain,(
  ( ! [X255,X257,X259,X256,X258] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X258,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X255),s('type.integer.int',X256))),s('type.integer.int',X257))) | s(bool,X259) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X255),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X257),s('type.integer.int',X256))))) | s(bool,'T_0') = s(bool,X259)) )),
  inference(superposition,[],[f657,f2114])).
fof(f43416,plain,(
  ( ! [X253,X251,X249,X254,X252,X250] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X249),s('type.integer.int',X250))),s('type.integer.int',X251)),X252,X253) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X249),s('type.integer.int',X250))),s('type.integer.int',X251)),X252,X253) | s(bool,X254) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X249),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X251),s('type.integer.int',X250))))) | s(bool,'T_0') = s(bool,X254)) )),
  inference(subsumption_resolution,[],[f43058,f304])).
fof(f43058,plain,(
  ( ! [X253,X251,X249,X254,X252,X250] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X249),s('type.integer.int',X250))),s('type.integer.int',X251)),X252,X253) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X249),s('type.integer.int',X250))),s('type.integer.int',X251)),X252,X253) | s(bool,X254) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X249),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X251),s('type.integer.int',X250))))) | s(bool,'T_0') = s(bool,X254)) )),
  inference(superposition,[],[f529,f2114])).
fof(f43415,plain,(
  ( ! [X243,X246,X244,X248,X247,X245] : (~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X243),s('type.integer.int',X244))),s('type.integer.int',X245)),X246,X247) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X243),s('type.integer.int',X244))),s('type.integer.int',X245)),X246,X247) | s(bool,X248) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X243),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X245),s('type.integer.int',X244))))) | s(bool,'T_0') = s(bool,X248)) )),
  inference(subsumption_resolution,[],[f43057,f304])).
fof(f43057,plain,(
  ( ! [X243,X246,X244,X248,X247,X245] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X243),s('type.integer.int',X244))),s('type.integer.int',X245)),X246,X247) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X243),s('type.integer.int',X244))),s('type.integer.int',X245)),X246,X247) | s(bool,X248) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X243),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X245),s('type.integer.int',X244))))) | s(bool,'T_0') = s(bool,X248)) )),
  inference(superposition,[],[f528,f2114])).
fof(f43414,plain,(
  ( ! [X241,X239,X237,X242,X240,X238] : (~p(s(bool,X240)) | p(s(bool,X241)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X237),s('type.integer.int',X238))),s('type.integer.int',X239)),X241,X240) | s(bool,X242) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X237),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X239),s('type.integer.int',X238))))) | s(bool,'T_0') = s(bool,X242)) )),
  inference(subsumption_resolution,[],[f43056,f304])).
fof(f43056,plain,(
  ( ! [X241,X239,X237,X242,X240,X238] : (~p(s(bool,'T_0')) | ~p(s(bool,X240)) | p(s(bool,X241)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X237),s('type.integer.int',X238))),s('type.integer.int',X239)),X241,X240) | s(bool,X242) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X237),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X239),s('type.integer.int',X238))))) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f525,f2114])).
fof(f43413,plain,(
  ( ! [X231,X235,X233,X236,X234,X232] : (~p(s(bool,X234)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X231),s('type.integer.int',X232))),s('type.integer.int',X233)),X234,X235) | s(bool,X236) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X231),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X233),s('type.integer.int',X232))))) | s(bool,'T_0') = s(bool,X236)) )),
  inference(subsumption_resolution,[],[f43055,f304])).
fof(f43055,plain,(
  ( ! [X231,X235,X233,X236,X234,X232] : (~p(s(bool,'T_0')) | ~p(s(bool,X234)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X231),s('type.integer.int',X232))),s('type.integer.int',X233)),X234,X235) | s(bool,X236) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X231),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X233),s('type.integer.int',X232))))) | s(bool,'T_0') = s(bool,X236)) )),
  inference(superposition,[],[f524,f2114])).
fof(f43412,plain,(
  ( ! [X229,X227,X225,X230,X228,X226] : (p(s(bool,X228)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X225),s('type.integer.int',X226))),s('type.integer.int',X227)),X229,X228) | s(bool,X230) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X225),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X227),s('type.integer.int',X226))))) | s(bool,'T_0') = s(bool,X230)) )),
  inference(subsumption_resolution,[],[f43054,f304])).
fof(f43054,plain,(
  ( ! [X229,X227,X225,X230,X228,X226] : (~p(s(bool,'T_0')) | p(s(bool,X228)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X225),s('type.integer.int',X226))),s('type.integer.int',X227)),X229,X228) | s(bool,X230) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X225),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X227),s('type.integer.int',X226))))) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f523,f2114])).
fof(f43411,plain,(
  ( ! [X222,X220,X219,X223,X221,X224] : (p(s(bool,X222)) | ~p(s(bool,X223)) | ~sP10(X223,X222,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X219),s('type.integer.int',X220))),s('type.integer.int',X221))) | s(bool,X224) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X219),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X221),s('type.integer.int',X220))))) | s(bool,'T_0') = s(bool,X224)) )),
  inference(subsumption_resolution,[],[f43053,f304])).
fof(f43053,plain,(
  ( ! [X222,X220,X219,X223,X221,X224] : (~p(s(bool,'T_0')) | p(s(bool,X222)) | ~p(s(bool,X223)) | ~sP10(X223,X222,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X219),s('type.integer.int',X220))),s('type.integer.int',X221))) | s(bool,X224) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X219),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X221),s('type.integer.int',X220))))) | s(bool,'T_0') = s(bool,X224)) )),
  inference(superposition,[],[f518,f2114])).
fof(f43410,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (p(s(bool,X216)) | p(s(bool,X217)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X213),s('type.integer.int',X214))),s('type.integer.int',X215)),X217,X216) | s(bool,X218) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X213),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X215),s('type.integer.int',X214))))) | s(bool,'T_0') = s(bool,X218)) )),
  inference(subsumption_resolution,[],[f43052,f304])).
fof(f43052,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (~p(s(bool,'T_0')) | p(s(bool,X216)) | p(s(bool,X217)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X213),s('type.integer.int',X214))),s('type.integer.int',X215)),X217,X216) | s(bool,X218) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X213),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X215),s('type.integer.int',X214))))) | s(bool,'T_0') = s(bool,X218)) )),
  inference(superposition,[],[f508,f2114])).
fof(f43409,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (~p(s(bool,X210)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X207),s('type.integer.int',X208))),s('type.integer.int',X209)),X210,X211) | s(bool,X212) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X207),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X209),s('type.integer.int',X208))))) | s(bool,'T_0') = s(bool,X212)) )),
  inference(subsumption_resolution,[],[f43051,f304])).
fof(f43051,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (~p(s(bool,'T_0')) | ~p(s(bool,X210)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X207),s('type.integer.int',X208))),s('type.integer.int',X209)),X210,X211) | s(bool,X212) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X207),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X209),s('type.integer.int',X208))))) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f507,f2114])).
fof(f43408,plain,(
  ( ! [X206,X204,X202,X205,X203,X201] : (~p(s(bool,X204)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X201),s('type.integer.int',X202))),s('type.integer.int',X203)),X205,X204) | s(bool,X206) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X201),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X203),s('type.integer.int',X202))))) | s(bool,'T_0') = s(bool,X206)) )),
  inference(subsumption_resolution,[],[f43050,f304])).
fof(f43050,plain,(
  ( ! [X206,X204,X202,X205,X203,X201] : (~p(s(bool,'T_0')) | ~p(s(bool,X204)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X201),s('type.integer.int',X202))),s('type.integer.int',X203)),X205,X204) | s(bool,X206) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X201),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X203),s('type.integer.int',X202))))) | s(bool,'T_0') = s(bool,X206)) )),
  inference(superposition,[],[f506,f2114])).
fof(f43407,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (p(s(bool,X198)) | p(s(bool,X199)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X195),s('type.integer.int',X196))),s('type.integer.int',X197)),X198,X199) | s(bool,X200) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X195),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X197),s('type.integer.int',X196))))) | s(bool,'T_0') = s(bool,X200)) )),
  inference(subsumption_resolution,[],[f43049,f304])).
fof(f43049,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (~p(s(bool,'T_0')) | p(s(bool,X198)) | p(s(bool,X199)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X195),s('type.integer.int',X196))),s('type.integer.int',X197)),X198,X199) | s(bool,X200) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X195),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X197),s('type.integer.int',X196))))) | s(bool,'T_0') = s(bool,X200)) )),
  inference(superposition,[],[f501,f2114])).
fof(f43406,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (~p(s(bool,X192)) | p(s(bool,X193)) | ~sP7(X193,X192,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X189),s('type.integer.int',X190))),s('type.integer.int',X191))) | s(bool,X194) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X189),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X191),s('type.integer.int',X190))))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(subsumption_resolution,[],[f43048,f304])).
fof(f43048,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (~p(s(bool,'T_0')) | ~p(s(bool,X192)) | p(s(bool,X193)) | ~sP7(X193,X192,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X189),s('type.integer.int',X190))),s('type.integer.int',X191))) | s(bool,X194) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X189),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X191),s('type.integer.int',X190))))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(superposition,[],[f493,f2114])).
fof(f43405,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (~p(s(bool,X186)) | p(s(bool,X187)) | ~sP6(X186,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X183),s('type.integer.int',X184))),s('type.integer.int',X185)),X187) | s(bool,X188) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X183),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X185),s('type.integer.int',X184))))) | s(bool,'T_0') = s(bool,X188)) )),
  inference(subsumption_resolution,[],[f43047,f304])).
fof(f43047,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (~p(s(bool,'T_0')) | ~p(s(bool,X186)) | p(s(bool,X187)) | ~sP6(X186,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X183),s('type.integer.int',X184))),s('type.integer.int',X185)),X187) | s(bool,X188) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X183),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X185),s('type.integer.int',X184))))) | s(bool,'T_0') = s(bool,X188)) )),
  inference(superposition,[],[f484,f2114])).
fof(f43404,plain,(
  ( ! [X177,X182,X180,X178,X181,X179] : (~p(s(bool,X180)) | p(s(bool,X181)) | ~sP3(X180,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X177),s('type.integer.int',X178))),s('type.integer.int',X179)),X181) | s(bool,X182) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X177),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X179),s('type.integer.int',X178))))) | s(bool,'T_0') = s(bool,X182)) )),
  inference(subsumption_resolution,[],[f43046,f304])).
fof(f43046,plain,(
  ( ! [X177,X182,X180,X178,X181,X179] : (~p(s(bool,'T_0')) | ~p(s(bool,X180)) | p(s(bool,X181)) | ~sP3(X180,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X177),s('type.integer.int',X178))),s('type.integer.int',X179)),X181) | s(bool,X182) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X177),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X179),s('type.integer.int',X178))))) | s(bool,'T_0') = s(bool,X182)) )),
  inference(superposition,[],[f465,f2114])).
fof(f43403,plain,(
  ( ! [X175,X173,X171,X176,X174,X172] : (~p(s(bool,X174)) | p(s(bool,X175)) | ~sP4(X174,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X171),s('type.integer.int',X172))),s('type.integer.int',X173)),X175) | s(bool,X176) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X171),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X173),s('type.integer.int',X172))))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(subsumption_resolution,[],[f43045,f304])).
fof(f43045,plain,(
  ( ! [X175,X173,X171,X176,X174,X172] : (~p(s(bool,'T_0')) | ~p(s(bool,X174)) | p(s(bool,X175)) | ~sP4(X174,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X171),s('type.integer.int',X172))),s('type.integer.int',X173)),X175) | s(bool,X176) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X171),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X173),s('type.integer.int',X172))))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(superposition,[],[f461,f2114])).
fof(f43402,plain,(
  ( ! [X167,X165,X169,X166,X170,X168] : (sP5(X168,X169,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167))) | ~sP4(X168,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X169) | ~sP3(X169,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X168) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X169,X168) | s(bool,X170) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X165),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X167),s('type.integer.int',X166))))) | s(bool,'T_0') = s(bool,X170)) )),
  inference(subsumption_resolution,[],[f43044,f304])).
fof(f43044,plain,(
  ( ! [X167,X165,X169,X166,X170,X168] : (~p(s(bool,'T_0')) | sP5(X168,X169,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167))) | ~sP4(X168,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X169) | ~sP3(X169,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X168) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X169,X168) | s(bool,X170) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X165),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X167),s('type.integer.int',X166))))) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f458,f2114])).
fof(f43401,plain,(
  ( ! [X163,X161,X159,X164,X162,X160] : (~p(s(bool,X162)) | p(s(bool,X163)) | ~sP5(X162,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X159),s('type.integer.int',X160))),s('type.integer.int',X161)),X163) | s(bool,X164) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X159),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X161),s('type.integer.int',X160))))) | s(bool,'T_0') = s(bool,X164)) )),
  inference(subsumption_resolution,[],[f43043,f304])).
fof(f43043,plain,(
  ( ! [X163,X161,X159,X164,X162,X160] : (~p(s(bool,'T_0')) | ~p(s(bool,X162)) | p(s(bool,X163)) | ~sP5(X162,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X159),s('type.integer.int',X160))),s('type.integer.int',X161)),X163) | s(bool,X164) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X159),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X161),s('type.integer.int',X160))))) | s(bool,'T_0') = s(bool,X164)) )),
  inference(superposition,[],[f457,f2114])).
fof(f43398,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X116),s('type.integer.int',X117))),s('type.integer.int',X118))) | s(bool,X119) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X118),s('type.integer.int',X117))))) | s(bool,'T_0') = s(bool,X119)) )),
  inference(subsumption_resolution,[],[f43034,f304])).
fof(f43034,plain,(
  ( ! [X118,X116,X119,X117] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X116),s('type.integer.int',X117))),s('type.integer.int',X118))) | s(bool,X119) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X118),s('type.integer.int',X117))))) | s(bool,'T_0') = s(bool,X119)) )),
  inference(superposition,[],[f329,f2114])).
fof(f43396,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98] : (sP0(X102,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int',X101))),s('type.integer.int',X100))),s('type.integer.int',X99))) | s(bool,X103) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X100))),s('type.integer.int',X101))),s('type.integer.int',X98))))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(subsumption_resolution,[],[f43030,f304])).
fof(f43030,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98] : (~p(s(bool,'T_0')) | sP0(X102,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int',X101))),s('type.integer.int',X100))),s('type.integer.int',X99))) | s(bool,X103) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X100))),s('type.integer.int',X101))),s('type.integer.int',X98))))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f4066,f2114])).
fof(f43395,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X96] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X91))),s('type.integer.int',X94))),s('type.integer.int',X93))),s('type.integer.int',X92)),X95) | s(bool,X96) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94))),s('type.integer.int',X91))))) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f43029,f304])).
fof(f43029,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X96] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X91))),s('type.integer.int',X94))),s('type.integer.int',X93))),s('type.integer.int',X92)),X95) | s(bool,X96) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94))),s('type.integer.int',X91))))) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f4103,f2114])).
fof(f43394,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (p(s(bool,X76)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int',X75))),s('type.integer.int',X74)),X76) | s(bool,X77) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X74),s('type.integer.int',X75))),s('type.integer.int',X73))))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(subsumption_resolution,[],[f43026,f304])).
fof(f43026,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int',X75))),s('type.integer.int',X74)),X76) | s(bool,X77) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X74),s('type.integer.int',X75))),s('type.integer.int',X73))))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f1446,f2114])).
fof(f43393,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (p(s(bool,X70)) | sP1(X70,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int',X69))),s('type.integer.int',X68))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int',X67))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(subsumption_resolution,[],[f43025,f304])).
fof(f43025,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X70)) | sP1(X70,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int',X69))),s('type.integer.int',X68))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int',X67))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f1447,f2114])).
fof(f43392,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X63))),s('type.integer.int',X61)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int',X64)))) | s(bool,X65) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int',X61))))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(forward_demodulation,[],[f43391,f445])).
fof(f43391,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X63)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int',X64)))) | s(bool,X65) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int',X61))))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f43024,f304])).
fof(f43024,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X63)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int',X64)))) | s(bool,X65) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int',X61))))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f1469,f2114])).
fof(f43390,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int',X50)))))) | s(bool,X51) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X49))))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(subsumption_resolution,[],[f43021,f304])).
fof(f43021,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int',X50)))))) | s(bool,X51) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X49))))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f400,f2114])).
fof(f43389,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X46)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X45),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44)))))))) | s(bool,X47) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f43020,f304])).
fof(f43020,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X46)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X45),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44)))))))) | s(bool,X47) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f1634,f2114])).
fof(f43388,plain,(
  ( ! [X41,X42,X40] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X40),s('type.integer.int',X41))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X42) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X41))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f43019,f304])).
fof(f43019,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X40),s('type.integer.int',X41))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X42) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X41))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f1717,f2114])).
fof(f43387,plain,(
  ( ! [X39,X37,X38] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X39) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(subsumption_resolution,[],[f43018,f304])).
fof(f43018,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X39) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f1734,f2114])).
fof(f43384,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int',X28)))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int',X27))))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X28),s('type.integer.int',X27))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f43016,f304])).
fof(f43016,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int',X28)))) | s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int',X27))))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X28),s('type.integer.int',X27))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f2665,f2114])).
fof(f43371,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int',X3)))) )),
  inference(condensation,[],[f43370])).
fof(f43370,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (s(bool,X390) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X386),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X387),s('type.integer.int',X388))))) | s(bool,X390) = s(bool,X391) | s(bool,'T_0') = s(bool,X391) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X386),s('type.integer.int',X388))),s('type.integer.int',X387))) | s(bool,'T_0') = s(bool,X389)) )),
  inference(subsumption_resolution,[],[f42996,f326])).
fof(f42996,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (p(s(bool,X389)) | s(bool,X390) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X386),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X387),s('type.integer.int',X388))))) | s(bool,X390) = s(bool,X391) | s(bool,'T_0') = s(bool,X391) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X386),s('type.integer.int',X388))),s('type.integer.int',X387))) | s(bool,'T_0') = s(bool,X389)) )),
  inference(superposition,[],[f2276,f2114])).
fof(f42918,plain,(
  ( ! [X920,X918,X916,X921,X919,X917] : (s(bool,f(s(X916,sK15(X917,X918,bool,X916)))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X919),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X920),s('type.integer.int',X921))))) | s(fun(X916,bool),X917) = s(fun(X916,bool),X918) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X919),s('type.integer.int',X921))),s('type.integer.int',X920))) | s(bool,'T_0') = s(bool,g(s(X916,sK15(X917,X918,bool,X916))))) )),
  inference(superposition,[],[f444,f2114])).
fof(f43323,plain,(
  ( ! [X578,X577,X579] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X577),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X578),s('type.integer.int',X579))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X577),s('type.integer.int',X579))),s('type.integer.int',X578)))) )),
  inference(subsumption_resolution,[],[f42864,f583])).
fof(f42864,plain,(
  ( ! [X576,X578,X577,X579] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X577),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X578),s('type.integer.int',X579))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X577),s('type.integer.int',X579))),s('type.integer.int',X578))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X576),s('type.integer.int',X576)))) )),
  inference(superposition,[],[f583,f2114])).
fof(f43281,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X20) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X17),s('type.integer.int',X18))),s('type.integer.int',X19))),s('type.integer.int',X19))),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f42782,f582])).
fof(f42782,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X20) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X17),s('type.integer.int',X18))),s('type.integer.int',X19))),s('type.integer.int',X19))),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f2114,f1901])).
fof(f43210,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2))),s('type.integer.int',X3))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2))),s('type.integer.int',X1)))))) )),
  inference(condensation,[],[f43209])).
fof(f43209,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X46))),s('type.integer.int',X45))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X46))),s('type.integer.int',X44)))))) )),
  inference(duplicate_literal_removal,[],[f42751])).
fof(f42751,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X46))),s('type.integer.int',X45))) | s(bool,'T_0') = s(bool,X47) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X46))),s('type.integer.int',X44)))))) )),
  inference(superposition,[],[f2114,f1434])).
fof(f43212,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2))),s('type.integer.int',X3))) | s(bool,X4) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2))),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f43211])).
fof(f43211,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',X40))),s('type.integer.int',X39))) | s(bool,X42) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(duplicate_literal_removal,[],[f42750])).
fof(f42750,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',X40))),s('type.integer.int',X39))) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X38))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f2114,f2114])).
fof(f42739,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2114,f446])).
fof(f43239,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X5))),s('type.integer.int',X4)))) )),
  inference(condensation,[],[f43238])).
fof(f43238,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X35))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X35))),s('type.integer.int',X34))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X30),s('type.integer.int',X32))),s('type.integer.int',X31)))) )),
  inference(duplicate_literal_removal,[],[f42703])).
fof(f42703,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X35))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X35))),s('type.integer.int',X34))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X30),s('type.integer.int',X32))),s('type.integer.int',X31))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f2114,f2114])).
fof(f42650,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl0),
  inference(unit_resulting_resolution,[],[f554,f550,f874,f33342])).
fof(f42652,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f556,f551,f546,f33342])).
fof(f42653,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f556,f5936,f546,f33342])).
fof(f42655,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f557,f550,f547,f33342])).
fof(f42656,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f557,f551,f547,f33342])).
fof(f42657,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f557,f5936,f547,f33342])).
fof(f42658,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f5938,f550,f5923,f33342])).
fof(f42659,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f5938,f551,f5923,f33342])).
fof(f42660,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f5938,f5936,f5923,f33342])).
fof(f42073,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | ~sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X2)) | ~p(s(bool,X3))) )),
  inference(forward_demodulation,[],[f42065,f1432])).
fof(f42065,plain,(
  ( ! [X2,X0,X3,X1] : (~sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4647,f311])).
fof(f42051,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X3))) | ~sP10(X1,X2,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X3))) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(forward_demodulation,[],[f42043,f1432])).
fof(f42043,plain,(
  ( ! [X2,X0,X3,X1] : (~sP10(X1,X2,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X3))) | ~p(s(bool,X1)) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4644,f311])).
fof(f42023,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | ~sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X2)) | p(s(bool,X3))) )),
  inference(forward_demodulation,[],[f42015,f1432])).
fof(f42015,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4643,f311])).
fof(f41907,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X3)) | p(s(bool,X2))) )),
  inference(forward_demodulation,[],[f41899,f1432])).
fof(f41899,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X3)) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4640,f311])).
fof(f41860,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X3))) | ~sP7(X1,X2,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X3))) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(forward_demodulation,[],[f41852,f1432])).
fof(f41852,plain,(
  ( ! [X2,X0,X3,X1] : (~sP7(X1,X2,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X3))) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4639,f311])).
fof(f41834,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | ~sP6(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f41826,f1432])).
fof(f41826,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4638,f311])).
fof(f41818,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | ~sP3(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f41810,f1432])).
fof(f41810,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4637,f311])).
fof(f41788,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | ~sP4(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f41780,f1432])).
fof(f41780,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4636,f311])).
fof(f41767,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | ~sP5(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1))) )),
  inference(forward_demodulation,[],[f41759,f1432])).
fof(f41759,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)),X3) | p(s(bool,X3)) | ~p(s(bool,X1)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4634,f311])).
fof(f41743,plain,(
  ( ! [X123,X121,X118,X116,X122,X120,X119,X117] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X116),s('type.integer.int',X119))),s('type.integer.int',X118))),s('type.integer.int',X117)),X120) | s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119))))) | s(bool,X121) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(subsumption_resolution,[],[f41714,f304])).
fof(f41714,plain,(
  ( ! [X123,X121,X118,X116,X122,X120,X119,X117] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X116),s('type.integer.int',X119))),s('type.integer.int',X118))),s('type.integer.int',X117)),X120) | s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119))))) | s(bool,X121) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f4103,f2129])).
fof(f41735,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X57))),s('type.integer.int',X56))),s('type.integer.int',X55)),X58) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int',X57))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f41705,f304])).
fof(f41705,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X57))),s('type.integer.int',X56))),s('type.integer.int',X55)),X58) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int',X57))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f4103,f752])).
fof(f41703,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X46))),s('type.integer.int',X47))),s('type.integer.int',X44)))))) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X47))),s('type.integer.int',X46))),s('type.integer.int',X45)),X48)) )),
  inference(superposition,[],[f4103,f445])).
fof(f41734,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',X41))),s('type.integer.int',X40))),s('type.integer.int',X39)),X42) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X41))),s('type.integer.int',X38)))))) )),
  inference(subsumption_resolution,[],[f41702,f304])).
fof(f41702,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',X41))),s('type.integer.int',X40))),s('type.integer.int',X39)),X42) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X41))),s('type.integer.int',X38)))))) )),
  inference(superposition,[],[f4103,f1434])).
fof(f41691,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',X4)))))) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X5)) )),
  inference(superposition,[],[f4103,f446])).
fof(f41632,plain,(
  ( ! [X123,X121,X118,X116,X122,X120,X119,X117] : (sP0(X120,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X116),s('type.integer.int',X119))),s('type.integer.int',X118))),s('type.integer.int',X117))) | s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119))))) | s(bool,X121) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(subsumption_resolution,[],[f41603,f304])).
fof(f41603,plain,(
  ( ! [X123,X121,X118,X116,X122,X120,X119,X117] : (~p(s(bool,'T_0')) | sP0(X120,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X116),s('type.integer.int',X119))),s('type.integer.int',X118))),s('type.integer.int',X117))) | s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119))))) | s(bool,X121) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f4066,f2129])).
fof(f41624,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (sP0(X58,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X57))),s('type.integer.int',X56))),s('type.integer.int',X55))) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int',X57))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f41594,f304])).
fof(f41594,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | sP0(X58,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X57))),s('type.integer.int',X56))),s('type.integer.int',X55))) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int',X57))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f4066,f752])).
fof(f41592,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X46))),s('type.integer.int',X47))),s('type.integer.int',X44)))))) | sP0(X48,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X47))),s('type.integer.int',X46))),s('type.integer.int',X45)))) )),
  inference(superposition,[],[f4066,f445])).
fof(f41623,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (sP0(X42,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',X41))),s('type.integer.int',X40))),s('type.integer.int',X39))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X41))),s('type.integer.int',X38)))))) )),
  inference(subsumption_resolution,[],[f41591,f304])).
fof(f41591,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (~p(s(bool,'T_0')) | sP0(X42,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X38))),s('type.integer.int',X41))),s('type.integer.int',X40))),s('type.integer.int',X39))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X41))),s('type.integer.int',X38)))))) )),
  inference(superposition,[],[f4066,f1434])).
fof(f41580,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',X4)))))) | sP0(X5,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f4066,f446])).
fof(f41506,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X194),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X195),s('type.integer.int',X196))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X191),s('type.integer.int',X192))),s('type.integer.int',X193))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X194),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X195),s('type.integer.int',X196))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X191),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X193),s('type.integer.int',X192)))))) )),
  inference(subsumption_resolution,[],[f41456,f304])).
fof(f41456,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (~p(s(bool,'T_0')) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X194),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X195),s('type.integer.int',X196))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X191),s('type.integer.int',X192))),s('type.integer.int',X193))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X194),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X195),s('type.integer.int',X196))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X191),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X193),s('type.integer.int',X192)))))) )),
  inference(superposition,[],[f4629,f1434])).
fof(f41502,plain,(
  ( ! [X182,X180,X178,X181,X179] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X180),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X181),s('type.integer.int',X182))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X178),s('type.integer.int',X179))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X180),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X181),s('type.integer.int',X182))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X179),s('type.integer.int',X178)))) )),
  inference(subsumption_resolution,[],[f41453,f304])).
fof(f41453,plain,(
  ( ! [X182,X180,X178,X181,X179] : (~p(s(bool,'T_0')) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X180),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X181),s('type.integer.int',X182))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X178),s('type.integer.int',X179))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X180),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X181),s('type.integer.int',X182))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X179),s('type.integer.int',X178)))) )),
  inference(superposition,[],[f4629,f3992])).
fof(f41501,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X163),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X164),s('type.integer.int',X165))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X161),s('type.integer.int',X162))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X163),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X164),s('type.integer.int',X165))))) | s(bool,X166) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X162),s('type.integer.int',X161))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(subsumption_resolution,[],[f41450,f304])).
fof(f41450,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (~p(s(bool,'T_0')) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X163),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X164),s('type.integer.int',X165))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X161),s('type.integer.int',X162))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X163),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X164),s('type.integer.int',X165))))) | s(bool,X166) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X162),s('type.integer.int',X161))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f4629,f3990])).
fof(f41471,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (s(bool,X57) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))))) | s(bool,X61) = s(bool,X62) | s(bool,X57) = s(bool,X62) | s(bool,X61) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(subsumption_resolution,[],[f41430,f304])).
fof(f41430,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (~p(s(bool,'T_0')) | s(bool,X57) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60))))) | s(bool,X61) = s(bool,X62) | s(bool,X57) = s(bool,X62) | s(bool,X61) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f4629,f2129])).
fof(f41352,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (p(s(bool,X299)) | ~sP11(X300,X299,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X297),s('type.integer.int',X298))))) | s(bool,X300) = s(bool,X301) | s(bool,'T_0') = s(bool,X301) | s(bool,X302) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X298),s('type.integer.int',X297))) | s(bool,'T_0') = s(bool,X302)) )),
  inference(subsumption_resolution,[],[f41015,f304])).
fof(f41015,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (~p(s(bool,'T_0')) | p(s(bool,X299)) | ~sP11(X300,X299,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X297),s('type.integer.int',X298))))) | s(bool,X300) = s(bool,X301) | s(bool,'T_0') = s(bool,X301) | s(bool,X302) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X298),s('type.integer.int',X297))) | s(bool,'T_0') = s(bool,X302)) )),
  inference(superposition,[],[f2659,f3990])).
fof(f41351,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (p(s(bool,X293)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X291),s('type.integer.int',X292)))),X294,X293) | s(bool,X294) = s(bool,X295) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X292),s('type.integer.int',X291))) | s(bool,'T_0') = s(bool,X296)) )),
  inference(subsumption_resolution,[],[f41014,f304])).
fof(f41014,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (~p(s(bool,'T_0')) | p(s(bool,X293)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X291),s('type.integer.int',X292)))),X294,X293) | s(bool,X294) = s(bool,X295) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X292),s('type.integer.int',X291))) | s(bool,'T_0') = s(bool,X296)) )),
  inference(superposition,[],[f2646,f3990])).
fof(f41350,plain,(
  ( ! [X191,X194,X192,X193] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X191),s('type.integer.int',X192)))),X193) | s(bool,X194) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X192),s('type.integer.int',X191))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(subsumption_resolution,[],[f40995,f304])).
fof(f40995,plain,(
  ( ! [X191,X194,X192,X193] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X191),s('type.integer.int',X192)))),X193) | s(bool,X194) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X192),s('type.integer.int',X191))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(superposition,[],[f694,f3990])).
fof(f41349,plain,(
  ( ! [X189,X187,X190,X188] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X187),s('type.integer.int',X188)))),X189) | s(bool,X190) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X188),s('type.integer.int',X187))) | s(bool,'T_0') = s(bool,X190)) )),
  inference(subsumption_resolution,[],[f40994,f304])).
fof(f40994,plain,(
  ( ! [X189,X187,X190,X188] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X187),s('type.integer.int',X188)))),X189) | s(bool,X190) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X188),s('type.integer.int',X187))) | s(bool,'T_0') = s(bool,X190)) )),
  inference(superposition,[],[f662,f3990])).
fof(f41348,plain,(
  ( ! [X185,X186,X184,X183] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X185,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X183),s('type.integer.int',X184))))) | s(bool,X186) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X184),s('type.integer.int',X183))) | s(bool,'T_0') = s(bool,X186)) )),
  inference(subsumption_resolution,[],[f40993,f304])).
fof(f40993,plain,(
  ( ! [X185,X186,X184,X183] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X185,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X183),s('type.integer.int',X184))))) | s(bool,X186) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X184),s('type.integer.int',X183))) | s(bool,'T_0') = s(bool,X186)) )),
  inference(superposition,[],[f657,f3990])).
fof(f41347,plain,(
  ( ! [X182,X180,X178,X181,X179] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X178),s('type.integer.int',X179)))),X180,X181) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X178),s('type.integer.int',X179)))),X180,X181) | s(bool,X182) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X179),s('type.integer.int',X178))) | s(bool,'T_0') = s(bool,X182)) )),
  inference(subsumption_resolution,[],[f40992,f304])).
fof(f40992,plain,(
  ( ! [X182,X180,X178,X181,X179] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X178),s('type.integer.int',X179)))),X180,X181) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X178),s('type.integer.int',X179)))),X180,X181) | s(bool,X182) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X179),s('type.integer.int',X178))) | s(bool,'T_0') = s(bool,X182)) )),
  inference(superposition,[],[f529,f3990])).
fof(f41346,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X173),s('type.integer.int',X174)))),X175,X176) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X173),s('type.integer.int',X174)))),X175,X176) | s(bool,X177) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X174),s('type.integer.int',X173))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(subsumption_resolution,[],[f40991,f304])).
fof(f40991,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X173),s('type.integer.int',X174)))),X175,X176) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X173),s('type.integer.int',X174)))),X175,X176) | s(bool,X177) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X174),s('type.integer.int',X173))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f528,f3990])).
fof(f41345,plain,(
  ( ! [X171,X169,X172,X170,X168] : (~p(s(bool,X170)) | p(s(bool,X171)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X168),s('type.integer.int',X169)))),X171,X170) | s(bool,X172) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X169),s('type.integer.int',X168))) | s(bool,'T_0') = s(bool,X172)) )),
  inference(subsumption_resolution,[],[f40990,f304])).
fof(f40990,plain,(
  ( ! [X171,X169,X172,X170,X168] : (~p(s(bool,'T_0')) | ~p(s(bool,X170)) | p(s(bool,X171)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X168),s('type.integer.int',X169)))),X171,X170) | s(bool,X172) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X169),s('type.integer.int',X168))) | s(bool,'T_0') = s(bool,X172)) )),
  inference(superposition,[],[f525,f3990])).
fof(f41344,plain,(
  ( ! [X167,X165,X163,X166,X164] : (~p(s(bool,X165)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X163),s('type.integer.int',X164)))),X165,X166) | s(bool,X167) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X164),s('type.integer.int',X163))) | s(bool,'T_0') = s(bool,X167)) )),
  inference(subsumption_resolution,[],[f40989,f304])).
fof(f40989,plain,(
  ( ! [X167,X165,X163,X166,X164] : (~p(s(bool,'T_0')) | ~p(s(bool,X165)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X163),s('type.integer.int',X164)))),X165,X166) | s(bool,X167) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X164),s('type.integer.int',X163))) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f524,f3990])).
fof(f41343,plain,(
  ( ! [X158,X161,X159,X162,X160] : (p(s(bool,X160)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X158),s('type.integer.int',X159)))),X161,X160) | s(bool,X162) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X159),s('type.integer.int',X158))) | s(bool,'T_0') = s(bool,X162)) )),
  inference(subsumption_resolution,[],[f40988,f304])).
fof(f40988,plain,(
  ( ! [X158,X161,X159,X162,X160] : (~p(s(bool,'T_0')) | p(s(bool,X160)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X158),s('type.integer.int',X159)))),X161,X160) | s(bool,X162) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X159),s('type.integer.int',X158))) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f523,f3990])).
fof(f41342,plain,(
  ( ! [X156,X154,X157,X155,X153] : (p(s(bool,X155)) | ~p(s(bool,X156)) | ~sP10(X156,X155,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X153),s('type.integer.int',X154))))) | s(bool,X157) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X154),s('type.integer.int',X153))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(subsumption_resolution,[],[f40987,f304])).
fof(f40987,plain,(
  ( ! [X156,X154,X157,X155,X153] : (~p(s(bool,'T_0')) | p(s(bool,X155)) | ~p(s(bool,X156)) | ~sP10(X156,X155,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X153),s('type.integer.int',X154))))) | s(bool,X157) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X154),s('type.integer.int',X153))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f518,f3990])).
fof(f41341,plain,(
  ( ! [X152,X151,X149,X150,X148] : (p(s(bool,X150)) | p(s(bool,X151)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X148),s('type.integer.int',X149)))),X151,X150) | s(bool,X152) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X149),s('type.integer.int',X148))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(subsumption_resolution,[],[f40986,f304])).
fof(f40986,plain,(
  ( ! [X152,X151,X149,X150,X148] : (~p(s(bool,'T_0')) | p(s(bool,X150)) | p(s(bool,X151)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X148),s('type.integer.int',X149)))),X151,X150) | s(bool,X152) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X149),s('type.integer.int',X148))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f508,f3990])).
fof(f41340,plain,(
  ( ! [X146,X144,X147,X145,X143] : (~p(s(bool,X145)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X143),s('type.integer.int',X144)))),X145,X146) | s(bool,X147) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int',X143))) | s(bool,'T_0') = s(bool,X147)) )),
  inference(subsumption_resolution,[],[f40985,f304])).
fof(f40985,plain,(
  ( ! [X146,X144,X147,X145,X143] : (~p(s(bool,'T_0')) | ~p(s(bool,X145)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X143),s('type.integer.int',X144)))),X145,X146) | s(bool,X147) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X144),s('type.integer.int',X143))) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f507,f3990])).
fof(f41339,plain,(
  ( ! [X142,X140,X138,X141,X139] : (~p(s(bool,X140)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X138),s('type.integer.int',X139)))),X141,X140) | s(bool,X142) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X139),s('type.integer.int',X138))) | s(bool,'T_0') = s(bool,X142)) )),
  inference(subsumption_resolution,[],[f40984,f304])).
fof(f40984,plain,(
  ( ! [X142,X140,X138,X141,X139] : (~p(s(bool,'T_0')) | ~p(s(bool,X140)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X138),s('type.integer.int',X139)))),X141,X140) | s(bool,X142) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X139),s('type.integer.int',X138))) | s(bool,'T_0') = s(bool,X142)) )),
  inference(superposition,[],[f506,f3990])).
fof(f41338,plain,(
  ( ! [X134,X136,X135,X133,X137] : (p(s(bool,X135)) | p(s(bool,X136)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X133),s('type.integer.int',X134)))),X135,X136) | s(bool,X137) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X134),s('type.integer.int',X133))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(subsumption_resolution,[],[f40983,f304])).
fof(f40983,plain,(
  ( ! [X134,X136,X135,X133,X137] : (~p(s(bool,'T_0')) | p(s(bool,X135)) | p(s(bool,X136)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X133),s('type.integer.int',X134)))),X135,X136) | s(bool,X137) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X134),s('type.integer.int',X133))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f501,f3990])).
fof(f41337,plain,(
  ( ! [X132,X130,X128,X131,X129] : (~p(s(bool,X130)) | p(s(bool,X131)) | ~sP7(X131,X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X128),s('type.integer.int',X129))))) | s(bool,X132) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X129),s('type.integer.int',X128))) | s(bool,'T_0') = s(bool,X132)) )),
  inference(subsumption_resolution,[],[f40982,f304])).
fof(f40982,plain,(
  ( ! [X132,X130,X128,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,X130)) | p(s(bool,X131)) | ~sP7(X131,X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X128),s('type.integer.int',X129))))) | s(bool,X132) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X129),s('type.integer.int',X128))) | s(bool,'T_0') = s(bool,X132)) )),
  inference(superposition,[],[f493,f3990])).
fof(f41336,plain,(
  ( ! [X127,X125,X123,X126,X124] : (~p(s(bool,X125)) | p(s(bool,X126)) | ~sP6(X125,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X123),s('type.integer.int',X124)))),X126) | s(bool,X127) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X124),s('type.integer.int',X123))) | s(bool,'T_0') = s(bool,X127)) )),
  inference(subsumption_resolution,[],[f40981,f304])).
fof(f40981,plain,(
  ( ! [X127,X125,X123,X126,X124] : (~p(s(bool,'T_0')) | ~p(s(bool,X125)) | p(s(bool,X126)) | ~sP6(X125,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X123),s('type.integer.int',X124)))),X126) | s(bool,X127) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X124),s('type.integer.int',X123))) | s(bool,'T_0') = s(bool,X127)) )),
  inference(superposition,[],[f484,f3990])).
fof(f41335,plain,(
  ( ! [X121,X118,X122,X120,X119] : (~p(s(bool,X120)) | p(s(bool,X121)) | ~sP3(X120,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X118),s('type.integer.int',X119)))),X121) | s(bool,X122) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X119),s('type.integer.int',X118))) | s(bool,'T_0') = s(bool,X122)) )),
  inference(subsumption_resolution,[],[f40980,f304])).
fof(f40980,plain,(
  ( ! [X121,X118,X122,X120,X119] : (~p(s(bool,'T_0')) | ~p(s(bool,X120)) | p(s(bool,X121)) | ~sP3(X120,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X118),s('type.integer.int',X119)))),X121) | s(bool,X122) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X119),s('type.integer.int',X118))) | s(bool,'T_0') = s(bool,X122)) )),
  inference(superposition,[],[f465,f3990])).
fof(f41334,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,X115)) | p(s(bool,X116)) | ~sP4(X115,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X113),s('type.integer.int',X114)))),X116) | s(bool,X117) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X114),s('type.integer.int',X113))) | s(bool,'T_0') = s(bool,X117)) )),
  inference(subsumption_resolution,[],[f40979,f304])).
fof(f40979,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X115)) | p(s(bool,X116)) | ~sP4(X115,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X113),s('type.integer.int',X114)))),X116) | s(bool,X117) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X114),s('type.integer.int',X113))) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f461,f3990])).
fof(f41333,plain,(
  ( ! [X111,X109,X112,X110,X108] : (sP5(X110,X111,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109))))) | ~sP4(X110,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X111) | ~sP3(X111,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X110) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X111,X110) | s(bool,X112) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X109),s('type.integer.int',X108))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(subsumption_resolution,[],[f40978,f304])).
fof(f40978,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~p(s(bool,'T_0')) | sP5(X110,X111,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109))))) | ~sP4(X110,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X111) | ~sP3(X111,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X110) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X111,X110) | s(bool,X112) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X109),s('type.integer.int',X108))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f458,f3990])).
fof(f41332,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,X105)) | p(s(bool,X106)) | ~sP5(X105,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X103),s('type.integer.int',X104)))),X106) | s(bool,X107) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X104),s('type.integer.int',X103))) | s(bool,'T_0') = s(bool,X107)) )),
  inference(subsumption_resolution,[],[f40977,f304])).
fof(f40977,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X105)) | p(s(bool,X106)) | ~sP5(X105,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X103),s('type.integer.int',X104)))),X106) | s(bool,X107) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X104),s('type.integer.int',X103))) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f457,f3990])).
fof(f41331,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,X101)) | sP1(X101,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X100))))) | s(bool,X102) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X100),s('type.integer.int',X99))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f40976,f304])).
fof(f40976,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | p(s(bool,X101)) | sP1(X101,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X100))))) | s(bool,X102) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X100),s('type.integer.int',X99))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f431,f3990])).
fof(f41330,plain,(
  ( ! [X97,X95,X98,X96] : (p(s(bool,X97)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X95),s('type.integer.int',X96)))),X97) | s(bool,X98) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X96),s('type.integer.int',X95))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f40975,f304])).
fof(f40975,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X97)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X95),s('type.integer.int',X96)))),X97) | s(bool,X98) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X96),s('type.integer.int',X95))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f428,f3990])).
fof(f41329,plain,(
  ( ! [X94,X92,X93,X91] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X92)))),X93) | s(bool,X94) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int',X91))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f40974,f304])).
fof(f40974,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X92)))),X93) | s(bool,X94) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int',X91))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f413,f3990])).
fof(f41328,plain,(
  ( ! [X90,X88,X87,X89] : (sP0(X89,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X87),s('type.integer.int',X88))))) | s(bool,X90) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X88),s('type.integer.int',X87))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f40973,f304])).
fof(f40973,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | sP0(X89,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X87),s('type.integer.int',X88))))) | s(bool,X90) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X88),s('type.integer.int',X87))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f412,f3990])).
fof(f41325,plain,(
  ( ! [X70,X71,X69] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X69),s('type.integer.int',X70))))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X70),s('type.integer.int',X69))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(subsumption_resolution,[],[f40968,f304])).
fof(f40968,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X69),s('type.integer.int',X70))))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X70),s('type.integer.int',X69))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f329,f3990])).
fof(f41323,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int',X58)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X58)))) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f40964,f304])).
fof(f40964,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int',X58)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X58)))) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f447,f3990])).
fof(f41322,plain,(
  ( ! [X54,X52,X55,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X53),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X51),s('type.integer.int',X52)))))) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X53),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X55) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f40963,f304])).
fof(f40963,plain,(
  ( ! [X54,X52,X55,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X53),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X51),s('type.integer.int',X52)))))) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X53),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X55) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f2665,f3990])).
fof(f41308,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int',X25)))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f40955,f304])).
fof(f40955,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X25)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int',X25)))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f399,f3990])).
fof(f41307,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int',X19))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f40954,f304])).
fof(f40954,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int',X19))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f405,f3990])).
fof(f41306,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X15),s('type.integer.int',X16))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X15))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f40953,f304])).
fof(f40953,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X15),s('type.integer.int',X16))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X15))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f406,f3990])).
fof(f41305,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X12)))))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int',X12))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f41304,f3987])).
fof(f41304,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13)))))))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int',X12))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f40952,f304])).
fof(f40952,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13)))))))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int',X12))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1621,f3990])).
fof(f41291,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f41290])).
fof(f41290,plain,(
  ( ! [X389,X391,X388,X390,X392] : (s(bool,X391) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X388),s('type.integer.int',X389))) | s(bool,X391) = s(bool,X392) | s(bool,'T_0') = s(bool,X392) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X389),s('type.integer.int',X388))))) | s(bool,'T_0') = s(bool,X390)) )),
  inference(subsumption_resolution,[],[f40938,f326])).
fof(f40938,plain,(
  ( ! [X389,X391,X388,X390,X392] : (p(s(bool,X390)) | s(bool,X391) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X388),s('type.integer.int',X389))) | s(bool,X391) = s(bool,X392) | s(bool,'T_0') = s(bool,X392) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X389),s('type.integer.int',X388))))) | s(bool,'T_0') = s(bool,X390)) )),
  inference(superposition,[],[f2276,f3990])).
fof(f40836,plain,(
  ( ! [X656,X652,X654,X653,X655] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X655),s('type.integer.int',X656))) != s(bool,f(s(X652,sK15(X653,X654,bool,X652)))) | s(fun(X652,bool),X653) = s(fun(X652,bool),X654) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X656),s('type.integer.int',X655))))) | s(bool,'T_0') = s(bool,g(s(X652,sK15(X653,X654,bool,X652))))) )),
  inference(superposition,[],[f444,f3990])).
fof(f41243,plain,(
  ( ! [X410,X411] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X410),s('type.integer.int',X411))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X411),s('type.integer.int',X410)))))) )),
  inference(subsumption_resolution,[],[f40782,f583])).
fof(f40782,plain,(
  ( ! [X410,X409,X411] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X410),s('type.integer.int',X411))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X411),s('type.integer.int',X410))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X409),s('type.integer.int',X409)))) )),
  inference(superposition,[],[f583,f3990])).
fof(f40703,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f3990,f446])).
fof(f40678,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X39) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X36),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X38),s('type.integer.int',X37))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X36),s('type.integer.int',X37))))))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f3990,f445])).
fof(f41136,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f41135])).
fof(f41135,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X33))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X33)))))) )),
  inference(duplicate_literal_removal,[],[f40677])).
fof(f40677,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X33))))))) | s(bool,'T_0') = s(bool,X35) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X33)))))) )),
  inference(superposition,[],[f3990,f1434])).
fof(f41197,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | $spl0),
  inference(forward_demodulation,[],[f41138,f446])).
fof(f41138,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))))) | $spl0),
  inference(condensation,[],[f41137])).
fof(f41137,plain,(
  ( ! [X31] : (s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13)))))))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f40676])).
fof(f40676,plain,(
  ( ! [X31] : (s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))))) | s(bool,'T_0') = s(bool,X31)) ) | $spl0),
  inference(superposition,[],[f3990,f878])).
fof(f41140,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) )),
  inference(condensation,[],[f41139])).
fof(f41139,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X25),s('type.integer.int',X26))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X26),s('type.integer.int',X25)))) )),
  inference(duplicate_literal_removal,[],[f40674])).
fof(f40674,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X25),s('type.integer.int',X26))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X27) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X26),s('type.integer.int',X25)))) )),
  inference(superposition,[],[f3990,f3992])).
fof(f41142,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,X2) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(condensation,[],[f41141])).
fof(f41141,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(duplicate_literal_removal,[],[f40671])).
fof(f40671,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f3990,f3990])).
fof(f41144,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(condensation,[],[f41143])).
fof(f41143,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(duplicate_literal_removal,[],[f40670])).
fof(f40670,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3990,f5893])).
fof(f41146,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(condensation,[],[f41145])).
fof(f41145,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(duplicate_literal_removal,[],[f40669])).
fof(f40669,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f3990,f586])).
fof(f40657,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X155),s('type.integer.int',X156))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X152),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X154),s('type.integer.int',X153))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X156),s('type.integer.int',X155))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int',X154)))) )),
  inference(superposition,[],[f3990,f445])).
fof(f41151,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f41150])).
fof(f41150,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int',X78))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X79),s('type.integer.int',X80))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X80),s('type.integer.int',X79))))) | s(bool,'T_0') = s(bool,X76) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X78),s('type.integer.int',X77)))))) )),
  inference(duplicate_literal_removal,[],[f40642])).
fof(f40642,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int',X78))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X79),s('type.integer.int',X80))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X80),s('type.integer.int',X79))))) | s(bool,'T_0') = s(bool,X76) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X78),s('type.integer.int',X77))))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f3990,f3990])).
fof(f40261,plain,(
  ( ! [X639,X640,X638,X641,X637] : (s(bool,f(s(X637,sK15(X638,X639,bool,X637)))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X640),s('type.integer.int',X641))))) | s(fun(X637,bool),X638) = s(fun(X637,bool),X639) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X641),s('type.integer.int',X640))) | s(bool,'T_0') = s(bool,g(s(X637,sK15(X638,X639,bool,X637))))) )),
  inference(superposition,[],[f444,f3988])).
fof(f40491,plain,(
  ( ! [X401,X402] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X401),s('type.integer.int',X402))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X402),s('type.integer.int',X401)))) )),
  inference(subsumption_resolution,[],[f40215,f583])).
fof(f40215,plain,(
  ( ! [X401,X400,X402] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X401),s('type.integer.int',X402))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X402),s('type.integer.int',X401))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X400),s('type.integer.int',X400)))) )),
  inference(superposition,[],[f583,f3988])).
fof(f40134,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f3988,f446])).
fof(f40129,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X137),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X139),s('type.integer.int',X138))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X140),s('type.integer.int',X141))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X141),s('type.integer.int',X140))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int',X139)))) )),
  inference(superposition,[],[f3988,f445])).
fof(f40126,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X127),s('type.integer.int',X126))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X128),s('type.integer.int',X129))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X129),s('type.integer.int',X128))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X126),s('type.integer.int',X127)))))) )),
  inference(superposition,[],[f3988,f1432])).
fof(f40407,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(condensation,[],[f40406])).
fof(f40406,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X72),s('type.integer.int',X73))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X74),s('type.integer.int',X75))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X75),s('type.integer.int',X74))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X73),s('type.integer.int',X72)))) )),
  inference(duplicate_literal_removal,[],[f40118])).
fof(f40118,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X72),s('type.integer.int',X73))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X74),s('type.integer.int',X75))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X75),s('type.integer.int',X74))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X73),s('type.integer.int',X72))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f3988,f3988])).
fof(f29342,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X39) = s(fun(bool,bool),X40) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X39,X40,bool,bool)))) | s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,sK15(X39,X40,bool,bool)) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f39751,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,X4) = s(bool,sK15(X2,X3,X1,bool)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39693,plain,(
  ( ! [X146,X149,X147,X145,X148] : (s(X147,f(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X146),s('type.integer.int',X145))))) != s(X147,g(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X146),s('type.integer.int',X145))))) | s(fun(bool,X147),X148) = s(fun(bool,X147),X149) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X145),s('type.integer.int',X146))))) | s(bool,'T_0') = s(bool,sK15(X148,X149,X147,bool))) )),
  inference(superposition,[],[f2213,f1432])).
fof(f39524,plain,(
  ( ! [X2,X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'F_0')) )),
  inference(superposition,[],[f3908,f446])).
fof(f39502,plain,(
  ( ! [X2,X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'F_0')) )),
  inference(superposition,[],[f3860,f446])).
fof(f39468,plain,(
  ( ! [X103,X109,X107,X105,X108,X106,X104] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X105),s('type.integer.int',X104)))) | s(bool,X106) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X105),s('type.integer.int',X103))) | s(bool,'T_0') = s(bool,X106) | s(bool,X107) = s(bool,X108) | s(bool,X108) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X103),s('type.integer.int',X104))) | s(bool,X107) = s(bool,X109) | s(bool,'T_0') = s(bool,X109)) )),
  inference(subsumption_resolution,[],[f39452,f304])).
fof(f39452,plain,(
  ( ! [X103,X109,X107,X105,X108,X106,X104] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X105),s('type.integer.int',X104)))) | s(bool,X106) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X105),s('type.integer.int',X103))) | s(bool,'T_0') = s(bool,X106) | s(bool,X107) = s(bool,X108) | s(bool,X108) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X103),s('type.integer.int',X104))) | s(bool,X107) = s(bool,X109) | s(bool,'T_0') = s(bool,X109)) )),
  inference(superposition,[],[f2665,f2129])).
fof(f39466,plain,(
  ( ! [X54,X52,X50,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51)))) | s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X50))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f39443,f304])).
fof(f39443,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51)))) | s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X50))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2665,f752])).
fof(f39438,plain,(
  ( ! [X37,X35,X38,X36,X34] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X36),s('type.integer.int',X35)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int',X36)))) | s(bool,X38) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int',X35))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f2665,f445])).
fof(f39465,plain,(
  ( ! [X30,X33,X31,X29,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int',X31)))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X30))))) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X30)))))) )),
  inference(subsumption_resolution,[],[f39437,f304])).
fof(f39437,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int',X31)))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X30))))) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X30)))))) )),
  inference(superposition,[],[f2665,f1434])).
fof(f39464,plain,(
  ( ! [X28,X27] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | s(bool,X28) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) | s(bool,'T_0') = s(bool,X28)) ) | $spl0),
  inference(subsumption_resolution,[],[f39436,f304])).
fof(f39436,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | s(bool,X28) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X27),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) | s(bool,'T_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f2665,f878])).
fof(f39435,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int',X23)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X24)))))) | s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f2665,f1432])).
fof(f39463,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X19),s('type.integer.int',X20)))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int',X19)))) )),
  inference(subsumption_resolution,[],[f39434,f304])).
fof(f39434,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X19),s('type.integer.int',X20)))))) | s(bool,X22) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int',X19)))) )),
  inference(superposition,[],[f2665,f3992])).
fof(f39462,plain,(
  ( ! [X14,X13] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f39432,f304])).
fof(f39432,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f2665,f5893])).
fof(f39461,plain,(
  ( ! [X12,X11] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',sK12)))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f39431,f304])).
fof(f39431,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',sK12)))) | s(bool,X12) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2665,f586])).
fof(f39407,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~p(s(bool,X2))) )),
  inference(forward_demodulation,[],[f39399,f1432])).
fof(f39399,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4646,f311])).
fof(f39380,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X3))) )),
  inference(forward_demodulation,[],[f39372,f1432])).
fof(f39372,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4645,f311])).
fof(f39352,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~p(s(bool,X2))) )),
  inference(forward_demodulation,[],[f39344,f1432])).
fof(f39344,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4642,f311])).
fof(f39311,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~p(s(bool,X3))) )),
  inference(forward_demodulation,[],[f39303,f1432])).
fof(f39303,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2,X3) | ~p(s(bool,X3)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4641,f311])).
fof(f39242,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int',X55)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X57)))) | s(bool,X58) = s(bool,X59) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int',X57))) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f39229,f304])).
fof(f39229,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int',X55)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X57)))) | s(bool,X58) = s(bool,X59) | s(bool,X59) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int',X57))) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f3996,f2129])).
fof(f39240,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X12),s('type.integer.int',X11)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X13)))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X11),s('type.integer.int',X12))),s('type.integer.int',X13))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f39220,f304])).
fof(f39220,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X12),s('type.integer.int',X11)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X13)))) | s(bool,X14) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X11),s('type.integer.int',X12))),s('type.integer.int',X13))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f3996,f752])).
fof(f39239,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X6))))) )),
  inference(forward_demodulation,[],[f39215,f1432])).
fof(f39215,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X6)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X5))))))))) )),
  inference(superposition,[],[f3996,f446])).
fof(f39213,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',X3)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))))) )),
  inference(superposition,[],[f3996,f446])).
fof(f37533,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4627,f311])).
fof(f37461,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | ~p(s(bool,X4)) | p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4022,f446])).
fof(f37412,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP10(X3,X4,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | p(s(bool,X4)) | ~p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4019,f446])).
fof(f37386,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | p(s(bool,X4)) | p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4018,f446])).
fof(f37332,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | p(s(bool,X3)) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4015,f446])).
fof(f37304,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP7(X3,X4,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | ~p(s(bool,X4)) | p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4014,f446])).
fof(f36093,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6(X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X4) | ~p(s(bool,X3)) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4013,f446])).
fof(f36028,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP3(X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X4) | ~p(s(bool,X3)) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4012,f446])).
fof(f35989,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP4(X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X4) | ~p(s(bool,X3)) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4011,f446])).
fof(f35943,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP5(X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X4) | ~p(s(bool,X3)) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4009,f446])).
fof(f35935,plain,(
  ( ! [X218,X216,X219,X217] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X216),s('type.integer.int',X217)))),X218) | s(bool,X218) = s(bool,X219) | s(bool,'T_0') = s(bool,X219) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X217),s('type.integer.int',X216)))) )),
  inference(subsumption_resolution,[],[f35907,f540])).
fof(f35907,plain,(
  ( ! [X218,X216,X219,X217] : (p(s(bool,'F_0')) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X216),s('type.integer.int',X217)))),X218) | s(bool,X218) = s(bool,X219) | s(bool,'T_0') = s(bool,X219) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X217),s('type.integer.int',X216)))) )),
  inference(superposition,[],[f2645,f4542])).
fof(f35934,plain,(
  ( ! [X212,X215,X213,X214] : (sP1(X214,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X212),s('type.integer.int',X213))))) | s(bool,X214) = s(bool,X215) | s(bool,'T_0') = s(bool,X215) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X213),s('type.integer.int',X212)))) )),
  inference(subsumption_resolution,[],[f35906,f540])).
fof(f35906,plain,(
  ( ! [X212,X215,X213,X214] : (p(s(bool,'F_0')) | sP1(X214,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X212),s('type.integer.int',X213))))) | s(bool,X214) = s(bool,X215) | s(bool,'T_0') = s(bool,X215) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X213),s('type.integer.int',X212)))) )),
  inference(superposition,[],[f2644,f4542])).
fof(f35931,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X199) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X197),s('type.integer.int',X198))))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X198),s('type.integer.int',X197)))) )),
  inference(subsumption_resolution,[],[f35901,f540])).
fof(f35901,plain,(
  ( ! [X198,X200,X199,X197] : (p(s(bool,'F_0')) | s(bool,X199) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X197),s('type.integer.int',X198))))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X198),s('type.integer.int',X197)))) )),
  inference(superposition,[],[f2276,f4542])).
fof(f35827,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f4542,f446])).
fof(f35822,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))),s('type.integer.int',X0)))))) )),
  inference(unit_resulting_resolution,[],[f1873,f4542])).
fof(f35813,plain,(
  ( ! [X218,X216,X215,X219,X217] : (p(s(bool,X217)) | ~sP11(X218,X217,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X215),s('type.integer.int',X216))))) | s(bool,X218) = s(bool,X219) | s(bool,'T_0') = s(bool,X219) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X216),s('type.integer.int',X215)))) )),
  inference(subsumption_resolution,[],[f35722,f304])).
fof(f35722,plain,(
  ( ! [X218,X216,X215,X219,X217] : (~p(s(bool,'T_0')) | p(s(bool,X217)) | ~sP11(X218,X217,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X215),s('type.integer.int',X216))))) | s(bool,X218) = s(bool,X219) | s(bool,'T_0') = s(bool,X219) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X216),s('type.integer.int',X215)))) )),
  inference(superposition,[],[f2659,f3992])).
fof(f35812,plain,(
  ( ! [X212,X210,X213,X211,X214] : (p(s(bool,X212)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X210),s('type.integer.int',X211)))),X213,X212) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X211),s('type.integer.int',X210)))) )),
  inference(subsumption_resolution,[],[f35721,f304])).
fof(f35721,plain,(
  ( ! [X212,X210,X213,X211,X214] : (~p(s(bool,'T_0')) | p(s(bool,X212)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X210),s('type.integer.int',X211)))),X213,X212) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X211),s('type.integer.int',X210)))) )),
  inference(superposition,[],[f2646,f3992])).
fof(f35811,plain,(
  ( ! [X134,X136,X135] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X134),s('type.integer.int',X135)))),X136) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X135),s('type.integer.int',X134)))) )),
  inference(subsumption_resolution,[],[f35703,f304])).
fof(f35703,plain,(
  ( ! [X134,X136,X135] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X134),s('type.integer.int',X135)))),X136) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X135),s('type.integer.int',X134)))) )),
  inference(superposition,[],[f694,f3992])).
fof(f35810,plain,(
  ( ! [X132,X133,X131] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X131),s('type.integer.int',X132)))),X133) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X132),s('type.integer.int',X131)))) )),
  inference(subsumption_resolution,[],[f35702,f304])).
fof(f35702,plain,(
  ( ! [X132,X133,X131] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X131),s('type.integer.int',X132)))),X133) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X132),s('type.integer.int',X131)))) )),
  inference(superposition,[],[f662,f3992])).
fof(f35809,plain,(
  ( ! [X130,X128,X129] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X128),s('type.integer.int',X129))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X129),s('type.integer.int',X128)))) )),
  inference(subsumption_resolution,[],[f35701,f304])).
fof(f35701,plain,(
  ( ! [X130,X128,X129] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X128),s('type.integer.int',X129))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X129),s('type.integer.int',X128)))) )),
  inference(superposition,[],[f657,f3992])).
fof(f35808,plain,(
  ( ! [X127,X125,X126,X124] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X125)))),X126,X127) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X125)))),X126,X127) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X125),s('type.integer.int',X124)))) )),
  inference(subsumption_resolution,[],[f35700,f304])).
fof(f35700,plain,(
  ( ! [X127,X125,X126,X124] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X125)))),X126,X127) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X125)))),X126,X127) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X125),s('type.integer.int',X124)))) )),
  inference(superposition,[],[f529,f3992])).
fof(f35807,plain,(
  ( ! [X123,X121,X122,X120] : (~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X120),s('type.integer.int',X121)))),X122,X123) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X120),s('type.integer.int',X121)))),X122,X123) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X121),s('type.integer.int',X120)))) )),
  inference(subsumption_resolution,[],[f35699,f304])).
fof(f35699,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X120),s('type.integer.int',X121)))),X122,X123) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X120),s('type.integer.int',X121)))),X122,X123) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X121),s('type.integer.int',X120)))) )),
  inference(superposition,[],[f528,f3992])).
fof(f35806,plain,(
  ( ! [X118,X116,X119,X117] : (~p(s(bool,X118)) | p(s(bool,X119)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X116),s('type.integer.int',X117)))),X119,X118) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X117),s('type.integer.int',X116)))) )),
  inference(subsumption_resolution,[],[f35698,f304])).
fof(f35698,plain,(
  ( ! [X118,X116,X119,X117] : (~p(s(bool,'T_0')) | ~p(s(bool,X118)) | p(s(bool,X119)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X116),s('type.integer.int',X117)))),X119,X118) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X117),s('type.integer.int',X116)))) )),
  inference(superposition,[],[f525,f3992])).
fof(f35805,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,X114)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X112),s('type.integer.int',X113)))),X114,X115) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X113),s('type.integer.int',X112)))) )),
  inference(subsumption_resolution,[],[f35697,f304])).
fof(f35697,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X114)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X112),s('type.integer.int',X113)))),X114,X115) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X113),s('type.integer.int',X112)))) )),
  inference(superposition,[],[f524,f3992])).
fof(f35804,plain,(
  ( ! [X111,X109,X110,X108] : (p(s(bool,X110)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X111,X110) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X109),s('type.integer.int',X108)))) )),
  inference(subsumption_resolution,[],[f35696,f304])).
fof(f35696,plain,(
  ( ! [X111,X109,X110,X108] : (~p(s(bool,'T_0')) | p(s(bool,X110)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X108),s('type.integer.int',X109)))),X111,X110) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X109),s('type.integer.int',X108)))) )),
  inference(superposition,[],[f523,f3992])).
fof(f35803,plain,(
  ( ! [X107,X105,X106,X104] : (p(s(bool,X106)) | ~p(s(bool,X107)) | ~sP10(X107,X106,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X105))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X105),s('type.integer.int',X104)))) )),
  inference(subsumption_resolution,[],[f35695,f304])).
fof(f35695,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,'T_0')) | p(s(bool,X106)) | ~p(s(bool,X107)) | ~sP10(X107,X106,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X105))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X105),s('type.integer.int',X104)))) )),
  inference(superposition,[],[f518,f3992])).
fof(f35802,plain,(
  ( ! [X103,X101,X102,X100] : (p(s(bool,X102)) | p(s(bool,X103)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X100),s('type.integer.int',X101)))),X103,X102) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X101),s('type.integer.int',X100)))) )),
  inference(subsumption_resolution,[],[f35694,f304])).
fof(f35694,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,'T_0')) | p(s(bool,X102)) | p(s(bool,X103)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X100),s('type.integer.int',X101)))),X103,X102) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X101),s('type.integer.int',X100)))) )),
  inference(superposition,[],[f508,f3992])).
fof(f35801,plain,(
  ( ! [X99,X97,X98,X96] : (~p(s(bool,X98)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X96),s('type.integer.int',X97)))),X98,X99) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int',X96)))) )),
  inference(subsumption_resolution,[],[f35693,f304])).
fof(f35693,plain,(
  ( ! [X99,X97,X98,X96] : (~p(s(bool,'T_0')) | ~p(s(bool,X98)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X96),s('type.integer.int',X97)))),X98,X99) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int',X96)))) )),
  inference(superposition,[],[f507,f3992])).
fof(f35800,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,X94)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X92),s('type.integer.int',X93)))),X95,X94) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X93),s('type.integer.int',X92)))) )),
  inference(subsumption_resolution,[],[f35692,f304])).
fof(f35692,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | ~p(s(bool,X94)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X92),s('type.integer.int',X93)))),X95,X94) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X93),s('type.integer.int',X92)))) )),
  inference(superposition,[],[f506,f3992])).
fof(f35799,plain,(
  ( ! [X90,X88,X91,X89] : (p(s(bool,X90)) | p(s(bool,X91)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X88),s('type.integer.int',X89)))),X90,X91) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int',X88)))) )),
  inference(subsumption_resolution,[],[f35691,f304])).
fof(f35691,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'T_0')) | p(s(bool,X90)) | p(s(bool,X91)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X88),s('type.integer.int',X89)))),X90,X91) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int',X88)))) )),
  inference(superposition,[],[f501,f3992])).
fof(f35798,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,X86)) | p(s(bool,X87)) | ~sP7(X87,X86,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X85))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int',X84)))) )),
  inference(subsumption_resolution,[],[f35690,f304])).
fof(f35690,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,'T_0')) | ~p(s(bool,X86)) | p(s(bool,X87)) | ~sP7(X87,X86,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X85))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X85),s('type.integer.int',X84)))) )),
  inference(superposition,[],[f493,f3992])).
fof(f35797,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,X82)) | p(s(bool,X83)) | ~sP6(X82,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X80),s('type.integer.int',X81)))),X83) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X81),s('type.integer.int',X80)))) )),
  inference(subsumption_resolution,[],[f35689,f304])).
fof(f35689,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP6(X82,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X80),s('type.integer.int',X81)))),X83) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X81),s('type.integer.int',X80)))) )),
  inference(superposition,[],[f484,f3992])).
fof(f35796,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,X78)) | p(s(bool,X79)) | ~sP3(X78,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X76),s('type.integer.int',X77)))),X79) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int',X76)))) )),
  inference(subsumption_resolution,[],[f35688,f304])).
fof(f35688,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,X78)) | p(s(bool,X79)) | ~sP3(X78,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X76),s('type.integer.int',X77)))),X79) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int',X76)))) )),
  inference(superposition,[],[f465,f3992])).
fof(f35795,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,X74)) | p(s(bool,X75)) | ~sP4(X74,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X72),s('type.integer.int',X73)))),X75) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X73),s('type.integer.int',X72)))) )),
  inference(subsumption_resolution,[],[f35687,f304])).
fof(f35687,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X74)) | p(s(bool,X75)) | ~sP4(X74,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X72),s('type.integer.int',X73)))),X75) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X73),s('type.integer.int',X72)))) )),
  inference(superposition,[],[f461,f3992])).
fof(f35794,plain,(
  ( ! [X70,X68,X71,X69] : (sP5(X70,X71,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69))))) | ~sP4(X70,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))),X71) | ~sP3(X71,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))),X70) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))),X71,X70) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X69),s('type.integer.int',X68)))) )),
  inference(subsumption_resolution,[],[f35686,f304])).
fof(f35686,plain,(
  ( ! [X70,X68,X71,X69] : (~p(s(bool,'T_0')) | sP5(X70,X71,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69))))) | ~sP4(X70,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))),X71) | ~sP3(X71,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))),X70) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X68),s('type.integer.int',X69)))),X71,X70) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X69),s('type.integer.int',X68)))) )),
  inference(superposition,[],[f458,f3992])).
fof(f35793,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,X66)) | p(s(bool,X67)) | ~sP5(X66,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X65)))),X67) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int',X64)))) )),
  inference(subsumption_resolution,[],[f35685,f304])).
fof(f35685,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,X66)) | p(s(bool,X67)) | ~sP5(X66,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X65)))),X67) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int',X64)))) )),
  inference(superposition,[],[f457,f3992])).
fof(f35792,plain,(
  ( ! [X61,X62,X63] : (p(s(bool,X63)) | sP1(X63,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X61),s('type.integer.int',X62))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int',X61)))) )),
  inference(subsumption_resolution,[],[f35684,f304])).
fof(f35684,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X63)) | sP1(X63,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X61),s('type.integer.int',X62))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int',X61)))) )),
  inference(superposition,[],[f431,f3992])).
fof(f35791,plain,(
  ( ! [X59,X60,X58] : (p(s(bool,X60)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X58),s('type.integer.int',X59)))),X60) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int',X58)))) )),
  inference(subsumption_resolution,[],[f35683,f304])).
fof(f35683,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X60)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X58),s('type.integer.int',X59)))),X60) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X59),s('type.integer.int',X58)))) )),
  inference(superposition,[],[f428,f3992])).
fof(f35790,plain,(
  ( ! [X57,X56,X55] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56)))),X57) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int',X55)))) )),
  inference(subsumption_resolution,[],[f35682,f304])).
fof(f35682,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56)))),X57) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int',X55)))) )),
  inference(superposition,[],[f413,f3992])).
fof(f35789,plain,(
  ( ! [X54,X52,X53] : (sP0(X54,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X53),s('type.integer.int',X52)))) )),
  inference(subsumption_resolution,[],[f35681,f304])).
fof(f35681,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | sP0(X54,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X52),s('type.integer.int',X53))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X53),s('type.integer.int',X52)))) )),
  inference(superposition,[],[f412,f3992])).
fof(f35788,plain,(
  ( ! [X50,X51,X49] : (s(bool,X51) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int',X49))) | ~p(s(bool,X51)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int',X49)))) )),
  inference(forward_demodulation,[],[f35787,f1432])).
fof(f35787,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,X51)) | s(bool,X51) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X49),s('type.integer.int',X50))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int',X49)))) )),
  inference(subsumption_resolution,[],[f35680,f304])).
fof(f35680,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X51)) | s(bool,X51) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X49),s('type.integer.int',X50))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X50),s('type.integer.int',X49)))) )),
  inference(superposition,[],[f390,f3992])).
fof(f35786,plain,(
  ( ! [X39,X40] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int',X39)))) )),
  inference(subsumption_resolution,[],[f35676,f304])).
fof(f35676,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X39),s('type.integer.int',X40))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X40),s('type.integer.int',X39)))) )),
  inference(superposition,[],[f329,f3992])).
fof(f35784,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X30),s('type.integer.int',X31))),s('type.integer.int',X32)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X32)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int',X30)))) )),
  inference(subsumption_resolution,[],[f35672,f304])).
fof(f35672,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X30),s('type.integer.int',X31))),s('type.integer.int',X32)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X32)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int',X30)))) )),
  inference(superposition,[],[f447,f3992])).
fof(f35779,plain,(
  ( ! [X23,X21,X22] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int',X21)),X23) | p(s(bool,X23)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int',X21)))) )),
  inference(forward_demodulation,[],[f35778,f311])).
fof(f35778,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X23)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X22))),s('type.integer.int',X21)),X23) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int',X21)))) )),
  inference(subsumption_resolution,[],[f35669,f304])).
fof(f35669,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X22))),s('type.integer.int',X21)),X23) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X22),s('type.integer.int',X21)))) )),
  inference(superposition,[],[f1446,f3992])).
fof(f35777,plain,(
  ( ! [X19,X20,X18] : (sP1(X20,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int',X18))) | p(s(bool,X20)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int',X18)))) )),
  inference(forward_demodulation,[],[f35776,f311])).
fof(f35776,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X20)) | sP1(X20,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X19))),s('type.integer.int',X18))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int',X18)))) )),
  inference(subsumption_resolution,[],[f35668,f304])).
fof(f35668,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | sP1(X20,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X19))),s('type.integer.int',X18))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int',X18)))) )),
  inference(superposition,[],[f1447,f3992])).
fof(f35775,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X17)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X17)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X15)))) )),
  inference(forward_demodulation,[],[f35774,f1432])).
fof(f35774,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X17),s('type.integer.int',X16)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X17)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X15)))) )),
  inference(subsumption_resolution,[],[f35667,f304])).
fof(f35667,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X17),s('type.integer.int',X16)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X17)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int',X15)))) )),
  inference(superposition,[],[f1469,f3992])).
fof(f35770,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X11))),s('type.integer.int',X12)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X10)))) )),
  inference(subsumption_resolution,[],[f35664,f304])).
fof(f35664,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X11))),s('type.integer.int',X12)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X10)))) )),
  inference(superposition,[],[f399,f3992])).
fof(f35769,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X7)))) )),
  inference(subsumption_resolution,[],[f35663,f304])).
fof(f35663,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X7)))) )),
  inference(superposition,[],[f405,f3992])).
fof(f35768,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int',X4)))) )),
  inference(subsumption_resolution,[],[f35662,f304])).
fof(f35662,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int',X5))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int',X4)))) )),
  inference(superposition,[],[f406,f3992])).
fof(f35767,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X2)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(forward_demodulation,[],[f35766,f3987])).
fof(f35766,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(subsumption_resolution,[],[f35661,f304])).
fof(f35661,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(superposition,[],[f1621,f3992])).
fof(f35753,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f35752])).
fof(f35752,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int',X30))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X30),s('type.integer.int',X31))))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(duplicate_literal_removal,[],[f35655])).
fof(f35655,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int',X30))) | s(bool,X33) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X30),s('type.integer.int',X31))))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f3992,f2129])).
fof(f35646,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f3992,f446])).
fof(f35574,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f565,f33356])).
fof(f35575,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f6040,f33356])).
fof(f35577,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f567,f33356])).
fof(f35578,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f6041,f33356])).
fof(f35538,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f580,f33355])).
fof(f35541,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f571,f33355])).
fof(f35542,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f6088,f33355])).
fof(f35505,plain,(
  ( ! [X30,X31,X29,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X29)))) | s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X29))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(subsumption_resolution,[],[f35490,f304])).
fof(f35490,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X29)))) | s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X29))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f33331,f2129])).
fof(f35497,plain,(
  ( ! [X4,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X3)))) | s(bool,X4) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(subsumption_resolution,[],[f35481,f304])).
fof(f35481,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X3)))) | s(bool,X4) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f33331,f752])).
fof(f35466,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f540,f33354])).
fof(f35445,plain,(
  ~sP10('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f540,f304,f33351])).
fof(f35378,plain,(
  ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f540,f540,f33350])).
fof(f35357,plain,(
  ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f540,f540,f33347])).
fof(f35337,plain,(
  ~sP7('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f304,f540,f33346])).
fof(f35242,plain,(
  ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f540,f33345])).
fof(f35081,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f540,f33343])).
fof(f35068,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f540,f33341])).
fof(f34984,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f304,f33353])).
fof(f34916,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X0,'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f540,f33352])).
fof(f34882,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f304,f33349])).
fof(f34858,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X0,'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f304,f33348])).
fof(f34834,plain,(
  sP1('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f540,f33340])).
fof(f34823,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f540,f33339])).
fof(f34731,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f540,f556,f549,f33230,f460])).
fof(f34682,plain,(
  sP4('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f33229,f456])).
fof(f34649,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f558,f549,f33228,f458])).
fof(f33361,plain,(
  ( ! [X78,X79,X77] : (p(s(bool,X77)) | ~sP11(X78,X77,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X78) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(subsumption_resolution,[],[f33292,f304])).
fof(f33292,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,'T_0')) | p(s(bool,X77)) | ~sP11(X78,X77,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X78) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f2659,f878])).
fof(f33360,plain,(
  ( ! [X76,X74,X75] : (p(s(bool,X74)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X75,X74) | s(bool,X75) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) ) | $spl0),
  inference(subsumption_resolution,[],[f33291,f304])).
fof(f33291,plain,(
  ( ! [X76,X74,X75] : (~p(s(bool,'T_0')) | p(s(bool,X74)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X75,X74) | s(bool,X75) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f2646,f878])).
fof(f33359,plain,(
  ( ! [X42] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X42)) ) | $spl0),
  inference(subsumption_resolution,[],[f33273,f304])).
fof(f33273,plain,(
  ( ! [X42] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X42)) ) | $spl0),
  inference(superposition,[],[f694,f878])).
fof(f33358,plain,(
  ( ! [X41] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X41)) ) | $spl0),
  inference(subsumption_resolution,[],[f33272,f304])).
fof(f33272,plain,(
  ( ! [X41] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X41)) ) | $spl0),
  inference(superposition,[],[f662,f878])).
fof(f33357,plain,(
  ( ! [X40] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X40,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f33271,f304])).
fof(f33271,plain,(
  ( ! [X40] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X40,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(superposition,[],[f657,f878])).
fof(f33356,plain,(
  ( ! [X39,X38] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X38,X39) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X38,X39)) ) | $spl0),
  inference(subsumption_resolution,[],[f33270,f304])).
fof(f33270,plain,(
  ( ! [X39,X38] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X38,X39) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X38,X39)) ) | $spl0),
  inference(superposition,[],[f529,f878])).
fof(f33355,plain,(
  ( ! [X37,X36] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X36,X37) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X36,X37)) ) | $spl0),
  inference(subsumption_resolution,[],[f33269,f304])).
fof(f33269,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X36,X37) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X36,X37)) ) | $spl0),
  inference(superposition,[],[f528,f878])).
fof(f33354,plain,(
  ( ! [X35,X34] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X35,X34) | p(s(bool,X35)) | ~p(s(bool,X34))) ) | $spl0),
  inference(subsumption_resolution,[],[f33268,f304])).
fof(f33268,plain,(
  ( ! [X35,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X34)) | p(s(bool,X35)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X35,X34)) ) | $spl0),
  inference(superposition,[],[f525,f878])).
fof(f33353,plain,(
  ( ! [X33,X32] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X32,X33) | ~p(s(bool,X32))) ) | $spl0),
  inference(subsumption_resolution,[],[f33267,f304])).
fof(f33267,plain,(
  ( ! [X33,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X32,X33)) ) | $spl0),
  inference(superposition,[],[f524,f878])).
fof(f33352,plain,(
  ( ! [X30,X31] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X31,X30) | p(s(bool,X30))) ) | $spl0),
  inference(subsumption_resolution,[],[f33266,f304])).
fof(f33266,plain,(
  ( ! [X30,X31] : (~p(s(bool,'T_0')) | p(s(bool,X30)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X31,X30)) ) | $spl0),
  inference(superposition,[],[f523,f878])).
fof(f33351,plain,(
  ( ! [X28,X29] : (~sP10(X29,X28,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ~p(s(bool,X29)) | p(s(bool,X28))) ) | $spl0),
  inference(subsumption_resolution,[],[f33265,f304])).
fof(f33265,plain,(
  ( ! [X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X28)) | ~p(s(bool,X29)) | ~sP10(X29,X28,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(superposition,[],[f518,f878])).
fof(f33350,plain,(
  ( ! [X26,X27] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X27,X26) | p(s(bool,X27)) | p(s(bool,X26))) ) | $spl0),
  inference(subsumption_resolution,[],[f33264,f304])).
fof(f33264,plain,(
  ( ! [X26,X27] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | p(s(bool,X27)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X27,X26)) ) | $spl0),
  inference(superposition,[],[f508,f878])).
fof(f33349,plain,(
  ( ! [X24,X25] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X24,X25) | ~p(s(bool,X24))) ) | $spl0),
  inference(subsumption_resolution,[],[f33263,f304])).
fof(f33263,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X24)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X24,X25)) ) | $spl0),
  inference(superposition,[],[f507,f878])).
fof(f33348,plain,(
  ( ! [X23,X22] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X23,X22) | ~p(s(bool,X22))) ) | $spl0),
  inference(subsumption_resolution,[],[f33262,f304])).
fof(f33262,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X22)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X23,X22)) ) | $spl0),
  inference(superposition,[],[f506,f878])).
fof(f33347,plain,(
  ( ! [X21,X20] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X20,X21) | p(s(bool,X21)) | p(s(bool,X20))) ) | $spl0),
  inference(subsumption_resolution,[],[f33261,f304])).
fof(f33261,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | p(s(bool,X21)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X20,X21)) ) | $spl0),
  inference(superposition,[],[f501,f878])).
fof(f33346,plain,(
  ( ! [X19,X18] : (~sP7(X19,X18,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | p(s(bool,X19)) | ~p(s(bool,X18))) ) | $spl0),
  inference(subsumption_resolution,[],[f33260,f304])).
fof(f33260,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X18)) | p(s(bool,X19)) | ~sP7(X19,X18,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(superposition,[],[f493,f878])).
fof(f33345,plain,(
  ( ! [X17,X16] : (~sP6(X16,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X17) | p(s(bool,X17)) | ~p(s(bool,X16))) ) | $spl0),
  inference(subsumption_resolution,[],[f33259,f304])).
fof(f33259,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X16)) | p(s(bool,X17)) | ~sP6(X16,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X17)) ) | $spl0),
  inference(superposition,[],[f484,f878])).
fof(f33344,plain,(
  ( ! [X14,X15] : (~sP3(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X15) | p(s(bool,X15)) | ~p(s(bool,X14))) ) | $spl0),
  inference(subsumption_resolution,[],[f33258,f304])).
fof(f33258,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | ~p(s(bool,X14)) | p(s(bool,X15)) | ~sP3(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X15)) ) | $spl0),
  inference(superposition,[],[f465,f878])).
fof(f33343,plain,(
  ( ! [X12,X13] : (~sP4(X12,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X13) | p(s(bool,X13)) | ~p(s(bool,X12))) ) | $spl0),
  inference(subsumption_resolution,[],[f33257,f304])).
fof(f33257,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X12)) | p(s(bool,X13)) | ~sP4(X12,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X13)) ) | $spl0),
  inference(superposition,[],[f461,f878])).
fof(f33342,plain,(
  ( ! [X10,X11] : (~sP4(X10,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X11) | sP5(X10,X11,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ~sP3(X11,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X10) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X11,X10)) ) | $spl0),
  inference(subsumption_resolution,[],[f33256,f304])).
fof(f33256,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | sP5(X10,X11,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ~sP4(X10,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X11) | ~sP3(X11,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X10) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X11,X10)) ) | $spl0),
  inference(superposition,[],[f458,f878])).
fof(f33341,plain,(
  ( ! [X8,X9] : (~sP5(X8,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X9) | p(s(bool,X9)) | ~p(s(bool,X8))) ) | $spl0),
  inference(subsumption_resolution,[],[f33255,f304])).
fof(f33255,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | p(s(bool,X9)) | ~sP5(X8,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X9)) ) | $spl0),
  inference(superposition,[],[f457,f878])).
fof(f33340,plain,(
  ( ! [X7] : (sP1(X7,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | p(s(bool,X7))) ) | $spl0),
  inference(subsumption_resolution,[],[f33254,f304])).
fof(f33254,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | p(s(bool,X7)) | sP1(X7,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(superposition,[],[f431,f878])).
fof(f33339,plain,(
  ( ! [X6] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X6) | p(s(bool,X6))) ) | $spl0),
  inference(subsumption_resolution,[],[f33253,f304])).
fof(f33253,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X6)) ) | $spl0),
  inference(superposition,[],[f428,f878])).
fof(f33338,plain,(
  ( ! [X5] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X5)) ) | $spl0),
  inference(subsumption_resolution,[],[f33252,f304])).
fof(f33252,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X5)) ) | $spl0),
  inference(superposition,[],[f413,f878])).
fof(f33337,plain,(
  ( ! [X4] : (sP0(X4,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f33251,f304])).
fof(f33251,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | sP0(X4,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | $spl0),
  inference(superposition,[],[f412,f878])).
fof(f33331,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X0))))) ) | $spl0),
  inference(subsumption_resolution,[],[f33242,f304])).
fof(f33242,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int',X0))))) ) | $spl0),
  inference(superposition,[],[f447,f878])).
fof(f33321,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X0) = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f33320])).
fof(f33320,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f33238])).
fof(f33238,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f878,f2129])).
fof(f33228,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f540,f878,f476])).
fof(f33229,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f304,f878,f474])).
fof(f33230,plain,(
  ~sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f540,f878,f476])).
fof(f33231,plain,(
  sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(unit_resulting_resolution,[],[f304,f878,f474])).
fof(f29378,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK15(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f29377])).
fof(f29377,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,g(s(X4,sK15(X5,X6,bool,X4)))) | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(X4,sK15(X5,X6,bool,X4))))) )),
  inference(duplicate_literal_removal,[],[f29376])).
fof(f29376,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,g(s(X4,sK15(X5,X6,bool,X4)))) | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(X4,sK15(X5,X6,bool,X4))))) )),
  inference(condensation,[],[f29375])).
fof(f29375,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (s(fun(X72,bool),X73) = s(fun(X72,bool),X74) | s(bool,'T_0') = s(bool,g(s(X72,sK15(X73,X74,bool,X72)))) | s(bool,X75) = s(bool,X76) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,f(s(X72,sK15(X73,X74,bool,X72))))) )),
  inference(subsumption_resolution,[],[f29363,f15460])).
fof(f29363,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (s(bool,'F_0') != s(bool,X75) | s(fun(X72,bool),X73) = s(fun(X72,bool),X74) | s(bool,'T_0') = s(bool,g(s(X72,sK15(X73,X74,bool,X72)))) | s(bool,X75) = s(bool,X76) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,f(s(X72,sK15(X73,X74,bool,X72))))) )),
  inference(superposition,[],[f1488,f2129])).
fof(f1488,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK15(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f444,f313])).
fof(f2214,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,X183) != s(bool,f(s(X180,sK15(X181,X182,bool,X180)))) | s(fun(X180,bool),X181) = s(fun(X180,bool),X182) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,g(s(X180,sK15(X181,X182,bool,X180))))) )),
  inference(superposition,[],[f444,f752])).
fof(f2365,plain,(
  ( ! [X177,X175,X176,X174] : (s(bool,'T_0') != s(bool,f(s(X174,sK15(X175,X176,bool,X174)))) | s(fun(X174,bool),X175) = s(fun(X174,bool),X176) | s(bool,X177) = s(bool,g(s(X174,sK15(X175,X176,bool,X174)))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f444,f752])).
fof(f4728,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK15(X1,X2,bool,X0))))) ) | $spl3),
  inference(subsumption_resolution,[],[f4718,f4449])).
fof(f4718,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK15(X1,X2,bool,X0))))) ) | $spl3),
  inference(superposition,[],[f1488,f4298])).
fof(f12361,plain,(
  ( ! [X843,X841,X839,X842,X840,X838] : (s(bool,X841) != s(bool,f(s(X838,sK15(X839,X840,bool,X838)))) | s(fun(X838,bool),X839) = s(fun(X838,bool),X840) | s(bool,X841) = s(bool,X842) | s(bool,'T_0') = s(bool,X842) | s(bool,X843) = s(bool,g(s(X838,sK15(X839,X840,bool,X838)))) | s(bool,'T_0') = s(bool,X843)) )),
  inference(superposition,[],[f444,f2129])).
fof(f12725,plain,(
  ( ! [X843,X841,X839,X842,X840,X838] : (s(bool,X841) != s(bool,f(s(X838,sK15(X839,X840,bool,X838)))) | s(fun(X838,bool),X839) = s(fun(X838,bool),X840) | s(bool,X842) = s(bool,g(s(X838,sK15(X839,X840,bool,X838)))) | s(bool,'T_0') = s(bool,X841) | s(bool,X842) = s(bool,X843) | s(bool,'T_0') = s(bool,X843)) )),
  inference(superposition,[],[f444,f2129])).
fof(f12907,plain,(
  ( ! [X779,X777,X775,X778,X776,X780] : (s(bool,X778) != s(bool,f(s(X775,sK15(X776,X777,bool,X775)))) | s(fun(X775,bool),X776) = s(fun(X775,bool),X777) | s(bool,X778) = s(bool,X779) | s(bool,'T_0') = s(bool,g(s(X775,sK15(X776,X777,bool,X775)))) | s(bool,X779) = s(bool,X780) | s(bool,'T_0') = s(bool,X780)) )),
  inference(superposition,[],[f444,f2129])).
fof(f13192,plain,(
  ( ! [X808,X806,X804,X809,X807,X805] : (s(bool,'T_0') != s(bool,f(s(X804,sK15(X805,X806,bool,X804)))) | s(fun(X804,bool),X805) = s(fun(X804,bool),X806) | s(bool,X807) = s(bool,X808) | s(bool,X808) = s(bool,g(s(X804,sK15(X805,X806,bool,X804)))) | s(bool,X807) = s(bool,X809) | s(bool,'T_0') = s(bool,X809)) )),
  inference(superposition,[],[f444,f2129])).
fof(f16338,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK15(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16337])).
fof(f16337,plain,(
  ( ! [X546,X549,X545,X547,X548,X550] : (s(fun(X545,bool),X546) = s(fun(X545,bool),X547) | s(bool,'T_0') = s(bool,g(s(X545,sK15(X546,X547,bool,X545)))) | s(bool,X549) = s(bool,f(s(X545,sK15(X546,X547,bool,X545)))) | s(bool,'T_0') = s(bool,X548) | s(bool,X549) = s(bool,X550) | s(bool,'T_0') = s(bool,X550)) )),
  inference(subsumption_resolution,[],[f12668,f313])).
fof(f12668,plain,(
  ( ! [X546,X549,X545,X547,X548,X550] : (s(bool,'F_0') != s(bool,X548) | s(fun(X545,bool),X546) = s(fun(X545,bool),X547) | s(bool,'T_0') = s(bool,g(s(X545,sK15(X546,X547,bool,X545)))) | s(bool,X549) = s(bool,f(s(X545,sK15(X546,X547,bool,X545)))) | s(bool,'T_0') = s(bool,X548) | s(bool,X549) = s(bool,X550) | s(bool,'T_0') = s(bool,X550)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f1469,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X1)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) )),
  inference(forward_demodulation,[],[f1435,f445])).
fof(f1435,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X3))))) )),
  inference(superposition,[],[f447,f445])).
fof(f2665,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int',X117)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X115),s('type.integer.int',X117)))) | s(bool,X118) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X115),s('type.integer.int',X116))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(subsumption_resolution,[],[f2345,f304])).
fof(f2345,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X116),s('type.integer.int',X117)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X115),s('type.integer.int',X117)))) | s(bool,X118) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X115),s('type.integer.int',X116))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f447,f752])).
fof(f3988,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int',X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1432,f752])).
fof(f3992,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X14),s('type.integer.int',X15))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X14)))) )),
  inference(superposition,[],[f1432,f313])).
fof(f3993,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(superposition,[],[f406,f1432])).
fof(f3994,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f405,f1432])).
fof(f3995,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X8)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X6)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X8))))))) )),
  inference(superposition,[],[f399,f1432])).
fof(f3996,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10))),s('type.integer.int',X11)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X9)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X11))))) )),
  inference(superposition,[],[f447,f1432])).
fof(f4005,plain,(
  ( ! [X33,X31,X32] : (sP0(X33,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X32),s('type.integer.int',X31))))) )),
  inference(superposition,[],[f412,f1432])).
fof(f4006,plain,(
  ( ! [X35,X36,X34] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X34),s('type.integer.int',X35)))),X36) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X35),s('type.integer.int',X34))))) )),
  inference(superposition,[],[f413,f1432])).
fof(f4007,plain,(
  ( ! [X39,X37,X38] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X37),s('type.integer.int',X38)))),X39) | p(s(bool,X39)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X38),s('type.integer.int',X37))))) )),
  inference(superposition,[],[f428,f1432])).
fof(f4008,plain,(
  ( ! [X41,X42,X40] : (sP1(X42,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X40),s('type.integer.int',X41))))) | p(s(bool,X42)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X41),s('type.integer.int',X40))))) )),
  inference(superposition,[],[f431,f1432])).
fof(f4009,plain,(
  ( ! [X45,X43,X46,X44] : (~sP5(X45,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X43),s('type.integer.int',X44)))),X46) | ~p(s(bool,X45)) | p(s(bool,X46)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int',X43))))) )),
  inference(superposition,[],[f457,f1432])).
fof(f4010,plain,(
  ( ! [X47,X50,X48,X49] : (~sP3(X50,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X47),s('type.integer.int',X48)))),X49) | sP5(X49,X50,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X47),s('type.integer.int',X48))))) | ~sP4(X49,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X47),s('type.integer.int',X48)))),X50) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X48),s('type.integer.int',X47)))) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X47),s('type.integer.int',X48)))),X50,X49)) )),
  inference(superposition,[],[f458,f1432])).
fof(f4011,plain,(
  ( ! [X54,X52,X53,X51] : (~sP4(X53,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X51),s('type.integer.int',X52)))),X54) | ~p(s(bool,X53)) | p(s(bool,X54)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51))))) )),
  inference(superposition,[],[f461,f1432])).
fof(f4012,plain,(
  ( ! [X57,X58,X56,X55] : (~sP3(X57,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X55),s('type.integer.int',X56)))),X58) | ~p(s(bool,X57)) | p(s(bool,X58)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X56),s('type.integer.int',X55))))) )),
  inference(superposition,[],[f465,f1432])).
fof(f4013,plain,(
  ( ! [X61,X59,X62,X60] : (~sP6(X61,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X60)))),X62) | ~p(s(bool,X61)) | p(s(bool,X62)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X60),s('type.integer.int',X59))))) )),
  inference(superposition,[],[f484,f1432])).
fof(f4014,plain,(
  ( ! [X66,X64,X65,X63] : (~sP7(X66,X65,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X63),s('type.integer.int',X64))))) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X64),s('type.integer.int',X63))))) )),
  inference(superposition,[],[f493,f1432])).
fof(f4015,plain,(
  ( ! [X70,X68,X69,X67] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X68)))),X69,X70) | p(s(bool,X69)) | p(s(bool,X70)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X68),s('type.integer.int',X67))))) )),
  inference(superposition,[],[f501,f1432])).
fof(f4016,plain,(
  ( ! [X74,X72,X71,X73] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X72)))),X74,X73) | ~p(s(bool,X73)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int',X71))))) )),
  inference(superposition,[],[f506,f1432])).
fof(f4017,plain,(
  ( ! [X78,X76,X77,X75] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X75),s('type.integer.int',X76)))),X77,X78) | ~p(s(bool,X77)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X76),s('type.integer.int',X75))))) )),
  inference(superposition,[],[f507,f1432])).
fof(f4018,plain,(
  ( ! [X80,X81,X79,X82] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X79),s('type.integer.int',X80)))),X82,X81) | p(s(bool,X81)) | p(s(bool,X82)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X80),s('type.integer.int',X79))))) )),
  inference(superposition,[],[f508,f1432])).
fof(f4019,plain,(
  ( ! [X85,X83,X86,X84] : (~sP10(X86,X85,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X83),s('type.integer.int',X84))))) | p(s(bool,X85)) | ~p(s(bool,X86)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X84),s('type.integer.int',X83))))) )),
  inference(superposition,[],[f518,f1432])).
fof(f4020,plain,(
  ( ! [X90,X88,X87,X89] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X87),s('type.integer.int',X88)))),X90,X89) | p(s(bool,X89)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X88),s('type.integer.int',X87))))) )),
  inference(superposition,[],[f523,f1432])).
fof(f4021,plain,(
  ( ! [X94,X92,X93,X91] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X92)))),X93,X94) | ~p(s(bool,X93)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int',X91))))) )),
  inference(superposition,[],[f524,f1432])).
fof(f4022,plain,(
  ( ! [X97,X95,X98,X96] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X95),s('type.integer.int',X96)))),X98,X97) | ~p(s(bool,X97)) | p(s(bool,X98)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X96),s('type.integer.int',X95))))) )),
  inference(superposition,[],[f525,f1432])).
fof(f4023,plain,(
  ( ! [X101,X99,X102,X100] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X100)))),X101,X102) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X100)))),X101,X102) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X100),s('type.integer.int',X99))))) )),
  inference(superposition,[],[f528,f1432])).
fof(f4024,plain,(
  ( ! [X103,X105,X106,X104] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X103),s('type.integer.int',X104)))),X105,X106) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X103),s('type.integer.int',X104)))),X105,X106) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X104),s('type.integer.int',X103))))) )),
  inference(superposition,[],[f529,f1432])).
fof(f4025,plain,(
  ( ! [X109,X107,X108] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X108),s('type.integer.int',X107)))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X109,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X107),s('type.integer.int',X108)))))) )),
  inference(superposition,[],[f657,f1432])).
fof(f4026,plain,(
  ( ! [X111,X112,X110] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X111),s('type.integer.int',X110)))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X110),s('type.integer.int',X111)))),X112)) )),
  inference(superposition,[],[f662,f1432])).
fof(f4027,plain,(
  ( ! [X114,X115,X113] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X114),s('type.integer.int',X113)))) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X113),s('type.integer.int',X114)))),X115)) )),
  inference(superposition,[],[f694,f1432])).
fof(f4620,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X8)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X8)))))) )),
  inference(forward_demodulation,[],[f4619,f445])).
fof(f4619,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int',X10)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X8)))))) )),
  inference(subsumption_resolution,[],[f4554,f304])).
fof(f4554,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int',X10)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X8)))))) )),
  inference(superposition,[],[f447,f1434])).
fof(f5135,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X10)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X9))),s('type.integer.int',X7)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) )),
  inference(forward_demodulation,[],[f5134,f445])).
fof(f5134,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X9)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X10)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) )),
  inference(subsumption_resolution,[],[f5117,f304])).
fof(f5117,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X9)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int',X10)))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) )),
  inference(superposition,[],[f1469,f1434])).
fof(f5136,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X13),s('type.integer.int',X14))),s('type.integer.int',X12)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X15),s('type.integer.int',X14))),s('type.integer.int',X12)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int',X15))))) )),
  inference(forward_demodulation,[],[f5118,f445])).
fof(f5118,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X13),s('type.integer.int',X14))),s('type.integer.int',X12)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X15),s('type.integer.int',X14)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int',X15))))) )),
  inference(superposition,[],[f1469,f445])).
fof(f5138,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int',X23)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X22)))))) | s(bool,X24) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X21),s('type.integer.int',X22))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f5120,f304])).
fof(f5120,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X23),s('type.integer.int',X22)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X21),s('type.integer.int',X23)))) | s(bool,X24) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X21),s('type.integer.int',X22))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f1469,f752])).
fof(f5883,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X0)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(forward_demodulation,[],[f5872,f3987])).
fof(f5872,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))) )),
  inference(superposition,[],[f1621,f1432])).
fof(f7037,plain,(
  ( ! [X33,X34,X32] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X33),s('type.integer.int',X32))) | s(bool,X34) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X32),s('type.integer.int',X33))))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f2640,f1432])).
fof(f7115,plain,(
  ( ! [X54,X52,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51)))) | sP1(X53,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X51),s('type.integer.int',X52))))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2644,f1432])).
fof(f7184,plain,(
  ( ! [X54,X52,X53,X51] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int',X51)))) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X51),s('type.integer.int',X52)))),X53) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2645,f1432])).
fof(f8480,plain,(
  ( ! [X74,X72,X71,X75,X73] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int',X71)))) | p(s(bool,X73)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X72)))),X74,X73) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f2646,f1432])).
fof(f9813,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X75),s('type.integer.int',X74)))) | p(s(bool,X76)) | ~sP11(X77,X76,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X74),s('type.integer.int',X75))))) | s(bool,X77) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f2659,f1432])).
fof(f11297,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | sP0(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) )),
  inference(forward_demodulation,[],[f11289,f1432])).
fof(f11289,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4630,f311])).
fof(f11334,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | sP0('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2)) )),
  inference(forward_demodulation,[],[f11326,f1432])).
fof(f11326,plain,(
  ( ! [X2,X0,X1] : (sP0('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),X2) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f4631,f311])).
fof(f11908,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s(bool,X146) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int',X144))) | s(bool,X146) = s(bool,X147) | s(bool,'T_0') = s(bool,X147) | s(bool,X148) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X144),s('type.integer.int',X145))))) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f2129,f1432])).
fof(f11982,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s(bool,X146) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X145),s('type.integer.int',X144))) | s(bool,X147) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X144),s('type.integer.int',X145))))) | s(bool,'T_0') = s(bool,X146) | s(bool,X147) = s(bool,X148) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f2129,f1432])).
fof(f12019,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,X134) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X133),s('type.integer.int',X132))) | s(bool,X134) = s(bool,X135) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X132),s('type.integer.int',X133))))) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136)) )),
  inference(superposition,[],[f2129,f1432])).
fof(f12062,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X99),s('type.integer.int',X98))) | s(bool,X100) = s(bool,X101) | s(bool,X101) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X98),s('type.integer.int',X99))))) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f2129,f1432])).
fof(f16398,plain,(
  ( ! [X561,X557,X559,X560,X556,X558] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X557),s('type.integer.int',X558)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X556),s('type.integer.int',X558)))) | s(bool,X559) = s(bool,X560) | s(bool,X560) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X556),s('type.integer.int',X557))) | s(bool,X559) = s(bool,X561) | s(bool,'T_0') = s(bool,X561)) )),
  inference(subsumption_resolution,[],[f13147,f304])).
fof(f13147,plain,(
  ( ! [X561,X557,X559,X560,X556,X558] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X557),s('type.integer.int',X558)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X556),s('type.integer.int',X558)))) | s(bool,X559) = s(bool,X560) | s(bool,X560) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X556),s('type.integer.int',X557))) | s(bool,X559) = s(bool,X561) | s(bool,'T_0') = s(bool,X561)) )),
  inference(superposition,[],[f447,f2129])).
fof(f16403,plain,(
  ( ! [X584,X586,X582,X585,X587,X581,X583] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X581),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X584),s('type.integer.int',X583)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X582),s('type.integer.int',X584)))) | s(bool,X585) = s(bool,X586) | s(bool,X586) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X581),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X582),s('type.integer.int',X583))))) | s(bool,X585) = s(bool,X587) | s(bool,'T_0') = s(bool,X587)) )),
  inference(subsumption_resolution,[],[f13152,f304])).
fof(f13152,plain,(
  ( ! [X584,X586,X582,X585,X587,X581,X583] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X581),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X584),s('type.integer.int',X583)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X582),s('type.integer.int',X584)))) | s(bool,X585) = s(bool,X586) | s(bool,X586) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X581),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X582),s('type.integer.int',X583))))) | s(bool,X585) = s(bool,X587) | s(bool,'T_0') = s(bool,X587)) )),
  inference(superposition,[],[f1469,f2129])).
fof(f395,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f397,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f398,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f400,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f401,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f247,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) & (((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) & (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))),
  inference(flattening,[],[f246])).
fof(f246,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))))) & (((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) & (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))),
  inference(nnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) <=> ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X16,X17] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) <=> ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X17)))))))),
  file('thm.int_arith.lt_justify_multiplication','thm.integer.INT_MUL_SIGN_CASES|split|1')).
fof(f402,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f404,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f405,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f406,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f1566,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1560,f1432])).
fof(f1560,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f396,f446])).
fof(f1581,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1576,f1432])).
fof(f1576,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f397,f446])).
fof(f1634,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2))))))) )),
  inference(superposition,[],[f400,f445])).
fof(f1717,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(subsumption_resolution,[],[f1713,f304])).
fof(f1713,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f405,f586])).
fof(f1734,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(subsumption_resolution,[],[f1730,f304])).
fof(f1730,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f406,f586])).
fof(f2666,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X120),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int',X120)))))) | s(bool,X121) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X121)) )),
  inference(subsumption_resolution,[],[f2346,f304])).
fof(f2346,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X120),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int',X120)))))) | s(bool,X121) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X121)) )),
  inference(superposition,[],[f400,f752])).
fof(f2667,plain,(
  ( ! [X127,X128,X126] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X127)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X127),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X128) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X126),s('type.integer.int',X127))))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f2349,f304])).
fof(f2349,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X127)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X127),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X128) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X126),s('type.integer.int',X127))))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f398,f752])).
fof(f2668,plain,(
  ( ! [X130,X131,X129] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X129)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X130),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X131) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X129),s('type.integer.int',X130))))) | s(bool,'T_0') = s(bool,X131)) )),
  inference(subsumption_resolution,[],[f2350,f304])).
fof(f2350,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X129)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X130),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X131) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X129),s('type.integer.int',X130))))) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f397,f752])).
fof(f2669,plain,(
  ( ! [X134,X132,X133] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X133)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X132),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X134) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X132),s('type.integer.int',X133))))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(subsumption_resolution,[],[f2351,f304])).
fof(f2351,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X133)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X132),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X134) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X132),s('type.integer.int',X133))))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f396,f752])).
fof(f2670,plain,(
  ( ! [X136,X135,X137] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X135)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X135),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X137) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X135),s('type.integer.int',X136))))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(subsumption_resolution,[],[f2352,f304])).
fof(f2352,plain,(
  ( ! [X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X135)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X135),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X137) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X135),s('type.integer.int',X136))))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f395,f752])).
fof(f2671,plain,(
  ( ! [X140,X138,X139] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X139),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X140) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X138))) | s(bool,'T_0') = s(bool,X140)) )),
  inference(subsumption_resolution,[],[f2353,f304])).
fof(f2353,plain,(
  ( ! [X140,X138,X139] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X139),s('type.integer.int',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X139),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X140) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X138))) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f406,f752])).
fof(f2672,plain,(
  ( ! [X142,X143,X141] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X142),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int',X142))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X143) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X141))) | s(bool,'T_0') = s(bool,X143)) )),
  inference(subsumption_resolution,[],[f2354,f304])).
fof(f2354,plain,(
  ( ! [X142,X143,X141] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X142),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int',X142))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X143) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X141))) | s(bool,'T_0') = s(bool,X143)) )),
  inference(superposition,[],[f405,f752])).
fof(f2674,plain,(
  ( ! [X151,X149,X150] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X150)))) | s(bool,X151) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X149),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X151)) )),
  inference(subsumption_resolution,[],[f2358,f304])).
fof(f2358,plain,(
  ( ! [X151,X149,X150] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X150)))) | s(bool,X151) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X149),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f404,f752])).
fof(f2676,plain,(
  ( ! [X156,X157,X155] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X156),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X155),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X157) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X155),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(subsumption_resolution,[],[f2360,f304])).
fof(f2360,plain,(
  ( ! [X156,X157,X155] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X156),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X155),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X157) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X155),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f402,f752])).
fof(f2677,plain,(
  ( ! [X158,X159,X160] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X158)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X158),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X160) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X158),s('type.integer.int',X159))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(subsumption_resolution,[],[f2361,f304])).
fof(f2361,plain,(
  ( ! [X158,X159,X160] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X158)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X158),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X160) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X158),s('type.integer.int',X159))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f401,f752])).
fof(f4621,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))),s('type.integer.int',X13)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))))) )),
  inference(subsumption_resolution,[],[f4555,f304])).
fof(f4555,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))),s('type.integer.int',X13)))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))))) )),
  inference(superposition,[],[f400,f1434])).
fof(f5273,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X13)))))) | s(bool,X16) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f5264,f304])).
fof(f5264,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X13)))))) | s(bool,X16) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f1634,f752])).
fof(f5302,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1566,f446])).
fof(f5321,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5304,f304])).
fof(f5304,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1566,f752])).
fof(f5427,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int',X4)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1581,f446])).
fof(f5448,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5431,f304])).
fof(f5431,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1581,f752])).
fof(f6270,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X6) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f6261,f304])).
fof(f6261,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X6) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1717,f752])).
fof(f6293,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X6) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f6284,f304])).
fof(f6284,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X6) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1734,f752])).
fof(f11157,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(subsumption_resolution,[],[f11077,f304])).
fof(f11077,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f406,f5893])).
fof(f11158,plain,(
  ( ! [X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(subsumption_resolution,[],[f11078,f304])).
fof(f11078,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f405,f5893])).
fof(f16399,plain,(
  ( ! [X565,X563,X564,X562] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X562),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X563) = s(bool,X564) | s(bool,X564) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X562),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X563) = s(bool,X565) | s(bool,'T_0') = s(bool,X565)) )),
  inference(subsumption_resolution,[],[f13148,f304])).
fof(f13148,plain,(
  ( ! [X565,X563,X564,X562] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X562),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X563) = s(bool,X564) | s(bool,X564) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X562),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X563) = s(bool,X565) | s(bool,'T_0') = s(bool,X565)) )),
  inference(superposition,[],[f1734,f2129])).
fof(f16400,plain,(
  ( ! [X569,X567,X568,X566] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X566))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X567) = s(bool,X568) | s(bool,X568) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X566),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X567) = s(bool,X569) | s(bool,'T_0') = s(bool,X569)) )),
  inference(subsumption_resolution,[],[f13149,f304])).
fof(f13149,plain,(
  ( ! [X569,X567,X568,X566] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X566))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X567) = s(bool,X568) | s(bool,X568) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X566),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X567) = s(bool,X569) | s(bool,'T_0') = s(bool,X569)) )),
  inference(superposition,[],[f1717,f2129])).
fof(f16401,plain,(
  ( ! [X573,X575,X571,X572,X574,X570] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X571),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X572)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X571),s('type.integer.int',X572))),s('type.integer.int',X570)))))) | s(bool,X573) = s(bool,X574) | s(bool,X574) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X570),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X573) = s(bool,X575) | s(bool,'T_0') = s(bool,X575)) )),
  inference(subsumption_resolution,[],[f13150,f304])).
fof(f13150,plain,(
  ( ! [X573,X575,X571,X572,X574,X570] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X571),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X572)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X571),s('type.integer.int',X572))),s('type.integer.int',X570)))))) | s(bool,X573) = s(bool,X574) | s(bool,X574) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X570),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X573) = s(bool,X575) | s(bool,'T_0') = s(bool,X575)) )),
  inference(superposition,[],[f1634,f2129])).
fof(f16402,plain,(
  ( ! [X580,X576,X578,X577,X579] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X577),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X576),s('type.integer.int',X577)))))) | s(bool,X578) = s(bool,X579) | s(bool,X579) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X576),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X578) = s(bool,X580) | s(bool,'T_0') = s(bool,X580)) )),
  inference(subsumption_resolution,[],[f13151,f304])).
fof(f13151,plain,(
  ( ! [X580,X576,X578,X577,X579] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X577),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X576),s('type.integer.int',X577)))))) | s(bool,X578) = s(bool,X579) | s(bool,X579) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X576),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X578) = s(bool,X580) | s(bool,'T_0') = s(bool,X580)) )),
  inference(superposition,[],[f400,f2129])).
fof(f16409,plain,(
  ( ! [X633,X631,X632,X634,X630] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X631),s('type.integer.int',X630))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X631),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X632) = s(bool,X633) | s(bool,X633) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X630))) | s(bool,X632) = s(bool,X634) | s(bool,'T_0') = s(bool,X634)) )),
  inference(subsumption_resolution,[],[f13160,f304])).
fof(f13160,plain,(
  ( ! [X633,X631,X632,X634,X630] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X631),s('type.integer.int',X630))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X631),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X632) = s(bool,X633) | s(bool,X633) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X630))) | s(bool,X632) = s(bool,X634) | s(bool,'T_0') = s(bool,X634)) )),
  inference(superposition,[],[f406,f2129])).
fof(f16410,plain,(
  ( ! [X639,X635,X636,X638,X637] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X636),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X635),s('type.integer.int',X636))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X637) = s(bool,X638) | s(bool,X638) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X635))) | s(bool,X637) = s(bool,X639) | s(bool,'T_0') = s(bool,X639)) )),
  inference(subsumption_resolution,[],[f13161,f304])).
fof(f13161,plain,(
  ( ! [X639,X635,X636,X638,X637] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X636),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X635),s('type.integer.int',X636))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X637) = s(bool,X638) | s(bool,X638) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X635))) | s(bool,X637) = s(bool,X639) | s(bool,'T_0') = s(bool,X639)) )),
  inference(superposition,[],[f405,f2129])).
fof(f16412,plain,(
  ( ! [X648,X646,X649,X645,X647] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X646)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X646),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X647) = s(bool,X648) | s(bool,X648) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X645),s('type.integer.int',X646))))) | s(bool,X647) = s(bool,X649) | s(bool,'T_0') = s(bool,X649)) )),
  inference(subsumption_resolution,[],[f13163,f304])).
fof(f13163,plain,(
  ( ! [X648,X646,X649,X645,X647] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X646)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X646),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X647) = s(bool,X648) | s(bool,X648) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X645),s('type.integer.int',X646))))) | s(bool,X647) = s(bool,X649) | s(bool,'T_0') = s(bool,X649)) )),
  inference(superposition,[],[f398,f2129])).
fof(f16413,plain,(
  ( ! [X652,X654,X650,X653,X651] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X650)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X651),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X652) = s(bool,X653) | s(bool,X653) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X650),s('type.integer.int',X651))))) | s(bool,X652) = s(bool,X654) | s(bool,'T_0') = s(bool,X654)) )),
  inference(subsumption_resolution,[],[f13164,f304])).
fof(f13164,plain,(
  ( ! [X652,X654,X650,X653,X651] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X650)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X651),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X652) = s(bool,X653) | s(bool,X653) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X650),s('type.integer.int',X651))))) | s(bool,X652) = s(bool,X654) | s(bool,'T_0') = s(bool,X654)) )),
  inference(superposition,[],[f397,f2129])).
fof(f16414,plain,(
  ( ! [X656,X658,X657,X659,X655] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X656)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X655),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X657) = s(bool,X658) | s(bool,X658) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X655),s('type.integer.int',X656))))) | s(bool,X657) = s(bool,X659) | s(bool,'T_0') = s(bool,X659)) )),
  inference(subsumption_resolution,[],[f13165,f304])).
fof(f13165,plain,(
  ( ! [X656,X658,X657,X659,X655] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X656)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X655),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X657) = s(bool,X658) | s(bool,X658) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X655),s('type.integer.int',X656))))) | s(bool,X657) = s(bool,X659) | s(bool,'T_0') = s(bool,X659)) )),
  inference(superposition,[],[f396,f2129])).
fof(f16415,plain,(
  ( ! [X660,X662,X664,X661,X663] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X660)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X660),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X662) = s(bool,X663) | s(bool,X663) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X660),s('type.integer.int',X661))))) | s(bool,X662) = s(bool,X664) | s(bool,'T_0') = s(bool,X664)) )),
  inference(subsumption_resolution,[],[f13166,f304])).
fof(f13166,plain,(
  ( ! [X660,X662,X664,X661,X663] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X660)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X660),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X662) = s(bool,X663) | s(bool,X663) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X660),s('type.integer.int',X661))))) | s(bool,X662) = s(bool,X664) | s(bool,'T_0') = s(bool,X664)) )),
  inference(superposition,[],[f395,f2129])).
fof(f16417,plain,(
  ( ! [X677,X673,X675,X676,X678,X672,X674] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X673),s('type.integer.int',X675))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X673),s('type.integer.int',X674)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X672),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X676) = s(bool,X677) | s(bool,X677) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X672),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X673),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X674),s('type.integer.int',X675))))))))) | s(bool,X676) = s(bool,X678) | s(bool,'T_0') = s(bool,X678)) )),
  inference(subsumption_resolution,[],[f13168,f304])).
fof(f13168,plain,(
  ( ! [X677,X673,X675,X676,X678,X672,X674] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X673),s('type.integer.int',X675))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X673),s('type.integer.int',X674)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X672),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X676) = s(bool,X677) | s(bool,X677) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X672),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X673),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X674),s('type.integer.int',X675))))))))) | s(bool,X676) = s(bool,X678) | s(bool,'T_0') = s(bool,X678)) )),
  inference(superposition,[],[f1566,f2129])).
fof(f16419,plain,(
  ( ! [X689,X691,X687,X692,X688,X690,X686] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X686),s('type.integer.int',X688))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X686),s('type.integer.int',X687)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X689),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X690) = s(bool,X691) | s(bool,X691) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X686),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X687),s('type.integer.int',X688))))),s('type.integer.int',X689))))) | s(bool,X690) = s(bool,X692) | s(bool,'T_0') = s(bool,X692)) )),
  inference(subsumption_resolution,[],[f13170,f304])).
fof(f13170,plain,(
  ( ! [X689,X691,X687,X692,X688,X690,X686] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X686),s('type.integer.int',X688))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X686),s('type.integer.int',X687)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X689),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X690) = s(bool,X691) | s(bool,X691) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X686),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X687),s('type.integer.int',X688))))),s('type.integer.int',X689))))) | s(bool,X690) = s(bool,X692) | s(bool,'T_0') = s(bool,X692)) )),
  inference(superposition,[],[f1581,f2129])).
fof(f16420,plain,(
  ( ! [X712,X708,X710,X709,X711] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X709),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X709)))) | s(bool,X710) = s(bool,X711) | s(bool,X711) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X708),s('type.integer.int',X709))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X710) = s(bool,X712) | s(bool,'T_0') = s(bool,X712)) )),
  inference(subsumption_resolution,[],[f13175,f304])).
fof(f13175,plain,(
  ( ! [X712,X708,X710,X709,X711] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X709),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X709)))) | s(bool,X710) = s(bool,X711) | s(bool,X711) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X708),s('type.integer.int',X709))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X710) = s(bool,X712) | s(bool,'T_0') = s(bool,X712)) )),
  inference(superposition,[],[f404,f2129])).
fof(f16422,plain,(
  ( ! [X720,X722,X718,X721,X719] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X719),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X718),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X720) = s(bool,X721) | s(bool,X721) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X718),s('type.integer.int',X719))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X720) = s(bool,X722) | s(bool,'T_0') = s(bool,X722)) )),
  inference(subsumption_resolution,[],[f13177,f304])).
fof(f13177,plain,(
  ( ! [X720,X722,X718,X721,X719] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X719),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X718),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X720) = s(bool,X721) | s(bool,X721) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X718),s('type.integer.int',X719))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X720) = s(bool,X722) | s(bool,'T_0') = s(bool,X722)) )),
  inference(superposition,[],[f402,f2129])).
fof(f16423,plain,(
  ( ! [X724,X726,X725,X727,X723] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X723)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X723),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X725) = s(bool,X726) | s(bool,X726) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X723),s('type.integer.int',X724))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X725) = s(bool,X727) | s(bool,'T_0') = s(bool,X727)) )),
  inference(subsumption_resolution,[],[f13178,f304])).
fof(f13178,plain,(
  ( ! [X724,X726,X725,X727,X723] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X723)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X723),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X725) = s(bool,X726) | s(bool,X726) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X723),s('type.integer.int',X724))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X725) = s(bool,X727) | s(bool,'T_0') = s(bool,X727)) )),
  inference(superposition,[],[f401,f2129])).
fof(f5114,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X4)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(superposition,[],[f1469,f446])).
fof(f4173,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(X4,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(superposition,[],[f1447,f446])).
fof(f4137,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X4) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(superposition,[],[f1446,f446])).
fof(f4100,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X4) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(superposition,[],[f1445,f446])).
fof(f4063,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X4,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(superposition,[],[f1444,f446])).
fof(f1444,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X33),s('type.integer.int',X32)))))) | sP0(X34,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int',X33)))) )),
  inference(superposition,[],[f412,f445])).
fof(f1445,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X35),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X37),s('type.integer.int',X36)))))) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int',X37)),X38)) )),
  inference(superposition,[],[f413,f445])).
fof(f1446,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X39),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X41),s('type.integer.int',X40)))))) | p(s(bool,X42)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int',X41)),X42)) )),
  inference(superposition,[],[f428,f445])).
fof(f1447,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X44)))))) | p(s(bool,X46)) | sP1(X46,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X45)))) )),
  inference(superposition,[],[f431,f445])).
fof(f1448,plain,(
  ( ! [X47,X50,X48,X51,X49] : (~sP5(X50,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X47),s('type.integer.int',X48))),s('type.integer.int',X49)),X51) | ~p(s(bool,X50)) | p(s(bool,X51)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X49),s('type.integer.int',X48))))))) )),
  inference(superposition,[],[f457,f445])).
fof(f1449,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54)),X56,X55) | sP5(X55,X56,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54))) | ~sP4(X55,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54)),X56) | ~sP3(X56,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int',X54)),X55) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X54),s('type.integer.int',X53))))))) )),
  inference(superposition,[],[f458,f445])).
fof(f1450,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~sP4(X60,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X59)),X61) | ~p(s(bool,X60)) | p(s(bool,X61)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X58))))))) )),
  inference(superposition,[],[f461,f445])).
fof(f1451,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~sP3(X65,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int',X64)),X66) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X62),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X64),s('type.integer.int',X63))))))) )),
  inference(superposition,[],[f465,f445])).
fof(f1452,plain,(
  ( ! [X70,X68,X71,X69,X67] : (~sP6(X70,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X67),s('type.integer.int',X68))),s('type.integer.int',X69)),X71) | ~p(s(bool,X70)) | p(s(bool,X71)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X69),s('type.integer.int',X68))))))) )),
  inference(superposition,[],[f484,f445])).
fof(f1453,plain,(
  ( ! [X76,X74,X72,X75,X73] : (~sP7(X76,X75,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int',X74))) | ~p(s(bool,X75)) | p(s(bool,X76)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X72),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X74),s('type.integer.int',X73))))))) )),
  inference(superposition,[],[f493,f445])).
fof(f1454,plain,(
  ( ! [X80,X78,X81,X79,X77] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X78))),s('type.integer.int',X79)),X80,X81) | p(s(bool,X80)) | p(s(bool,X81)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X79),s('type.integer.int',X78))))))) )),
  inference(superposition,[],[f501,f445])).
fof(f1455,plain,(
  ( ! [X85,X83,X86,X84,X82] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X86,X85) | ~p(s(bool,X85)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X83))))))) )),
  inference(superposition,[],[f506,f445])).
fof(f1456,plain,(
  ( ! [X90,X88,X87,X91,X89] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X88))),s('type.integer.int',X89)),X90,X91) | ~p(s(bool,X90)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X87),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X89),s('type.integer.int',X88))))))) )),
  inference(superposition,[],[f507,f445])).
fof(f1457,plain,(
  ( ! [X94,X92,X95,X93,X96] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94)),X96,X95) | p(s(bool,X95)) | p(s(bool,X96)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X94),s('type.integer.int',X93))))))) )),
  inference(superposition,[],[f508,f445])).
fof(f1458,plain,(
  ( ! [X101,X99,X97,X100,X98] : (~sP10(X101,X100,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int',X99))) | p(s(bool,X100)) | ~p(s(bool,X101)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X98))))))) )),
  inference(superposition,[],[f518,f445])).
fof(f1459,plain,(
  ( ! [X103,X105,X102,X106,X104] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int',X104)),X106,X105) | p(s(bool,X105)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X103))))))) )),
  inference(superposition,[],[f523,f445])).
fof(f1460,plain,(
  ( ! [X111,X109,X107,X110,X108] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X108))),s('type.integer.int',X109)),X110,X111) | ~p(s(bool,X110)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X107),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X109),s('type.integer.int',X108))))))) )),
  inference(superposition,[],[f524,f445])).
fof(f1461,plain,(
  ( ! [X116,X114,X112,X115,X113] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X113))),s('type.integer.int',X114)),X116,X115) | ~p(s(bool,X115)) | p(s(bool,X116)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X114),s('type.integer.int',X113))))))) )),
  inference(superposition,[],[f525,f445])).
fof(f1462,plain,(
  ( ! [X121,X118,X120,X119,X117] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119)),X120,X121) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119)),X120,X121) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X117),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X119),s('type.integer.int',X118))))))) )),
  inference(superposition,[],[f528,f445])).
fof(f1463,plain,(
  ( ! [X125,X123,X126,X124,X122] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int',X124)),X125,X126) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int',X124)),X125,X126) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X123))))))) )),
  inference(superposition,[],[f529,f445])).
fof(f1464,plain,(
  ( ! [X127,X130,X128,X129] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X127),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X129),s('type.integer.int',X128)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X128))),s('type.integer.int',X129)))) )),
  inference(superposition,[],[f657,f445])).
fof(f1465,plain,(
  ( ! [X134,X132,X133,X131] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X131),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X133),s('type.integer.int',X132)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X131),s('type.integer.int',X132))),s('type.integer.int',X133)),X134)) )),
  inference(superposition,[],[f662,f445])).
fof(f1466,plain,(
  ( ! [X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X135),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X137),s('type.integer.int',X136)))))) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X135),s('type.integer.int',X136))),s('type.integer.int',X137)),X138)) )),
  inference(superposition,[],[f694,f445])).
fof(f2114,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X27) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X25))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))),s('type.integer.int',X26))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f752,f445])).
fof(f2141,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X20) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X17),s('type.integer.int',X18))),s('type.integer.int',X19))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X19),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f752,f445])).
fof(f4079,plain,(
  ( ! [X14,X12,X15,X13,X11] : (sP0(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12))) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f4067,f304])).
fof(f4067,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | sP0(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12))) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f1444,f752])).
fof(f4116,plain,(
  ( ! [X14,X12,X15,X13,X11] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12)),X14) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f4104,f304])).
fof(f4104,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12)),X14) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f1445,f752])).
fof(f4153,plain,(
  ( ! [X14,X12,X15,X13,X11] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12)),X14) | p(s(bool,X14)) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f4141,f304])).
fof(f4141,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12)),X14) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f1446,f752])).
fof(f4189,plain,(
  ( ! [X14,X12,X15,X13,X11] : (sP1(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12))) | p(s(bool,X14)) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f4177,f304])).
fof(f4177,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | sP1(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))),s('type.integer.int',X12))) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X12),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f1447,f752])).
fof(f4627,plain,(
  ( ! [X45,X43,X44] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X45))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X44)))))) )),
  inference(subsumption_resolution,[],[f4563,f304])).
fof(f4563,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int',X45))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X43),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X45),s('type.integer.int',X44)))))) )),
  inference(superposition,[],[f329,f1434])).
fof(f4629,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X60)) | s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X58))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X58)))))) )),
  inference(forward_demodulation,[],[f4628,f445])).
fof(f4628,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X60)) | s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X59))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X58)))))) )),
  inference(subsumption_resolution,[],[f4567,f304])).
fof(f4567,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X60)) | s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))),s('type.integer.int',X59))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X57),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X59),s('type.integer.int',X58)))))) )),
  inference(superposition,[],[f390,f1434])).
fof(f4630,plain,(
  ( ! [X61,X64,X62,X63] : (sP0(X64,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X62))),s('type.integer.int',X63))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X63),s('type.integer.int',X62)))))) )),
  inference(subsumption_resolution,[],[f4568,f304])).
fof(f4568,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'T_0')) | sP0(X64,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X62))),s('type.integer.int',X63))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X63),s('type.integer.int',X62)))))) )),
  inference(superposition,[],[f412,f1434])).
fof(f4631,plain,(
  ( ! [X68,X66,X67,X65] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67)),X68) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X66)))))) )),
  inference(subsumption_resolution,[],[f4569,f304])).
fof(f4569,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67)),X68) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X66)))))) )),
  inference(superposition,[],[f413,f1434])).
fof(f4632,plain,(
  ( ! [X70,X72,X71,X69] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))),s('type.integer.int',X71)),X72) | p(s(bool,X72)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X70)))))) )),
  inference(subsumption_resolution,[],[f4570,f304])).
fof(f4570,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'T_0')) | p(s(bool,X72)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))),s('type.integer.int',X71)),X72) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X71),s('type.integer.int',X70)))))) )),
  inference(superposition,[],[f428,f1434])).
fof(f4633,plain,(
  ( ! [X76,X74,X75,X73] : (sP1(X76,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int',X75))) | p(s(bool,X76)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X75),s('type.integer.int',X74)))))) )),
  inference(subsumption_resolution,[],[f4571,f304])).
fof(f4571,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | sP1(X76,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int',X75))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X75),s('type.integer.int',X74)))))) )),
  inference(superposition,[],[f431,f1434])).
fof(f4634,plain,(
  ( ! [X80,X78,X81,X79,X77] : (~sP5(X80,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X78))),s('type.integer.int',X79)),X81) | p(s(bool,X81)) | ~p(s(bool,X80)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) )),
  inference(subsumption_resolution,[],[f4572,f304])).
fof(f4572,plain,(
  ( ! [X80,X78,X81,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,X80)) | p(s(bool,X81)) | ~sP5(X80,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X78))),s('type.integer.int',X79)),X81) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X77),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) )),
  inference(superposition,[],[f457,f1434])).
fof(f4635,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X86,X85) | ~sP4(X85,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X86) | ~sP3(X86,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X85) | sP5(X85,X86,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) )),
  inference(subsumption_resolution,[],[f4573,f304])).
fof(f4573,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~p(s(bool,'T_0')) | sP5(X85,X86,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84))) | ~sP4(X85,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X86) | ~sP3(X86,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X85) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int',X84)),X86,X85) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) )),
  inference(superposition,[],[f458,f1434])).
fof(f4636,plain,(
  ( ! [X90,X88,X87,X91,X89] : (~sP4(X90,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X88))),s('type.integer.int',X89)),X91) | p(s(bool,X91)) | ~p(s(bool,X90)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X87),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X89),s('type.integer.int',X88)))))) )),
  inference(subsumption_resolution,[],[f4574,f304])).
fof(f4574,plain,(
  ( ! [X90,X88,X87,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X90)) | p(s(bool,X91)) | ~sP4(X90,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X88))),s('type.integer.int',X89)),X91) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X87),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X89),s('type.integer.int',X88)))))) )),
  inference(superposition,[],[f461,f1434])).
fof(f4637,plain,(
  ( ! [X94,X92,X95,X93,X96] : (~sP3(X95,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94)),X96) | p(s(bool,X96)) | ~p(s(bool,X95)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X94),s('type.integer.int',X93)))))) )),
  inference(subsumption_resolution,[],[f4575,f304])).
fof(f4575,plain,(
  ( ! [X94,X92,X95,X93,X96] : (~p(s(bool,'T_0')) | ~p(s(bool,X95)) | p(s(bool,X96)) | ~sP3(X95,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94)),X96) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X94),s('type.integer.int',X93)))))) )),
  inference(superposition,[],[f465,f1434])).
fof(f4638,plain,(
  ( ! [X101,X99,X97,X100,X98] : (~sP6(X100,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int',X99)),X101) | p(s(bool,X101)) | ~p(s(bool,X100)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X98)))))) )),
  inference(subsumption_resolution,[],[f4576,f304])).
fof(f4576,plain,(
  ( ! [X101,X99,X97,X100,X98] : (~p(s(bool,'T_0')) | ~p(s(bool,X100)) | p(s(bool,X101)) | ~sP6(X100,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int',X99)),X101) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X99),s('type.integer.int',X98)))))) )),
  inference(superposition,[],[f484,f1434])).
fof(f4639,plain,(
  ( ! [X103,X105,X102,X106,X104] : (~sP7(X106,X105,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int',X104))) | p(s(bool,X106)) | ~p(s(bool,X105)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X103)))))) )),
  inference(subsumption_resolution,[],[f4577,f304])).
fof(f4577,plain,(
  ( ! [X103,X105,X102,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X105)) | p(s(bool,X106)) | ~sP7(X106,X105,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int',X104))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X102),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X104),s('type.integer.int',X103)))))) )),
  inference(superposition,[],[f493,f1434])).
fof(f4640,plain,(
  ( ! [X111,X109,X107,X110,X108] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X108))),s('type.integer.int',X109)),X110,X111) | p(s(bool,X111)) | p(s(bool,X110)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X107),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X109),s('type.integer.int',X108)))))) )),
  inference(subsumption_resolution,[],[f4578,f304])).
fof(f4578,plain,(
  ( ! [X111,X109,X107,X110,X108] : (~p(s(bool,'T_0')) | p(s(bool,X110)) | p(s(bool,X111)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X108))),s('type.integer.int',X109)),X110,X111) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X107),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X109),s('type.integer.int',X108)))))) )),
  inference(superposition,[],[f501,f1434])).
fof(f4641,plain,(
  ( ! [X116,X114,X112,X115,X113] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X113))),s('type.integer.int',X114)),X116,X115) | ~p(s(bool,X115)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X114),s('type.integer.int',X113)))))) )),
  inference(subsumption_resolution,[],[f4579,f304])).
fof(f4579,plain,(
  ( ! [X116,X114,X112,X115,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X115)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X113))),s('type.integer.int',X114)),X116,X115) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X114),s('type.integer.int',X113)))))) )),
  inference(superposition,[],[f506,f1434])).
fof(f4642,plain,(
  ( ! [X121,X118,X120,X119,X117] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119)),X120,X121) | ~p(s(bool,X120)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X117),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X119),s('type.integer.int',X118)))))) )),
  inference(subsumption_resolution,[],[f4580,f304])).
fof(f4580,plain,(
  ( ! [X121,X118,X120,X119,X117] : (~p(s(bool,'T_0')) | ~p(s(bool,X120)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int',X119)),X120,X121) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X117),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X119),s('type.integer.int',X118)))))) )),
  inference(superposition,[],[f507,f1434])).
fof(f4643,plain,(
  ( ! [X125,X123,X126,X124,X122] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int',X124)),X126,X125) | p(s(bool,X126)) | p(s(bool,X125)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X123)))))) )),
  inference(subsumption_resolution,[],[f4581,f304])).
fof(f4581,plain,(
  ( ! [X125,X123,X126,X124,X122] : (~p(s(bool,'T_0')) | p(s(bool,X125)) | p(s(bool,X126)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int',X124)),X126,X125) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X122),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X124),s('type.integer.int',X123)))))) )),
  inference(superposition,[],[f508,f1434])).
fof(f4644,plain,(
  ( ! [X127,X130,X128,X131,X129] : (~sP10(X131,X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X128))),s('type.integer.int',X129))) | ~p(s(bool,X131)) | p(s(bool,X130)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X127),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X129),s('type.integer.int',X128)))))) )),
  inference(subsumption_resolution,[],[f4582,f304])).
fof(f4582,plain,(
  ( ! [X127,X130,X128,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X130)) | ~p(s(bool,X131)) | ~sP10(X131,X130,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X128))),s('type.integer.int',X129))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X127),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X129),s('type.integer.int',X128)))))) )),
  inference(superposition,[],[f518,f1434])).
fof(f4645,plain,(
  ( ! [X134,X132,X136,X135,X133] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X132),s('type.integer.int',X133))),s('type.integer.int',X134)),X136,X135) | p(s(bool,X135)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X132),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X134),s('type.integer.int',X133)))))) )),
  inference(subsumption_resolution,[],[f4583,f304])).
fof(f4583,plain,(
  ( ! [X134,X132,X136,X135,X133] : (~p(s(bool,'T_0')) | p(s(bool,X135)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X132),s('type.integer.int',X133))),s('type.integer.int',X134)),X136,X135) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X132),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X134),s('type.integer.int',X133)))))) )),
  inference(superposition,[],[f523,f1434])).
fof(f4646,plain,(
  ( ! [X140,X138,X141,X139,X137] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int',X139)),X140,X141) | ~p(s(bool,X140)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X137),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X139),s('type.integer.int',X138)))))) )),
  inference(subsumption_resolution,[],[f4584,f304])).
fof(f4584,plain,(
  ( ! [X140,X138,X141,X139,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,X140)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int',X139)),X140,X141) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X137),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X139),s('type.integer.int',X138)))))) )),
  inference(superposition,[],[f524,f1434])).
fof(f4647,plain,(
  ( ! [X146,X144,X142,X145,X143] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int',X144)),X146,X145) | p(s(bool,X146)) | ~p(s(bool,X145)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X142),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X144),s('type.integer.int',X143)))))) )),
  inference(subsumption_resolution,[],[f4585,f304])).
fof(f4585,plain,(
  ( ! [X146,X144,X142,X145,X143] : (~p(s(bool,'T_0')) | ~p(s(bool,X145)) | p(s(bool,X146)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int',X144)),X146,X145) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X142),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X144),s('type.integer.int',X143)))))) )),
  inference(superposition,[],[f525,f1434])).
fof(f4648,plain,(
  ( ! [X151,X149,X147,X150,X148] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X148))),s('type.integer.int',X149)),X150,X151) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X148))),s('type.integer.int',X149)),X150,X151) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X149),s('type.integer.int',X148)))))) )),
  inference(subsumption_resolution,[],[f4586,f304])).
fof(f4586,plain,(
  ( ! [X151,X149,X147,X150,X148] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X148))),s('type.integer.int',X149)),X150,X151) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X148))),s('type.integer.int',X149)),X150,X151) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X149),s('type.integer.int',X148)))))) )),
  inference(superposition,[],[f528,f1434])).
fof(f4649,plain,(
  ( ! [X156,X154,X152,X155,X153] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int',X154)),X155,X156) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int',X154)),X155,X156) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X152),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X154),s('type.integer.int',X153)))))) )),
  inference(subsumption_resolution,[],[f4587,f304])).
fof(f4587,plain,(
  ( ! [X156,X154,X152,X155,X153] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int',X154)),X155,X156) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int',X154)),X155,X156) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X152),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X154),s('type.integer.int',X153)))))) )),
  inference(superposition,[],[f529,f1434])).
fof(f4650,plain,(
  ( ! [X158,X159,X157,X160] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X160,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X157),s('type.integer.int',X158))),s('type.integer.int',X159))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X157),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X159),s('type.integer.int',X158)))))) )),
  inference(subsumption_resolution,[],[f4588,f304])).
fof(f4588,plain,(
  ( ! [X158,X159,X157,X160] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X160,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X157),s('type.integer.int',X158))),s('type.integer.int',X159))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X157),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X159),s('type.integer.int',X158)))))) )),
  inference(superposition,[],[f657,f1434])).
fof(f4651,plain,(
  ( ! [X163,X161,X164,X162] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X161),s('type.integer.int',X162))),s('type.integer.int',X163)),X164) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X161),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X163),s('type.integer.int',X162)))))) )),
  inference(subsumption_resolution,[],[f4589,f304])).
fof(f4589,plain,(
  ( ! [X163,X161,X164,X162] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X161),s('type.integer.int',X162))),s('type.integer.int',X163)),X164) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X161),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X163),s('type.integer.int',X162)))))) )),
  inference(superposition,[],[f662,f1434])).
fof(f4652,plain,(
  ( ! [X167,X165,X166,X168] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X168) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X165),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X167),s('type.integer.int',X166)))))) )),
  inference(subsumption_resolution,[],[f4590,f304])).
fof(f4590,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167)),X168) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X165),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X167),s('type.integer.int',X166)))))) )),
  inference(superposition,[],[f694,f1434])).
fof(f7041,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int',X43))))) | s(bool,X45) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X42),s('type.integer.int',X43))),s('type.integer.int',X44))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2640,f445])).
fof(f7119,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X66)))))) | sP1(X68,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67))) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f2644,f445])).
fof(f7188,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X65),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X67),s('type.integer.int',X66)))))) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))),s('type.integer.int',X67)),X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f2645,f445])).
fof(f8283,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X67) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X64),s('type.integer.int',X65))),s('type.integer.int',X66))) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X64),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X66),s('type.integer.int',X65)))))) )),
  inference(subsumption_resolution,[],[f8217,f304])).
fof(f8217,plain,(
  ( ! [X68,X66,X64,X67,X65] : (~p(s(bool,'T_0')) | s(bool,X67) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X64),s('type.integer.int',X65))),s('type.integer.int',X66))) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X64),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X66),s('type.integer.int',X65)))))) )),
  inference(superposition,[],[f2641,f1434])).
fof(f8484,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) | p(s(bool,X92)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X90))),s('type.integer.int',X91)),X93,X92) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f2646,f445])).
fof(f8528,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (p(s(bool,X86)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int',X85)),X87,X86) | s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X83),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X85),s('type.integer.int',X84)))))) )),
  inference(subsumption_resolution,[],[f8483,f304])).
fof(f8483,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int',X85)),X87,X86) | s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X83),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X85),s('type.integer.int',X84)))))) )),
  inference(superposition,[],[f2646,f1434])).
fof(f9817,plain,(
  ( ! [X94,X92,X97,X95,X93,X96] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X94),s('type.integer.int',X93)))))) | p(s(bool,X95)) | ~sP11(X96,X95,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int',X94))) | s(bool,X96) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f2659,f445])).
fof(f9854,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (p(s(bool,X89)) | ~sP11(X90,X89,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X87))),s('type.integer.int',X88))) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X88),s('type.integer.int',X87)))))) )),
  inference(subsumption_resolution,[],[f9816,f304])).
fof(f9816,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (~p(s(bool,'T_0')) | p(s(bool,X89)) | ~sP11(X90,X89,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X87))),s('type.integer.int',X88))) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X88),s('type.integer.int',X87)))))) )),
  inference(superposition,[],[f2659,f1434])).
fof(f11913,plain,(
  ( ! [X167,X165,X169,X166,X170,X168] : (s(bool,X168) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X165),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X167),s('type.integer.int',X166))))) | s(bool,X168) = s(bool,X169) | s(bool,'T_0') = s(bool,X169) | s(bool,X170) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167))) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f2129,f445])).
fof(f11987,plain,(
  ( ! [X167,X165,X169,X166,X170,X168] : (s(bool,X168) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X165),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X167),s('type.integer.int',X166))))) | s(bool,X169) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X165),s('type.integer.int',X166))),s('type.integer.int',X167))) | s(bool,'T_0') = s(bool,X168) | s(bool,X169) = s(bool,X170) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f2129,f445])).
fof(f12024,plain,(
  ( ! [X158,X156,X154,X157,X155,X153] : (s(bool,X156) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X153),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X155),s('type.integer.int',X154))))) | s(bool,X156) = s(bool,X157) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X153),s('type.integer.int',X154))),s('type.integer.int',X155))) | s(bool,X157) = s(bool,X158) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f2129,f445])).
fof(f12065,plain,(
  ( ! [X118,X116,X114,X117,X115,X113] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X113),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X115),s('type.integer.int',X114))))) | s(bool,X116) = s(bool,X117) | s(bool,X117) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int',X115))) | s(bool,X116) = s(bool,X118) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f2129,f445])).
fof(f16404,plain,(
  ( ! [X592,X594,X588,X590,X593,X589,X591] : (p(s(bool,X591)) | sP1(X591,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X588),s('type.integer.int',X590))),s('type.integer.int',X589))) | s(bool,X592) = s(bool,X593) | s(bool,X593) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X588),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X589),s('type.integer.int',X590))))) | s(bool,X592) = s(bool,X594) | s(bool,'T_0') = s(bool,X594)) )),
  inference(subsumption_resolution,[],[f13153,f304])).
fof(f13153,plain,(
  ( ! [X592,X594,X588,X590,X593,X589,X591] : (~p(s(bool,'T_0')) | p(s(bool,X591)) | sP1(X591,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X588),s('type.integer.int',X590))),s('type.integer.int',X589))) | s(bool,X592) = s(bool,X593) | s(bool,X593) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X588),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X589),s('type.integer.int',X590))))) | s(bool,X592) = s(bool,X594) | s(bool,'T_0') = s(bool,X594)) )),
  inference(superposition,[],[f1447,f2129])).
fof(f16405,plain,(
  ( ! [X600,X596,X598,X601,X597,X599,X595] : (p(s(bool,X598)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X595),s('type.integer.int',X597))),s('type.integer.int',X596)),X598) | s(bool,X599) = s(bool,X600) | s(bool,X600) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X595),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X596),s('type.integer.int',X597))))) | s(bool,X599) = s(bool,X601) | s(bool,'T_0') = s(bool,X601)) )),
  inference(subsumption_resolution,[],[f13154,f304])).
fof(f13154,plain,(
  ( ! [X600,X596,X598,X601,X597,X599,X595] : (~p(s(bool,'T_0')) | p(s(bool,X598)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X595),s('type.integer.int',X597))),s('type.integer.int',X596)),X598) | s(bool,X599) = s(bool,X600) | s(bool,X600) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X595),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X596),s('type.integer.int',X597))))) | s(bool,X599) = s(bool,X601) | s(bool,'T_0') = s(bool,X601)) )),
  inference(superposition,[],[f1446,f2129])).
fof(f16406,plain,(
  ( ! [X606,X602,X605,X607,X603,X608,X604] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X602),s('type.integer.int',X604))),s('type.integer.int',X603)),X605) | s(bool,X606) = s(bool,X607) | s(bool,X607) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X602),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X603),s('type.integer.int',X604))))) | s(bool,X606) = s(bool,X608) | s(bool,'T_0') = s(bool,X608)) )),
  inference(subsumption_resolution,[],[f13155,f304])).
fof(f13155,plain,(
  ( ! [X606,X602,X605,X607,X603,X608,X604] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X602),s('type.integer.int',X604))),s('type.integer.int',X603)),X605) | s(bool,X606) = s(bool,X607) | s(bool,X607) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X602),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X603),s('type.integer.int',X604))))) | s(bool,X606) = s(bool,X608) | s(bool,'T_0') = s(bool,X608)) )),
  inference(superposition,[],[f1445,f2129])).
fof(f16407,plain,(
  ( ! [X613,X615,X609,X611,X612,X614,X610] : (sP0(X612,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X609),s('type.integer.int',X611))),s('type.integer.int',X610))) | s(bool,X613) = s(bool,X614) | s(bool,X614) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X609),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X610),s('type.integer.int',X611))))) | s(bool,X613) = s(bool,X615) | s(bool,'T_0') = s(bool,X615)) )),
  inference(subsumption_resolution,[],[f13156,f304])).
fof(f13156,plain,(
  ( ! [X613,X615,X609,X611,X612,X614,X610] : (~p(s(bool,'T_0')) | sP0(X612,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X609),s('type.integer.int',X611))),s('type.integer.int',X610))) | s(bool,X613) = s(bool,X614) | s(bool,X614) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X609),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X610),s('type.integer.int',X611))))) | s(bool,X613) = s(bool,X615) | s(bool,'T_0') = s(bool,X615)) )),
  inference(superposition,[],[f1444,f2129])).
fof(f5262,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))))) )),
  inference(superposition,[],[f1634,f445])).
fof(f5271,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))))) )),
  inference(subsumption_resolution,[],[f5261,f304])).
fof(f5261,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))))) )),
  inference(superposition,[],[f1634,f1434])).
fof(f6259,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1717,f445])).
fof(f6268,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(subsumption_resolution,[],[f6258,f304])).
fof(f6258,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f1717,f1434])).
fof(f6282,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1734,f445])).
fof(f6291,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(subsumption_resolution,[],[f6281,f304])).
fof(f6281,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f1734,f1434])).
fof(f4066,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) | sP0(X10,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X9))),s('type.integer.int',X8)))) )),
  inference(superposition,[],[f1444,f445])).
fof(f4103,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X9))),s('type.integer.int',X8)),X10)) )),
  inference(superposition,[],[f1445,f445])).
fof(f4140,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) | p(s(bool,X10)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X9))),s('type.integer.int',X8)),X10)) )),
  inference(superposition,[],[f1446,f445])).
fof(f4176,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X7)))))) | p(s(bool,X10)) | sP1(X10,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X9))),s('type.integer.int',X8)))) )),
  inference(superposition,[],[f1447,f445])).
fof(f4622,plain,(
  ( ! [X14,X17,X15,X18,X16] : (sP1(X18,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X17))),s('type.integer.int',X16))) | p(s(bool,X18)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X16),s('type.integer.int',X17))),s('type.integer.int',X15)))))) )),
  inference(subsumption_resolution,[],[f4556,f304])).
fof(f4556,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | sP1(X18,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))),s('type.integer.int',X17))),s('type.integer.int',X16))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X16),s('type.integer.int',X17))),s('type.integer.int',X15)))))) )),
  inference(superposition,[],[f1447,f1434])).
fof(f4623,plain,(
  ( ! [X23,X21,X19,X22,X20] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int',X22))),s('type.integer.int',X21)),X23) | p(s(bool,X23)) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X21),s('type.integer.int',X22))),s('type.integer.int',X20)))))) )),
  inference(subsumption_resolution,[],[f4557,f304])).
fof(f4557,plain,(
  ( ! [X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))),s('type.integer.int',X22))),s('type.integer.int',X21)),X23) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X21),s('type.integer.int',X22))),s('type.integer.int',X20)))))) )),
  inference(superposition,[],[f1446,f1434])).
fof(f4624,plain,(
  ( ! [X28,X26,X24,X27,X25] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))),s('type.integer.int',X27))),s('type.integer.int',X26)),X28) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X27))),s('type.integer.int',X25)))))) )),
  inference(subsumption_resolution,[],[f4558,f304])).
fof(f4558,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))),s('type.integer.int',X27))),s('type.integer.int',X26)),X28) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X26),s('type.integer.int',X27))),s('type.integer.int',X25)))))) )),
  inference(superposition,[],[f1445,f1434])).
fof(f4625,plain,(
  ( ! [X30,X33,X31,X29,X32] : (sP0(X33,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X30))),s('type.integer.int',X32))),s('type.integer.int',X31))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int',X30)))))) )),
  inference(subsumption_resolution,[],[f4559,f304])).
fof(f4559,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,'T_0')) | sP0(X33,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X30))),s('type.integer.int',X32))),s('type.integer.int',X31))) | s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int',X30)))))) )),
  inference(superposition,[],[f1444,f1434])).
fof(f403,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f1695,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) )),
  inference(forward_demodulation,[],[f1690,f1432])).
fof(f1690,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) )),
  inference(superposition,[],[f403,f446])).
fof(f1697,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) )),
  inference(forward_demodulation,[],[f1692,f1432])).
fof(f1692,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))))))) )),
  inference(superposition,[],[f403,f446])).
fof(f2673,plain,(
  ( ! [X146,X144,X145] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X145)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int',X145)))))) | s(bool,X146) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X144))) | s(bool,'T_0') = s(bool,X146)) )),
  inference(subsumption_resolution,[],[f2355,f304])).
fof(f2355,plain,(
  ( ! [X146,X144,X145] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X145)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X144),s('type.integer.int',X145)))))) | s(bool,X146) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X144))) | s(bool,'T_0') = s(bool,X146)) )),
  inference(superposition,[],[f399,f752])).
fof(f2675,plain,(
  ( ! [X154,X152,X153] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X152)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X153)))) | s(bool,X154) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X154)) )),
  inference(subsumption_resolution,[],[f2359,f304])).
fof(f2359,plain,(
  ( ! [X154,X152,X153] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X152)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X153)))) | s(bool,X154) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X152),s('type.integer.int',X153))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f403,f752])).
fof(f3907,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f3900,f304])).
fof(f3900,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f1416,f752])).
fof(f5478,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X4))))) )),
  inference(superposition,[],[f1695,f446])).
fof(f5498,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5482,f304])).
fof(f5482,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1695,f752])).
fof(f5531,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))))) )),
  inference(superposition,[],[f1697,f446])).
fof(f5549,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X4)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5533,f304])).
fof(f5533,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X4)))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1697,f752])).
fof(f5885,plain,(
  ( ! [X4,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))))) | s(bool,X4) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5875,f304])).
fof(f5875,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))))) | s(bool,X4) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1621,f752])).
fof(f11159,plain,(
  ( ! [X2] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X2))))))) )),
  inference(subsumption_resolution,[],[f11079,f304])).
fof(f11079,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X2))))))) )),
  inference(superposition,[],[f399,f5893])).
fof(f11160,plain,(
  ( ! [X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))))) )),
  inference(subsumption_resolution,[],[f11080,f304])).
fof(f11080,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int',X3)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))))) )),
  inference(superposition,[],[f447,f5893])).
fof(f16408,plain,(
  ( ! [X629,X627,X628,X626] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X626)))))) | s(bool,X627) = s(bool,X628) | s(bool,X628) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X626))) | s(bool,X627) = s(bool,X629) | s(bool,'T_0') = s(bool,X629)) )),
  inference(subsumption_resolution,[],[f13159,f304])).
fof(f13159,plain,(
  ( ! [X629,X627,X628,X626] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',X626)))))) | s(bool,X627) = s(bool,X628) | s(bool,X628) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X626))) | s(bool,X627) = s(bool,X629) | s(bool,'T_0') = s(bool,X629)) )),
  inference(superposition,[],[f1621,f2129])).
fof(f16411,plain,(
  ( ! [X644,X640,X642,X641,X643] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X641)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X640),s('type.integer.int',X641)))))) | s(bool,X642) = s(bool,X643) | s(bool,X643) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X640))) | s(bool,X642) = s(bool,X644) | s(bool,'T_0') = s(bool,X644)) )),
  inference(subsumption_resolution,[],[f13162,f304])).
fof(f13162,plain,(
  ( ! [X644,X640,X642,X641,X643] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X641)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X640),s('type.integer.int',X641)))))) | s(bool,X642) = s(bool,X643) | s(bool,X643) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X640))) | s(bool,X642) = s(bool,X644) | s(bool,'T_0') = s(bool,X644)) )),
  inference(superposition,[],[f399,f2129])).
fof(f16421,plain,(
  ( ! [X716,X714,X717,X713,X715] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X713)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X714)))) | s(bool,X715) = s(bool,X716) | s(bool,X716) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X713),s('type.integer.int',X714))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X715) = s(bool,X717) | s(bool,'T_0') = s(bool,X717)) )),
  inference(subsumption_resolution,[],[f13176,f304])).
fof(f13176,plain,(
  ( ! [X716,X714,X717,X713,X715] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X713)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X714)))) | s(bool,X715) = s(bool,X716) | s(bool,X716) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X713),s('type.integer.int',X714))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X715) = s(bool,X717) | s(bool,'T_0') = s(bool,X717)) )),
  inference(superposition,[],[f403,f2129])).
fof(f16425,plain,(
  ( ! [X736,X738,X741,X737,X739,X735,X740] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X736),s('type.integer.int',X738))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X736),s('type.integer.int',X737)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X735)))) | s(bool,X739) = s(bool,X740) | s(bool,X740) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X735),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X736),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X737),s('type.integer.int',X738))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X739) = s(bool,X741) | s(bool,'T_0') = s(bool,X741)) )),
  inference(subsumption_resolution,[],[f13180,f304])).
fof(f13180,plain,(
  ( ! [X736,X738,X741,X737,X739,X735,X740] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X736),s('type.integer.int',X738))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X736),s('type.integer.int',X737)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X735)))) | s(bool,X739) = s(bool,X740) | s(bool,X740) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X735),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X736),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X737),s('type.integer.int',X738))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X739) = s(bool,X741) | s(bool,'T_0') = s(bool,X741)) )),
  inference(superposition,[],[f1697,f2129])).
fof(f16427,plain,(
  ( ! [X753,X755,X749,X751,X752,X754,X750] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X749),s('type.integer.int',X751))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X749),s('type.integer.int',X750)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X752)))) | s(bool,X753) = s(bool,X754) | s(bool,X754) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X749),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X750),s('type.integer.int',X751))))),s('type.integer.int',X752))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X753) = s(bool,X755) | s(bool,'T_0') = s(bool,X755)) )),
  inference(subsumption_resolution,[],[f13182,f304])).
fof(f13182,plain,(
  ( ! [X753,X755,X749,X751,X752,X754,X750] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X749),s('type.integer.int',X751))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X749),s('type.integer.int',X750)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X752)))) | s(bool,X753) = s(bool,X754) | s(bool,X754) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X749),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X750),s('type.integer.int',X751))))),s('type.integer.int',X752))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X753) = s(bool,X755) | s(bool,'T_0') = s(bool,X755)) )),
  inference(superposition,[],[f1695,f2129])).
fof(f16428,plain,(
  ( ! [X765,X767,X766,X768] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X765)))) | s(bool,X766) = s(bool,X767) | s(bool,X767) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int',X765))) | s(bool,X766) = s(bool,X768) | s(bool,'T_0') = s(bool,X768)) )),
  inference(subsumption_resolution,[],[f13184,f304])).
fof(f13184,plain,(
  ( ! [X765,X767,X766,X768] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X765)))) | s(bool,X766) = s(bool,X767) | s(bool,X767) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int',X765))) | s(bool,X766) = s(bool,X768) | s(bool,'T_0') = s(bool,X768)) )),
  inference(superposition,[],[f1416,f2129])).
fof(f16416,plain,(
  ( ! [X666,X668,X670,X667,X669,X671,X665] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int',X668))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int',X667)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X667),s('type.integer.int',X668))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X669) = s(bool,X670) | s(bool,X670) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X665),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X667),s('type.integer.int',X668))))))))) | s(bool,X669) = s(bool,X671) | s(bool,'T_0') = s(bool,X671)) )),
  inference(subsumption_resolution,[],[f13167,f304])).
fof(f13167,plain,(
  ( ! [X666,X668,X670,X667,X669,X671,X665] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int',X668))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int',X667)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X667),s('type.integer.int',X668))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X669) = s(bool,X670) | s(bool,X670) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X665),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X666),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X667),s('type.integer.int',X668))))))))) | s(bool,X669) = s(bool,X671) | s(bool,'T_0') = s(bool,X671)) )),
  inference(superposition,[],[f1606,f2129])).
fof(f5670,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5649,f304])).
fof(f5649,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1606,f752])).
fof(f1606,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1605,f446])).
fof(f1605,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1600,f1432])).
fof(f1600,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f398,f446])).
fof(f5668,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))) )),
  inference(forward_demodulation,[],[f5647,f446])).
fof(f5647,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1606,f446])).
fof(f5881,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))))) )),
  inference(forward_demodulation,[],[f5870,f3987])).
fof(f5870,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))))))))) )),
  inference(superposition,[],[f1621,f446])).
fof(f3987,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f1432,f446])).
fof(f16418,plain,(
  ( ! [X685,X681,X683,X679,X684,X680,X682] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int',X681))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int',X680)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X680),s('type.integer.int',X681))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X683) = s(bool,X684) | s(bool,X684) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X680),s('type.integer.int',X681))))),s('type.integer.int',X682))))) | s(bool,X683) = s(bool,X685) | s(bool,'T_0') = s(bool,X685)) )),
  inference(subsumption_resolution,[],[f13169,f304])).
fof(f13169,plain,(
  ( ! [X685,X681,X683,X679,X684,X680,X682] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int',X681))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int',X680)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X680),s('type.integer.int',X681))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X683) = s(bool,X684) | s(bool,X684) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X679),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X680),s('type.integer.int',X681))))),s('type.integer.int',X682))))) | s(bool,X683) = s(bool,X685) | s(bool,'T_0') = s(bool,X685)) )),
  inference(superposition,[],[f1544,f2129])).
fof(f5611,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5590,f304])).
fof(f5590,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1544,f752])).
fof(f1544,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1543,f446])).
fof(f1543,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1536,f1432])).
fof(f1536,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f395,f446])).
fof(f5609,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int',X4)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))) )),
  inference(forward_demodulation,[],[f5586,f446])).
fof(f5586,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int',X4)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1544,f446])).
fof(f5888,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))))))),
  inference(unit_resulting_resolution,[],[f5882,f5882,f399])).
fof(f5886,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))))))),
  inference(unit_resulting_resolution,[],[f5882,f1621])).
fof(f1710,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))) )),
  inference(forward_demodulation,[],[f1709,f1432])).
fof(f1709,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))))))) )),
  inference(forward_demodulation,[],[f1704,f446])).
fof(f1704,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))))))) )),
  inference(superposition,[],[f404,f446])).
fof(f5719,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))) )),
  inference(forward_demodulation,[],[f5696,f446])).
fof(f5696,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1657,f446])).
fof(f5770,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))) )),
  inference(forward_demodulation,[],[f5749,f446])).
fof(f5749,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))) )),
  inference(superposition,[],[f1710,f446])).
fof(f5772,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5751,f304])).
fof(f5751,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int',X6)))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1710,f752])).
fof(f16424,plain,(
  ( ! [X732,X734,X728,X730,X733,X729,X731] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X730),s('type.integer.int',X731))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int',X731))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int',X730)))))) | s(bool,X732) = s(bool,X733) | s(bool,X733) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X728),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X730),s('type.integer.int',X731))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X732) = s(bool,X734) | s(bool,'T_0') = s(bool,X734)) )),
  inference(subsumption_resolution,[],[f13179,f304])).
fof(f13179,plain,(
  ( ! [X732,X734,X728,X730,X733,X729,X731] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X730),s('type.integer.int',X731))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int',X731))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int',X730)))))) | s(bool,X732) = s(bool,X733) | s(bool,X733) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X728),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X729),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X730),s('type.integer.int',X731))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X732) = s(bool,X734) | s(bool,'T_0') = s(bool,X734)) )),
  inference(superposition,[],[f1710,f2129])).
fof(f1657,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1656,f446])).
fof(f1656,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1649,f1432])).
fof(f1649,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f401,f446])).
fof(f5721,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5700,f304])).
fof(f5700,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X8) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1657,f752])).
fof(f16426,plain,(
  ( ! [X745,X747,X743,X748,X744,X746,X742] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int',X744))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int',X743)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X743),s('type.integer.int',X744))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X746) = s(bool,X747) | s(bool,X747) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X743),s('type.integer.int',X744))))),s('type.integer.int',X745))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X746) = s(bool,X748) | s(bool,'T_0') = s(bool,X748)) )),
  inference(subsumption_resolution,[],[f13181,f304])).
fof(f13181,plain,(
  ( ! [X745,X747,X743,X748,X744,X746,X742] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int',X744))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int',X743)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X743),s('type.integer.int',X744))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X746) = s(bool,X747) | s(bool,X747) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X742),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X743),s('type.integer.int',X744))))),s('type.integer.int',X745))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X746) = s(bool,X748) | s(bool,'T_0') = s(bool,X748)) )),
  inference(superposition,[],[f1657,f2129])).
fof(f5496,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X8))))))) )),
  inference(forward_demodulation,[],[f5480,f1432])).
fof(f5480,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X8),s('type.integer.int',X9))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X5),s('type.integer.int',X6))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X8)))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int',X6))))))))) )),
  inference(superposition,[],[f1695,f446])).
fof(f3906,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))))) )),
  inference(forward_demodulation,[],[f3898,f1432])).
fof(f3898,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))))))) )),
  inference(superposition,[],[f1416,f446])).
fof(f9978,plain,(
  ( ! [X2,X0,X3,X1] : (sP0(X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4005,f446])).
fof(f10019,plain,(
  ( ! [X2,X0,X3,X1] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4006,f446])).
fof(f10886,plain,(
  ( ! [X2,X0,X3,X1] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3) | p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4007,f446])).
fof(f10983,plain,(
  ( ! [X2,X0,X3,X1] : (sP1(X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4008,f446])).
fof(f11041,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | ~p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4016,f446])).
fof(f11192,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | ~p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4017,f446])).
fof(f11227,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | p(s(bool,X4)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4020,f446])).
fof(f11258,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),X3,X4) | ~p(s(bool,X3)) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f4021,f446])).
fof(f16429,plain,(
  ( ! [X777,X775,X776,X774] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X774)))) | s(bool,X775) = s(bool,X776) | s(bool,X776) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X774))) | s(bool,X775) = s(bool,X777) | s(bool,'T_0') = s(bool,X777)) ) | $spl3),
  inference(subsumption_resolution,[],[f13186,f304])).
fof(f13186,plain,(
  ( ! [X777,X775,X776,X774] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X774)))) | s(bool,X775) = s(bool,X776) | s(bool,X776) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X774))) | s(bool,X775) = s(bool,X777) | s(bool,'T_0') = s(bool,X777)) ) | $spl3),
  inference(superposition,[],[f1417,f2129])).
fof(f16340,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X1))) | s(bool,X2) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X1))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl3),
  inference(condensation,[],[f16339])).
fof(f16339,plain,(
  ( ! [X798,X802,X800,X799,X801] : (s(bool,X800) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X798))) | s(bool,'T_0') = s(bool,X800) | s(bool,X801) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X798))) | s(bool,'T_0') = s(bool,X799) | s(bool,X801) = s(bool,X802) | s(bool,'T_0') = s(bool,X802)) ) | $spl3),
  inference(subsumption_resolution,[],[f12717,f326])).
fof(f12717,plain,(
  ( ! [X798,X802,X800,X799,X801] : (p(s(bool,X799)) | s(bool,X800) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X798))) | s(bool,'T_0') = s(bool,X800) | s(bool,X801) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X798))) | s(bool,'T_0') = s(bool,X799) | s(bool,X801) = s(bool,X802) | s(bool,'T_0') = s(bool,X802)) ) | $spl3),
  inference(superposition,[],[f2678,f2129])).
fof(f4300,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X1))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X1)))) ) | $spl3),
  inference(condensation,[],[f4299])).
fof(f4299,plain,(
  ( ! [X10,X8,X9] : (s(bool,X10) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X8))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl3),
  inference(subsumption_resolution,[],[f4293,f326])).
fof(f4293,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,X9)) | s(bool,X10) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X8))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl3),
  inference(superposition,[],[f2678,f752])).
fof(f2678,plain,(
  ( ! [X165,X166] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X165)))) | s(bool,X166) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X165))) | s(bool,'T_0') = s(bool,X166)) ) | $spl3),
  inference(subsumption_resolution,[],[f2363,f304])).
fof(f2363,plain,(
  ( ! [X165,X166] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X165)))) | s(bool,X166) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X165))) | s(bool,'T_0') = s(bool,X166)) ) | $spl3),
  inference(superposition,[],[f1417,f752])).
fof(f1417,plain,(
  ( ! [X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X1))))) ) | $spl3),
  inference(subsumption_resolution,[],[f1412,f304])).
fof(f1412,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',X1))))) ) | $spl3),
  inference(superposition,[],[f447,f881])).
fof(f329,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f208])).
fof(f896,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f893,f313])).
fof(f1487,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK15(X0,X1,X2,bool))) )),
  inference(superposition,[],[f444,f313])).
fof(f1901,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f602,f445])).
fof(f4449,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(forward_demodulation,[],[f4303,f602])).
fof(f4303,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f583,f4298])).
fof(f7692,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2))),s('type.integer.int',X2))),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f1873,f1434])).
fof(f7923,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f1901,f311])).
fof(f13941,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(trivial_inequality_removal,[],[f13890])).
fof(f13890,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f2129])).
fof(f13881,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f2129])).
fof(f13190,plain,(
  ( ! [X798,X796,X795,X793,X797,X794] : (s(X795,f(s(bool,'T_0'))) != s(X795,g(s(bool,'T_0'))) | s(fun(bool,X795),X793) = s(fun(bool,X795),X794) | s(bool,X796) = s(bool,X797) | s(bool,X797) = s(bool,sK15(X793,X794,X795,bool)) | s(bool,X796) = s(bool,X798) | s(bool,'T_0') = s(bool,X798)) )),
  inference(superposition,[],[f444,f2129])).
fof(f16394,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (p(s(bool,X237)) | ~sP11(X238,X237,X236) | s(bool,X238) = s(bool,X239) | s(bool,'T_0') = s(bool,X239) | s(bool,X240) = s(bool,X241) | s(bool,X236) = s(bool,X241) | s(bool,X240) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(subsumption_resolution,[],[f13064,f304])).
fof(f13064,plain,(
  ( ! [X241,X239,X237,X242,X240,X238,X236] : (~p(s(bool,'T_0')) | p(s(bool,X237)) | ~sP11(X238,X237,X236) | s(bool,X238) = s(bool,X239) | s(bool,'T_0') = s(bool,X239) | s(bool,X240) = s(bool,X241) | s(bool,X236) = s(bool,X241) | s(bool,X240) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f2659,f2129])).
fof(f16393,plain,(
  ( ! [X231,X229,X235,X233,X230,X234,X232] : (p(s(bool,X230)) | ~sP5(X229,X231,X230) | s(bool,X231) = s(bool,X232) | s(bool,'T_0') = s(bool,X232) | s(bool,X233) = s(bool,X234) | s(bool,X229) = s(bool,X234) | s(bool,X233) = s(bool,X235) | s(bool,'T_0') = s(bool,X235)) )),
  inference(subsumption_resolution,[],[f13063,f304])).
fof(f13063,plain,(
  ( ! [X231,X229,X235,X233,X230,X234,X232] : (~p(s(bool,'T_0')) | p(s(bool,X230)) | ~sP5(X229,X231,X230) | s(bool,X231) = s(bool,X232) | s(bool,'T_0') = s(bool,X232) | s(bool,X233) = s(bool,X234) | s(bool,X229) = s(bool,X234) | s(bool,X233) = s(bool,X235) | s(bool,'T_0') = s(bool,X235)) )),
  inference(superposition,[],[f2646,f2129])).
fof(f16392,plain,(
  ( ! [X165,X163,X161,X164,X162] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X161,X162) | s(bool,X163) = s(bool,X164) | s(bool,X161) = s(bool,X164) | s(bool,X163) = s(bool,X165) | s(bool,'T_0') = s(bool,X165)) )),
  inference(subsumption_resolution,[],[f13050,f304])).
fof(f13050,plain,(
  ( ! [X165,X163,X161,X164,X162] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X161,X162) | s(bool,X163) = s(bool,X164) | s(bool,X161) = s(bool,X164) | s(bool,X163) = s(bool,X165) | s(bool,'T_0') = s(bool,X165)) )),
  inference(superposition,[],[f694,f2129])).
fof(f16391,plain,(
  ( ! [X158,X156,X159,X157,X160] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X156,X157) | s(bool,X158) = s(bool,X159) | s(bool,X156) = s(bool,X159) | s(bool,X158) = s(bool,X160) | s(bool,'T_0') = s(bool,X160)) )),
  inference(subsumption_resolution,[],[f13049,f304])).
fof(f13049,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X156,X157) | s(bool,X158) = s(bool,X159) | s(bool,X156) = s(bool,X159) | s(bool,X158) = s(bool,X160) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f662,f2129])).
fof(f16390,plain,(
  ( ! [X154,X152,X151,X155,X153] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X152,X151) | s(bool,X153) = s(bool,X154) | s(bool,X151) = s(bool,X154) | s(bool,X153) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(subsumption_resolution,[],[f13048,f304])).
fof(f13048,plain,(
  ( ! [X154,X152,X151,X155,X153] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X152,X151) | s(bool,X153) = s(bool,X154) | s(bool,X151) = s(bool,X154) | s(bool,X153) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f657,f2129])).
fof(f16389,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (~sP8(X145,X146,X147) | sP9(X145,X146,X147) | s(bool,X148) = s(bool,X149) | s(bool,X145) = s(bool,X149) | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(subsumption_resolution,[],[f13047,f304])).
fof(f13047,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | ~sP8(X145,X146,X147) | sP9(X145,X146,X147) | s(bool,X148) = s(bool,X149) | s(bool,X145) = s(bool,X149) | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f529,f2129])).
fof(f16388,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (~sP10(X139,X140,X141) | sP11(X139,X140,X141) | s(bool,X142) = s(bool,X143) | s(bool,X139) = s(bool,X143) | s(bool,X142) = s(bool,X144) | s(bool,'T_0') = s(bool,X144)) )),
  inference(subsumption_resolution,[],[f13046,f304])).
fof(f13046,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | ~sP10(X139,X140,X141) | sP11(X139,X140,X141) | s(bool,X142) = s(bool,X143) | s(bool,X139) = s(bool,X143) | s(bool,X142) = s(bool,X144) | s(bool,'T_0') = s(bool,X144)) )),
  inference(superposition,[],[f528,f2129])).
fof(f16387,plain,(
  ( ! [X134,X138,X136,X135,X133,X137] : (~p(s(bool,X134)) | p(s(bool,X135)) | ~sP11(X133,X135,X134) | s(bool,X136) = s(bool,X137) | s(bool,X133) = s(bool,X137) | s(bool,X136) = s(bool,X138) | s(bool,'T_0') = s(bool,X138)) )),
  inference(subsumption_resolution,[],[f13045,f304])).
fof(f13045,plain,(
  ( ! [X134,X138,X136,X135,X133,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,X134)) | p(s(bool,X135)) | ~sP11(X133,X135,X134) | s(bool,X136) = s(bool,X137) | s(bool,X133) = s(bool,X137) | s(bool,X136) = s(bool,X138) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f525,f2129])).
fof(f16386,plain,(
  ( ! [X127,X132,X130,X128,X131,X129] : (~p(s(bool,X128)) | sP11(X127,X128,X129) | s(bool,X130) = s(bool,X131) | s(bool,X127) = s(bool,X131) | s(bool,X130) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) )),
  inference(subsumption_resolution,[],[f13044,f304])).
fof(f13044,plain,(
  ( ! [X127,X132,X130,X128,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,X128)) | sP11(X127,X128,X129) | s(bool,X130) = s(bool,X131) | s(bool,X127) = s(bool,X131) | s(bool,X130) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) )),
  inference(superposition,[],[f524,f2129])).
fof(f16385,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (p(s(bool,X122)) | sP11(X121,X123,X122) | s(bool,X124) = s(bool,X125) | s(bool,X121) = s(bool,X125) | s(bool,X124) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) )),
  inference(subsumption_resolution,[],[f13043,f304])).
fof(f13043,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'T_0')) | p(s(bool,X122)) | sP11(X121,X123,X122) | s(bool,X124) = s(bool,X125) | s(bool,X121) = s(bool,X125) | s(bool,X124) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) )),
  inference(superposition,[],[f523,f2129])).
fof(f16384,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (p(s(bool,X116)) | ~p(s(bool,X117)) | ~sP10(X117,X116,X115) | s(bool,X118) = s(bool,X119) | s(bool,X115) = s(bool,X119) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(subsumption_resolution,[],[f13042,f304])).
fof(f13042,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X116)) | ~p(s(bool,X117)) | ~sP10(X117,X116,X115) | s(bool,X118) = s(bool,X119) | s(bool,X115) = s(bool,X119) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f518,f2129])).
fof(f16383,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (p(s(bool,X110)) | p(s(bool,X111)) | ~sP9(X109,X111,X110) | s(bool,X112) = s(bool,X113) | s(bool,X109) = s(bool,X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f13041,f304])).
fof(f13041,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (~p(s(bool,'T_0')) | p(s(bool,X110)) | p(s(bool,X111)) | ~sP9(X109,X111,X110) | s(bool,X112) = s(bool,X113) | s(bool,X109) = s(bool,X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f508,f2129])).
fof(f16382,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,X104)) | sP9(X103,X104,X105) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(subsumption_resolution,[],[f13040,f304])).
fof(f13040,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X104)) | sP9(X103,X104,X105) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f507,f2129])).
fof(f16381,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (~p(s(bool,X98)) | sP9(X97,X99,X98) | s(bool,X100) = s(bool,X101) | s(bool,X97) = s(bool,X101) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f13039,f304])).
fof(f13039,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (~p(s(bool,'T_0')) | ~p(s(bool,X98)) | sP9(X97,X99,X98) | s(bool,X100) = s(bool,X101) | s(bool,X97) = s(bool,X101) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f506,f2129])).
fof(f16380,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (p(s(bool,X92)) | p(s(bool,X93)) | ~sP8(X91,X92,X93) | s(bool,X94) = s(bool,X95) | s(bool,X91) = s(bool,X95) | s(bool,X94) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f13038,f304])).
fof(f13038,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,'T_0')) | p(s(bool,X92)) | p(s(bool,X93)) | ~sP8(X91,X92,X93) | s(bool,X94) = s(bool,X95) | s(bool,X91) = s(bool,X95) | s(bool,X94) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f501,f2129])).
fof(f16379,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | ~sP7(X87,X86,X85) | s(bool,X88) = s(bool,X89) | s(bool,X85) = s(bool,X89) | s(bool,X88) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f13037,f304])).
fof(f13037,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,X86)) | p(s(bool,X87)) | ~sP7(X87,X86,X85) | s(bool,X88) = s(bool,X89) | s(bool,X85) = s(bool,X89) | s(bool,X88) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f493,f2129])).
fof(f16378,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (~p(s(bool,X80)) | p(s(bool,X81)) | ~sP6(X80,X79,X81) | s(bool,X82) = s(bool,X83) | s(bool,X79) = s(bool,X83) | s(bool,X82) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f13036,f304])).
fof(f13036,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X80)) | p(s(bool,X81)) | ~sP6(X80,X79,X81) | s(bool,X82) = s(bool,X83) | s(bool,X79) = s(bool,X83) | s(bool,X82) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f484,f2129])).
fof(f16377,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (~p(s(bool,X74)) | p(s(bool,X75)) | ~sP3(X74,X73,X75) | s(bool,X76) = s(bool,X77) | s(bool,X73) = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f13035,f304])).
fof(f13035,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X74)) | p(s(bool,X75)) | ~sP3(X74,X73,X75) | s(bool,X76) = s(bool,X77) | s(bool,X73) = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f465,f2129])).
fof(f16376,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP4(X68,X67,X69) | s(bool,X70) = s(bool,X71) | s(bool,X67) = s(bool,X71) | s(bool,X70) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f13034,f304])).
fof(f13034,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP4(X68,X67,X69) | s(bool,X70) = s(bool,X71) | s(bool,X67) = s(bool,X71) | s(bool,X70) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f461,f2129])).
fof(f16375,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (sP5(X62,X63,X61) | ~sP4(X62,X61,X63) | ~sP3(X63,X61,X62) | ~sP2(X61,X63,X62) | s(bool,X64) = s(bool,X65) | s(bool,X61) = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f13033,f304])).
fof(f13033,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | sP5(X62,X63,X61) | ~sP4(X62,X61,X63) | ~sP3(X63,X61,X62) | ~sP2(X61,X63,X62) | s(bool,X64) = s(bool,X65) | s(bool,X61) = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f458,f2129])).
fof(f16374,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP5(X56,X55,X57) | s(bool,X58) = s(bool,X59) | s(bool,X55) = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f13032,f304])).
fof(f13032,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~sP5(X56,X55,X57) | s(bool,X58) = s(bool,X59) | s(bool,X55) = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f457,f2129])).
fof(f16373,plain,(
  ( ! [X54,X52,X50,X53,X51] : (p(s(bool,X51)) | sP1(X51,X50) | s(bool,X52) = s(bool,X53) | s(bool,X50) = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f13031,f304])).
fof(f13031,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X51)) | sP1(X51,X50) | s(bool,X52) = s(bool,X53) | s(bool,X50) = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f431,f2129])).
fof(f16372,plain,(
  ( ! [X47,X45,X48,X46,X49] : (p(s(bool,X46)) | sP1(X45,X46) | s(bool,X47) = s(bool,X48) | s(bool,X45) = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f13030,f304])).
fof(f13030,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X46)) | sP1(X45,X46) | s(bool,X47) = s(bool,X48) | s(bool,X45) = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f428,f2129])).
fof(f16371,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | s(bool,X42) = s(bool,X43) | s(bool,X40) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f13029,f304])).
fof(f13029,plain,(
  ( ! [X43,X41,X44,X42,X40] : (~p(s(bool,'T_0')) | sP0(X40,X41) | s(bool,X42) = s(bool,X43) | s(bool,X40) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f413,f2129])).
fof(f16370,plain,(
  ( ! [X39,X37,X35,X38,X36] : (sP0(X36,X35) | s(bool,X37) = s(bool,X38) | s(bool,X35) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(subsumption_resolution,[],[f13028,f304])).
fof(f13028,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,'T_0')) | sP0(X36,X35) | s(bool,X37) = s(bool,X38) | s(bool,X35) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f412,f2129])).
fof(f16369,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X31)) | s(bool,X30) = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f13027,f304])).
fof(f13027,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X31)) | s(bool,X30) = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f390,f2129])).
fof(f16368,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f13023,f304])).
fof(f13023,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f329,f2129])).
fof(f12910,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | s(bool,X6) = s(bool,X7) | s(bool,X4) = s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f325,f2129])).
fof(f16357,plain,(
  ( ! [X480,X479,X481] : (s(bool,'T_0') != s(bool,X479) | s(bool,X479) = s(bool,X480) | s(bool,X480) = s(bool,X481) | s(bool,'T_0') = s(bool,X481)) )),
  inference(subsumption_resolution,[],[f12849,f582])).
fof(f12849,plain,(
  ( ! [X480,X479,X481] : (s(bool,'T_0') != s(bool,X479) | s(bool,X479) = s(bool,X480) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X480) = s(bool,X481) | s(bool,'T_0') = s(bool,X481)) )),
  inference(superposition,[],[f582,f2129])).
fof(f16356,plain,(
  ( ! [X466,X469,X471,X467,X468,X470] : (s(X467,f(s(bool,X466))) != s(X467,g(s(bool,X466))) | s(fun(bool,X467),X468) = s(fun(bool,X467),X469) | s(bool,'T_0') = s(bool,sK15(X468,X469,X467,bool)) | s(bool,X466) = s(bool,X470) | s(bool,X470) = s(bool,X471) | s(bool,'T_0') = s(bool,X471)) )),
  inference(subsumption_resolution,[],[f12846,f582])).
fof(f12846,plain,(
  ( ! [X466,X469,X471,X467,X468,X470] : (s(X467,f(s(bool,X466))) != s(X467,g(s(bool,X466))) | s(fun(bool,X467),X468) = s(fun(bool,X467),X469) | s(bool,'T_0') = s(bool,sK15(X468,X469,X467,bool)) | s(bool,X466) = s(bool,X470) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X470) = s(bool,X471) | s(bool,'T_0') = s(bool,X471)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f12723,plain,(
  ( ! [X831,X829,X830,X828,X832,X827] : (s(X829,f(s(bool,X830))) != s(X829,g(s(bool,X830))) | s(fun(bool,X829),X827) = s(fun(bool,X829),X828) | s(bool,X831) = s(bool,sK15(X827,X828,X829,bool)) | s(bool,'T_0') = s(bool,X830) | s(bool,X831) = s(bool,X832) | s(bool,'T_0') = s(bool,X832)) )),
  inference(superposition,[],[f444,f2129])).
fof(f16328,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | sP1(X1,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16327])).
fof(f16327,plain,(
  ( ! [X231,X235,X233,X236,X234,X232] : (sP1(X231,X233) | s(bool,X233) = s(bool,X234) | s(bool,'T_0') = s(bool,X234) | s(bool,X231) = s(bool,X235) | s(bool,'T_0') = s(bool,X232) | s(bool,X235) = s(bool,X236) | s(bool,'T_0') = s(bool,X236)) )),
  inference(subsumption_resolution,[],[f12589,f326])).
fof(f12589,plain,(
  ( ! [X231,X235,X233,X236,X234,X232] : (p(s(bool,X232)) | sP1(X231,X233) | s(bool,X233) = s(bool,X234) | s(bool,'T_0') = s(bool,X234) | s(bool,X231) = s(bool,X235) | s(bool,'T_0') = s(bool,X232) | s(bool,X235) = s(bool,X236) | s(bool,'T_0') = s(bool,X236)) )),
  inference(superposition,[],[f2645,f2129])).
fof(f16326,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | sP1(X1,X2) | s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16325])).
fof(f16325,plain,(
  ( ! [X229,X227,X225,X230,X228,X226] : (sP1(X227,X225) | s(bool,X227) = s(bool,X228) | s(bool,'T_0') = s(bool,X228) | s(bool,X225) = s(bool,X229) | s(bool,'T_0') = s(bool,X226) | s(bool,X229) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(subsumption_resolution,[],[f12588,f326])).
fof(f12588,plain,(
  ( ! [X229,X227,X225,X230,X228,X226] : (p(s(bool,X226)) | sP1(X227,X225) | s(bool,X227) = s(bool,X228) | s(bool,'T_0') = s(bool,X228) | s(bool,X225) = s(bool,X229) | s(bool,'T_0') = s(bool,X226) | s(bool,X229) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f2644,f2129])).
fof(f16320,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16319])).
fof(f16319,plain,(
  ( ! [X204,X202,X200,X205,X203,X201] : (s(bool,X200) != s(bool,X202) | s(bool,X202) = s(bool,X203) | s(bool,'T_0') = s(bool,X203) | s(bool,X200) = s(bool,X204) | s(bool,'T_0') = s(bool,X201) | s(bool,X204) = s(bool,X205) | s(bool,'T_0') = s(bool,X205)) )),
  inference(subsumption_resolution,[],[f12583,f326])).
fof(f12583,plain,(
  ( ! [X204,X202,X200,X205,X203,X201] : (p(s(bool,X201)) | s(bool,X200) != s(bool,X202) | s(bool,X202) = s(bool,X203) | s(bool,'T_0') = s(bool,X203) | s(bool,X200) = s(bool,X204) | s(bool,'T_0') = s(bool,X201) | s(bool,X204) = s(bool,X205) | s(bool,'T_0') = s(bool,X205)) )),
  inference(superposition,[],[f2276,f2129])).
fof(f16318,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f16317])).
fof(f16317,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,X22)) | s(bool,X20) = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,'T_0') = s(bool,X21) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f12550,f326])).
fof(f12550,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X20) = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,'T_0') = s(bool,X21) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f387,f2129])).
fof(f12359,plain,(
  ( ! [X831,X829,X830,X828,X832,X827] : (s(X829,f(s(bool,X830))) != s(X829,g(s(bool,X830))) | s(fun(bool,X829),X827) = s(fun(bool,X829),X828) | s(bool,X830) = s(bool,X831) | s(bool,'T_0') = s(bool,X831) | s(bool,X832) = s(bool,sK15(X827,X828,X829,bool)) | s(bool,'T_0') = s(bool,X832)) )),
  inference(superposition,[],[f444,f2129])).
fof(f15996,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,X95) = s(bool,X96) | s(bool,X96) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X93),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int',X94))))) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f12061,f582])).
fof(f12061,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X95) = s(bool,X96) | s(bool,X96) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X93),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int',X94))))) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f2129,f1901])).
fof(f12029,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f2129,f2129])).
fof(f15412,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl3),
  inference(condensation,[],[f15411])).
fof(f15411,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X90) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X89) | s(bool,X91) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) ) | $spl3),
  inference(duplicate_literal_removal,[],[f12007])).
fof(f12007,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X90) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X89) | s(bool,X91) = s(bool,X92) | s(bool,'T_0') = s(bool,X92) | s(bool,'T_0') = s(bool,X89)) ) | $spl3),
  inference(superposition,[],[f2129,f4298])).
fof(f15444,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl3),
  inference(condensation,[],[f15443])).
fof(f15443,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X29) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl3),
  inference(duplicate_literal_removal,[],[f11998])).
fof(f11998,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X30) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X29) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X29)) ) | $spl3),
  inference(superposition,[],[f2129,f2072])).
fof(f15446,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2))) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f15445])).
fof(f15445,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int',X25))) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X24) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(duplicate_literal_removal,[],[f11997])).
fof(f11997,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,X26) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X25),s('type.integer.int',X25))) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X24) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f2129,f2071])).
fof(f15460,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f15459])).
fof(f15459,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f11992])).
fof(f11992,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2129,f313])).
fof(f15648,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f15647])).
fof(f15647,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s(bool,X93) = s(bool,X94) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,X98) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99) | s(bool,X93) = s(bool,X97)) )),
  inference(duplicate_literal_removal,[],[f11897])).
fof(f11897,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s(bool,X93) = s(bool,X94) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,X98) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99) | s(bool,X93) = s(bool,X97)) )),
  inference(superposition,[],[f2129,f2129])).
fof(f11187,plain,(
  ( ! [X64,X62,X63] : (p(s(bool,X62)) | ~sP11(X63,X62,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f11124,f304])).
fof(f11124,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | ~sP11(X63,X62,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f2659,f5893])).
fof(f11186,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,X59)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X60,X59) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f11123,f304])).
fof(f11123,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,'T_0')) | p(s(bool,X59)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X60,X59) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f2646,f5893])).
fof(f11185,plain,(
  ( ! [X54,X53] : (s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f11120,f304])).
fof(f11120,plain,(
  ( ! [X54,X53] : (~p(s(bool,'T_0')) | s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2641,f5893])).
fof(f11184,plain,(
  ( ! [X41,X42] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X41,X42) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X41,X42)) )),
  inference(subsumption_resolution,[],[f11108,f304])).
fof(f11108,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X41,X42) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X41,X42)) )),
  inference(superposition,[],[f529,f5893])).
fof(f11183,plain,(
  ( ! [X39,X40] : (~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X39,X40) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X39,X40)) )),
  inference(subsumption_resolution,[],[f11107,f304])).
fof(f11107,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X39,X40) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X39,X40)) )),
  inference(superposition,[],[f528,f5893])).
fof(f11182,plain,(
  ( ! [X37,X38] : (~p(s(bool,X37)) | p(s(bool,X38)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X38,X37)) )),
  inference(subsumption_resolution,[],[f11106,f304])).
fof(f11106,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | p(s(bool,X38)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X38,X37)) )),
  inference(superposition,[],[f525,f5893])).
fof(f11181,plain,(
  ( ! [X35,X36] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X35,X36) | ~p(s(bool,X35))) )),
  inference(subsumption_resolution,[],[f11105,f304])).
fof(f11105,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X35,X36)) )),
  inference(superposition,[],[f524,f5893])).
fof(f11180,plain,(
  ( ! [X33,X34] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X34,X33) | p(s(bool,X33))) )),
  inference(subsumption_resolution,[],[f11104,f304])).
fof(f11104,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | p(s(bool,X33)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X34,X33)) )),
  inference(superposition,[],[f523,f5893])).
fof(f11179,plain,(
  ( ! [X31,X32] : (p(s(bool,X31)) | ~p(s(bool,X32)) | ~sP10(X32,X31,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(subsumption_resolution,[],[f11103,f304])).
fof(f11103,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~sP10(X32,X31,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f518,f5893])).
fof(f11178,plain,(
  ( ! [X30,X29] : (p(s(bool,X29)) | p(s(bool,X30)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X30,X29)) )),
  inference(subsumption_resolution,[],[f11102,f304])).
fof(f11102,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | p(s(bool,X30)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X30,X29)) )),
  inference(superposition,[],[f508,f5893])).
fof(f11177,plain,(
  ( ! [X28,X27] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X27,X28) | ~p(s(bool,X27))) )),
  inference(subsumption_resolution,[],[f11101,f304])).
fof(f11101,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | ~p(s(bool,X27)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X27,X28)) )),
  inference(superposition,[],[f507,f5893])).
fof(f11176,plain,(
  ( ! [X26,X25] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X26,X25) | ~p(s(bool,X25))) )),
  inference(subsumption_resolution,[],[f11100,f304])).
fof(f11100,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X26,X25)) )),
  inference(superposition,[],[f506,f5893])).
fof(f11175,plain,(
  ( ! [X24,X23] : (p(s(bool,X23)) | p(s(bool,X24)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X23,X24)) )),
  inference(subsumption_resolution,[],[f11099,f304])).
fof(f11099,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | p(s(bool,X24)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X23,X24)) )),
  inference(superposition,[],[f501,f5893])).
fof(f11174,plain,(
  ( ! [X21,X22] : (~p(s(bool,X21)) | p(s(bool,X22)) | ~sP7(X22,X21,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(subsumption_resolution,[],[f11098,f304])).
fof(f11098,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X21)) | p(s(bool,X22)) | ~sP7(X22,X21,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f493,f5893])).
fof(f11173,plain,(
  ( ! [X19,X20] : (~p(s(bool,X19)) | p(s(bool,X20)) | ~sP6(X19,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X20)) )),
  inference(subsumption_resolution,[],[f11097,f304])).
fof(f11097,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | p(s(bool,X20)) | ~sP6(X19,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X20)) )),
  inference(superposition,[],[f484,f5893])).
fof(f11172,plain,(
  ( ! [X17,X18] : (~p(s(bool,X17)) | p(s(bool,X18)) | ~sP3(X17,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X18)) )),
  inference(subsumption_resolution,[],[f11096,f304])).
fof(f11096,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | p(s(bool,X18)) | ~sP3(X17,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X18)) )),
  inference(superposition,[],[f465,f5893])).
fof(f11171,plain,(
  ( ! [X15,X16] : (~p(s(bool,X15)) | p(s(bool,X16)) | ~sP4(X15,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X16)) )),
  inference(subsumption_resolution,[],[f11095,f304])).
fof(f11095,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP4(X15,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X16)) )),
  inference(superposition,[],[f461,f5893])).
fof(f11170,plain,(
  ( ! [X14,X13] : (sP5(X13,X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ~sP4(X13,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X14) | ~sP3(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X13)) )),
  inference(subsumption_resolution,[],[f11169,f5939])).
fof(f11169,plain,(
  ( ! [X14,X13] : (sP5(X13,X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ~sP4(X13,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X14) | ~sP3(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X13) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X14,X13)) )),
  inference(subsumption_resolution,[],[f11094,f304])).
fof(f11094,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP5(X13,X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ~sP4(X13,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X14) | ~sP3(X14,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X13) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X14,X13)) )),
  inference(superposition,[],[f458,f5893])).
fof(f11168,plain,(
  ( ! [X12,X11] : (~p(s(bool,X11)) | p(s(bool,X12)) | ~sP5(X11,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X12)) )),
  inference(subsumption_resolution,[],[f11093,f304])).
fof(f11093,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | p(s(bool,X12)) | ~sP5(X11,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X12)) )),
  inference(superposition,[],[f457,f5893])).
fof(f11167,plain,(
  ( ! [X10] : (sP1(X10,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | p(s(bool,X10))) )),
  inference(subsumption_resolution,[],[f11092,f304])).
fof(f11092,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | sP1(X10,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f431,f5893])).
fof(f11166,plain,(
  ( ! [X9] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X9) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f11091,f304])).
fof(f11091,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X9)) )),
  inference(superposition,[],[f428,f5893])).
fof(f9938,plain,(
  ( ! [X2,X0,X3,X1] : (sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f3950,f446])).
fof(f9882,plain,(
  ( ! [X2,X0,X3,X1] : (sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f3883,f446])).
fof(f9855,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,X98)) | ~sP11(X99,X98,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) ) | $spl3),
  inference(subsumption_resolution,[],[f9818,f304])).
fof(f9818,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X98)) | ~sP11(X99,X98,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) ) | $spl3),
  inference(superposition,[],[f2659,f881])).
fof(f9853,plain,(
  ( ! [X72,X71,X73] : (p(s(bool,X71)) | ~sP11(X72,X71,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f9812,f304])).
fof(f9812,plain,(
  ( ! [X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP11(X72,X71,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f2659,f586])).
fof(f9851,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X2)) | ~sP11(X0,X2,'T_0') | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f9850])).
fof(f9850,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X2)) | ~sP11(X0,X2,'T_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f9849])).
fof(f9849,plain,(
  ( ! [X39,X37,X41,X38,X40] : (p(s(bool,X38)) | ~sP11(X39,X38,'T_0') | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,X37) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f9804,f816])).
fof(f9804,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,X37)) | p(s(bool,X38)) | ~sP11(X39,X38,'T_0') | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,X37) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f2659,f752])).
fof(f9845,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X5)) | ~sP11(X6,X5,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f9797,f304])).
fof(f9797,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP11(X6,X5,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2659,f752])).
fof(f8529,plain,(
  ( ! [X97,X95,X96] : (p(s(bool,X95)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X96,X95) | s(bool,X96) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) ) | $spl3),
  inference(subsumption_resolution,[],[f8485,f304])).
fof(f8485,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,X95)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X96,X95) | s(bool,X96) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) ) | $spl3),
  inference(superposition,[],[f2646,f881])).
fof(f8527,plain,(
  ( ! [X70,X68,X69] : (p(s(bool,X68)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X69,X68) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f8479,f304])).
fof(f8479,plain,(
  ( ! [X70,X68,X69] : (~p(s(bool,'T_0')) | p(s(bool,X68)) | ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X69,X68) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f2646,f586])).
fof(f8525,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X2)) | ~sP5('T_0',X0,X2) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f8524])).
fof(f8524,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X2)) | ~sP5('T_0',X0,X2) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f8523])).
fof(f8523,plain,(
  ( ! [X39,X37,X41,X38,X40] : (p(s(bool,X38)) | ~sP5('T_0',X39,X38) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,X37) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f8472,f816])).
fof(f8472,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,X37)) | p(s(bool,X38)) | ~sP5('T_0',X39,X38) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,X37) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f2646,f752])).
fof(f8519,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X5)) | ~sP5(X4,X6,X5) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f8465,f304])).
fof(f8465,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP5(X4,X6,X5) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2646,f752])).
fof(f8395,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f3958,f446])).
fof(f8392,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(unit_resulting_resolution,[],[f3958,f456])).
fof(f8378,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f3918,f446])).
fof(f8372,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f559,f549,f3918,f460])).
fof(f8373,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5939,f549,f3918,f460])).
fof(f8375,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X0)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f575,f573,f3918,f460])).
fof(f8331,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f3886,f446])).
fof(f8324,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f3886,f456])).
fof(f8308,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f3863,f446])).
fof(f8299,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f576,f549,f3863,f460])).
fof(f8300,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f557,f547,f3863,f460])).
fof(f8301,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5938,f5923,f3863,f460])).
fof(f8285,plain,(
  ( ! [X74,X75] : (s(bool,X74) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl3),
  inference(subsumption_resolution,[],[f8219,f304])).
fof(f8219,plain,(
  ( ! [X74,X75] : (~p(s(bool,'T_0')) | s(bool,X74) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl3),
  inference(superposition,[],[f2641,f881])).
fof(f8281,plain,(
  ( ! [X54,X53] : (s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f8213,f304])).
fof(f8213,plain,(
  ( ! [X54,X53] : (~p(s(bool,'T_0')) | s(bool,X53) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2641,f586])).
fof(f8127,plain,(
  ( ! [X76,X77] : (s(bool,X76) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) ) | $spl3),
  inference(subsumption_resolution,[],[f8088,f540])).
fof(f8088,plain,(
  ( ! [X76,X77] : (p(s(bool,'F_0')) | s(bool,X76) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) ) | $spl3),
  inference(superposition,[],[f2276,f4449])).
fof(f8125,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X0) = s(bool,X1)) ) | $spl3),
  inference(condensation,[],[f8124])).
fof(f8124,plain,(
  ( ! [X61,X59,X60] : (s(bool,X60) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X59)) ) | $spl3),
  inference(subsumption_resolution,[],[f8083,f326])).
fof(f8083,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,X59)) | s(bool,X60) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X59)) ) | $spl3),
  inference(superposition,[],[f2276,f2072])).
fof(f8122,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,X51) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X49),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X50))),s('type.integer.int',X50))))) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f8080,f540])).
fof(f8080,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,'F_0')) | s(bool,X51) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X49),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X50))),s('type.integer.int',X50))))) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f2276,f1901])).
fof(f8121,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f8120])).
fof(f8120,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X44) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int',X42))) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f8078,f326])).
fof(f8078,plain,(
  ( ! [X45,X43,X44,X42] : (p(s(bool,X43)) | s(bool,X44) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int',X42))) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f2276,f2071])).
fof(f8010,plain,(
  ( ! [X175,X173,X176,X174] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X173),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X173),s('type.integer.int',X174))),s('type.integer.int',X174)))),X175) | s(bool,X175) = s(bool,X176) | s(bool,'T_0') = s(bool,X176)) )),
  inference(subsumption_resolution,[],[f7994,f540])).
fof(f7994,plain,(
  ( ! [X175,X173,X176,X174] : (p(s(bool,'F_0')) | sP1('const.integer.int_lt_2'(s('type.integer.int',X173),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X173),s('type.integer.int',X174))),s('type.integer.int',X174)))),X175) | s(bool,X175) = s(bool,X176) | s(bool,'T_0') = s(bool,X176)) )),
  inference(superposition,[],[f2645,f1901])).
fof(f8009,plain,(
  ( ! [X171,X169,X172,X170] : (sP1(X171,'const.integer.int_lt_2'(s('type.integer.int',X169),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X169),s('type.integer.int',X170))),s('type.integer.int',X170))))) | s(bool,X171) = s(bool,X172) | s(bool,'T_0') = s(bool,X172)) )),
  inference(subsumption_resolution,[],[f7993,f540])).
fof(f7993,plain,(
  ( ! [X171,X169,X172,X170] : (p(s(bool,'F_0')) | sP1(X171,'const.integer.int_lt_2'(s('type.integer.int',X169),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X169),s('type.integer.int',X170))),s('type.integer.int',X170))))) | s(bool,X171) = s(bool,X172) | s(bool,'T_0') = s(bool,X172)) )),
  inference(superposition,[],[f2644,f1901])).
fof(f8004,plain,(
  ( ! [X35,X36] : (s(bool,X36) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK13),s('type.integer.int',X35))),s('type.integer.int',X35))))) | s(bool,'T_0') = s(bool,X36)) ) | $spl3),
  inference(subsumption_resolution,[],[f7951,f540])).
fof(f7951,plain,(
  ( ! [X35,X36] : (p(s(bool,'F_0')) | s(bool,X36) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK13),s('type.integer.int',X35))),s('type.integer.int',X35))))) | s(bool,'T_0') = s(bool,X36)) ) | $spl3),
  inference(superposition,[],[f2678,f1901])).
fof(f7917,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f1901,f476])).
fof(f7918,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f304,f1901,f474])).
fof(f7919,plain,(
  ( ! [X0,X1] : (~sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f540,f1901,f476])).
fof(f7920,plain,(
  ( ! [X0,X1] : (sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f304,f1901,f474])).
fof(f7862,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X5))),s('type.integer.int',X6))),s('type.integer.int',X6))),s('type.integer.int',X5)))))) )),
  inference(superposition,[],[f1873,f445])).
fof(f7857,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f1873,f311])).
fof(f7808,plain,(
  ( ! [X0,X1] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f540,f1873,f473])).
fof(f7809,plain,(
  ( ! [X0,X1] : (~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f1873,f475])).
fof(f7851,plain,(
  ( ! [X0,X1] : (sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f540,f1873,f473])).
fof(f7852,plain,(
  ( ! [X0,X1] : (~sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f304,f1873,f475])).
fof(f7203,plain,(
  ( ! [X72,X73] : (sP1('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),X72) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl3),
  inference(subsumption_resolution,[],[f7190,f540])).
fof(f7190,plain,(
  ( ! [X72,X73] : (p(s(bool,'F_0')) | sP1('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),X72) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl3),
  inference(superposition,[],[f2645,f4449])).
fof(f7202,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X1) | s(bool,X0) = s(bool,X1)) ) | $spl3),
  inference(condensation,[],[f7201])).
fof(f7201,plain,(
  ( ! [X57,X56,X55] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X56) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X55)) ) | $spl3),
  inference(subsumption_resolution,[],[f7185,f326])).
fof(f7185,plain,(
  ( ! [X57,X56,X55] : (p(s(bool,X55)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),X56) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X55)) ) | $spl3),
  inference(superposition,[],[f2645,f2072])).
fof(f7200,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP1('const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f7199])).
fof(f7199,plain,(
  ( ! [X45,X43,X44,X42] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int',X42)),X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f7181,f326])).
fof(f7181,plain,(
  ( ! [X45,X43,X44,X42] : (p(s(bool,X43)) | sP1('const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int',X42)),X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f2645,f2071])).
fof(f7198,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP1('F_0',X1) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f7197])).
fof(f7197,plain,(
  ( ! [X39,X37,X38] : (sP1('F_0',X38) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f7179,f326])).
fof(f7179,plain,(
  ( ! [X39,X37,X38] : (p(s(bool,X37)) | sP1('F_0',X38) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f2645,f313])).
fof(f7196,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f7169,f540])).
fof(f7169,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | sP1(X0,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2645,f313])).
fof(f7134,plain,(
  ( ! [X72,X73] : (sP1(X72,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl3),
  inference(subsumption_resolution,[],[f7121,f540])).
fof(f7121,plain,(
  ( ! [X72,X73] : (p(s(bool,'F_0')) | sP1(X72,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl3),
  inference(superposition,[],[f2644,f4449])).
fof(f7133,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP1(X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X0) = s(bool,X1)) ) | $spl3),
  inference(condensation,[],[f7132])).
fof(f7132,plain,(
  ( ! [X57,X56,X55] : (sP1(X56,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X55)) ) | $spl3),
  inference(subsumption_resolution,[],[f7116,f326])).
fof(f7116,plain,(
  ( ! [X57,X56,X55] : (p(s(bool,X55)) | sP1(X56,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X55)) ) | $spl3),
  inference(superposition,[],[f2644,f2072])).
fof(f7131,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP1(X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f7130])).
fof(f7130,plain,(
  ( ! [X45,X43,X44,X42] : (sP1(X44,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int',X42))) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f7112,f326])).
fof(f7112,plain,(
  ( ! [X45,X43,X44,X42] : (p(s(bool,X43)) | sP1(X44,'const.integer.int_lt_2'(s('type.integer.int',X42),s('type.integer.int',X42))) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f2644,f2071])).
fof(f7129,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP1(X1,'F_0') | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f7128])).
fof(f7128,plain,(
  ( ! [X39,X37,X38] : (sP1(X38,'F_0') | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f7110,f326])).
fof(f7110,plain,(
  ( ! [X39,X37,X38] : (p(s(bool,X37)) | sP1(X38,'F_0') | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f2644,f313])).
fof(f7127,plain,(
  ( ! [X2,X0,X1] : (sP1(X1,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f7100,f540])).
fof(f7100,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | sP1(X1,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2644,f313])).
fof(f7018,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2640,f313])).
fof(f6719,plain,(
  ( ! [X10,X8,X9] : (s(bool,X10) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X9))),s('type.integer.int',X9))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f2071,f445])).
fof(f6685,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f540,f576,f549,f5939,f460])).
fof(f6686,plain,(
  sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f540,f553,f549,f5939,f459])).
fof(f6687,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f540,f553,f574,f5939,f459])).
fof(f6672,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f552,f549,f5938,f460])).
fof(f6673,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f540,f575,f549,f5938,f460])).
fof(f6652,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f551,f546,f1308])).
fof(f6655,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f550,f547,f1308])).
fof(f6656,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f551,f547,f1308])).
fof(f6657,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f5936,f547,f1308])).
fof(f6658,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f550,f5923,f1308])).
fof(f6659,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f551,f5923,f1308])).
fof(f6660,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f5936,f5923,f1308])).
fof(f6665,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f576,f574,f1308])).
fof(f6641,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f553,f548,f5937,f459])).
fof(f6612,plain,(
  ~sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5930,f455])).
fof(f6577,plain,(
  ~sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5917,f456])).
fof(f5893,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f5882,f390])).
fof(f5895,plain,(
  ( ! [X0] : (sP0(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f412])).
fof(f5896,plain,(
  ( ! [X0] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5882,f413])).
fof(f5897,plain,(
  ~sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f304,f5882,f427])).
fof(f5899,plain,(
  ~sP1('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f5882,f427])).
fof(f5900,plain,(
  ~sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5882,f5882,f427])).
fof(f5901,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5882,f428])).
fof(f5902,plain,(
  sP1('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f540,f5882,f431])).
fof(f5905,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f5882,f457])).
fof(f5906,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f5882,f540,f5882,f457])).
fof(f5907,plain,(
  sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f5882,f458])).
fof(f5908,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f556,f551,f546,f5882,f458])).
fof(f5909,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f557,f550,f547,f5882,f458])).
fof(f5910,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f557,f551,f547,f5882,f458])).
fof(f5917,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f5882,f461])).
fof(f5918,plain,(
  ~sP4('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f5882,f540,f5882,f461])).
fof(f5923,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f462])).
fof(f5930,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f5882,f465])).
fof(f5931,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f5882,f540,f5882,f465])).
fof(f5936,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f466])).
fof(f5937,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f470])).
fof(f5938,plain,(
  ( ! [X0,X1] : (sP2(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) )),
  inference(unit_resulting_resolution,[],[f5882,f471])).
fof(f5939,plain,(
  ( ! [X0,X1] : (sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f5882,f472])).
fof(f5940,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0')),
  inference(unit_resulting_resolution,[],[f586,f5882,f474])).
fof(f5941,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f881,f5882,f474])).
fof(f5942,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f445,f5882,f474])).
fof(f5943,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f1432,f5882,f474])).
fof(f5944,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f896,f5882,f474])).
fof(f5945,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f602,f5882,f474])).
fof(f5946,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f4449,f5882,f474])).
fof(f5948,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f586,f5882,f474])).
fof(f5949,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f881,f5882,f474])).
fof(f5950,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f445,f5882,f474])).
fof(f5951,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(unit_resulting_resolution,[],[f1432,f5882,f474])).
fof(f5952,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f896,f5882,f474])).
fof(f5953,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f602,f5882,f474])).
fof(f5954,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f4449,f5882,f474])).
fof(f5957,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f893,f5882,f475])).
fof(f5958,plain,(
  ( ! [X0] : (~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f583,f5882,f475])).
fof(f5959,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f4484,f5882,f475])).
fof(f5960,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f582,f5882,f475])).
fof(f5961,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f893,f5882,f475])).
fof(f5962,plain,(
  ( ! [X0] : (~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f583,f5882,f475])).
fof(f5963,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f4484,f5882,f475])).
fof(f5964,plain,(
  ( ! [X0] : (~sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f5882,f478])).
fof(f5965,plain,(
  ( ! [X0] : (~sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f540,f5882,f479])).
fof(f5968,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f304,f561,f5882,f480])).
fof(f5973,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f561,f5882,f480])).
fof(f5974,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5882,f561,f5882,f480])).
fof(f5982,plain,(
  ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f5882,f484])).
fof(f5983,plain,(
  ~sP6('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f5882,f540,f5882,f484])).
fof(f5988,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f485])).
fof(f5989,plain,(
  sP7('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f304,f304,f5882,f490])).
fof(f5994,plain,(
  sP7('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f304,f5882,f490])).
fof(f5996,plain,(
  sP7('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f5882,f5882,f490])).
fof(f5999,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f304,f5882,f490])).
fof(f6000,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f5882,f304,f5882,f490])).
fof(f6001,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f5882,f5882,f490])).
fof(f6002,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5882,f5882,f5882,f490])).
fof(f6007,plain,(
  ~sP7('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f304,f540,f5882,f493])).
fof(f6008,plain,(
  ~sP7('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5882,f540,f5882,f493])).
fof(f6011,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f540,f5882,f494])).
fof(f6021,plain,(
  ( ! [X0] : (~sP9('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f540,f5882,f495])).
fof(f6035,plain,(
  ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f5882,f501])).
fof(f6040,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f502])).
fof(f6041,plain,(
  ( ! [X0,X1] : (sP8(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) )),
  inference(unit_resulting_resolution,[],[f5882,f503])).
fof(f6046,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f5882,f506])).
fof(f6051,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5882,f5882,f507])).
fof(f6052,plain,(
  ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f5882,f508])).
fof(f6053,plain,(
  ( ! [X0] : (~sP11('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f540,f5882,f512])).
fof(f6075,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f540,f581,f5882,f517])).
fof(f6082,plain,(
  ~sP10('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f540,f304,f5882,f518])).
fof(f6083,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f540,f5882,f5882,f518])).
fof(f6088,plain,(
  ( ! [X0,X1] : (sP10(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) )),
  inference(unit_resulting_resolution,[],[f5882,f520])).
fof(f6089,plain,(
  sP11('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f540,f540,f5882,f522])).
fof(f6096,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5882,f5882,f524])).
fof(f6101,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f5882,f525])).
fof(f6102,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f5882,f540,f5882,f525])).
fof(f6103,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f569,f5882,f528])).
fof(f6104,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f580,f5882,f528])).
fof(f6105,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f570,f5882,f528])).
fof(f6106,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(unit_resulting_resolution,[],[f571,f5882,f528])).
fof(f6107,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f564,f5882,f529])).
fof(f6108,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f565,f5882,f529])).
fof(f6109,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f566,f5882,f529])).
fof(f6110,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(unit_resulting_resolution,[],[f567,f5882,f529])).
fof(f6111,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f5882,f657])).
fof(f6112,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5882,f662])).
fof(f6113,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5882,f694])).
fof(f6114,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5882,f938])).
fof(f6115,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f978])).
fof(f6116,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f5882,f979])).
fof(f6117,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f5882,f980])).
fof(f6118,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f5882,f982])).
fof(f6119,plain,(
  ~sP4('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5882,f1002])).
fof(f6122,plain,(
  ~sP4('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f1003])).
fof(f6125,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5882,f1024])).
fof(f6128,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f1025])).
fof(f6131,plain,(
  ~sP6('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f5882,f1073])).
fof(f6134,plain,(
  ~sP6('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f1074])).
fof(f6137,plain,(
  ~sP7('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f540,f5882,f1106])).
fof(f6138,plain,(
  ~sP7('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f1107])).
fof(f6139,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f540,f5882,f1236])).
fof(f6142,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f1237])).
fof(f6145,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f540,f5882,f1274])).
fof(f6150,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f5882,f1275])).
fof(f5882,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))))),
  inference(subsumption_resolution,[],[f5871,f304])).
fof(f5871,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))))),
  inference(superposition,[],[f1621,f586])).
fof(f4895,plain,(
  sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f4845,f455])).
fof(f4889,plain,(
  ~sP4('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f558,f550,f4839,f458])).
fof(f4869,plain,(
  sP3('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f4838,f455])).
fof(f4838,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f4484,f473])).
fof(f4839,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f4484,f475])).
fof(f4845,plain,(
  sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f4484,f473])).
fof(f4846,plain,(
  ~sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f4484,f475])).
fof(f4763,plain,(
  sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f4657,f456])).
fof(f4741,plain,(
  ~sP2('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f553,f549,f4656,f459])).
fof(f4709,plain,(
  ~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f552,f549,f4654,f460])).
fof(f4654,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f4449,f476])).
fof(f4655,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f4449,f474])).
fof(f4656,plain,(
  ~sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f4449,f476])).
fof(f4657,plain,(
  sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f4449,f474])).
fof(f4484,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl3),
  inference(subsumption_resolution,[],[f4360,f583])).
fof(f4360,plain,(
  ( ! [X86] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int',X86)))) ) | $spl3),
  inference(superposition,[],[f583,f4298])).
fof(f4298,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,X1)) ) | $spl3),
  inference(subsumption_resolution,[],[f4290,f540])).
fof(f4290,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,X1)) ) | $spl3),
  inference(superposition,[],[f2678,f602])).
fof(f4156,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f580,f715])).
fof(f3958,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(superposition,[],[f1429,f311])).
fof(f3953,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f1429,f446])).
fof(f3950,plain,(
  ( ! [X2,X0,X1] : (sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f1429,f456])).
fof(f3918,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(superposition,[],[f1428,f311])).
fof(f3913,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f1428,f446])).
fof(f3908,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f576,f549,f1428,f460])).
fof(f3910,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f575,f573,f1428,f460])).
fof(f3893,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f1427,f446])).
fof(f3886,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f1427,f311])).
fof(f3883,plain,(
  ( ! [X2,X0,X1] : (sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f1427,f456])).
fof(f3870,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f1426,f446])).
fof(f3863,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f1426,f311])).
fof(f3858,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f576,f549,f1426,f460])).
fof(f3860,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f575,f573,f1426,f460])).
fof(f3850,plain,(
  sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f1815,f456])).
fof(f3777,plain,(
  ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f553,f549,f1814,f459])).
fof(f3713,plain,(
  ~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f552,f549,f1812,f460])).
fof(f3637,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f3630,f517])).
fof(f3630,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f1274])).
fof(f3604,plain,(
  ~sP11('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f3580,f513])).
fof(f3580,plain,(
  ~sP10('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f540,f304,f1236])).
fof(f3552,plain,(
  ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f3528,f496])).
fof(f3528,plain,(
  ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f1153])).
fof(f3277,plain,(
  ~sP7('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f2081,f477])).
fof(f2364,plain,(
  ( ! [X173,X171,X172,X170] : (s(X172,f(s(bool,'T_0'))) != s(X172,g(s(bool,'T_0'))) | s(fun(bool,X172),X170) = s(fun(bool,X172),X171) | s(bool,X173) = s(bool,sK15(X170,X171,X172,bool)) | s(bool,'T_0') = s(bool,X173)) )),
  inference(superposition,[],[f444,f752])).
fof(f2664,plain,(
  ( ! [X103,X101,X102] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X101,X102) | s(bool,X101) = s(bool,X103) | s(bool,'T_0') = s(bool,X103)) )),
  inference(subsumption_resolution,[],[f2338,f304])).
fof(f2338,plain,(
  ( ! [X103,X101,X102] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X101,X102) | s(bool,X101) = s(bool,X103) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f694,f752])).
fof(f2663,plain,(
  ( ! [X99,X100,X98] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X98,X99) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) )),
  inference(subsumption_resolution,[],[f2337,f304])).
fof(f2337,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X98,X99) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f662,f752])).
fof(f2662,plain,(
  ( ! [X97,X95,X96] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X96,X95) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f2336,f304])).
fof(f2336,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X96,X95) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f657,f752])).
fof(f2661,plain,(
  ( ! [X94,X92,X93,X91] : (sP9(X91,X92,X93) | ~sP8(X91,X92,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f2335,f304])).
fof(f2335,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | ~sP8(X91,X92,X93) | sP9(X91,X92,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f529,f752])).
fof(f2660,plain,(
  ( ! [X90,X88,X87,X89] : (~sP10(X87,X88,X89) | sP11(X87,X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f2334,f304])).
fof(f2334,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~sP10(X87,X88,X89) | sP11(X87,X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f528,f752])).
fof(f2659,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,X84)) | p(s(bool,X85)) | ~sP11(X83,X85,X84) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f2333,f304])).
fof(f2333,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | ~p(s(bool,X84)) | p(s(bool,X85)) | ~sP11(X83,X85,X84) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f525,f752])).
fof(f2658,plain,(
  ( ! [X80,X81,X79,X82] : (sP11(X79,X80,X81) | ~p(s(bool,X80)) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f2332,f304])).
fof(f2332,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X80)) | sP11(X79,X80,X81) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f524,f752])).
fof(f2657,plain,(
  ( ! [X78,X76,X77,X75] : (sP11(X75,X77,X76) | p(s(bool,X76)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f2331,f304])).
fof(f2331,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | sP11(X75,X77,X76) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f523,f752])).
fof(f2656,plain,(
  ( ! [X74,X72,X71,X73] : (~sP10(X73,X72,X71) | ~p(s(bool,X73)) | p(s(bool,X72)) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f2330,f304])).
fof(f2330,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X72)) | ~p(s(bool,X73)) | ~sP10(X73,X72,X71) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f518,f752])).
fof(f2655,plain,(
  ( ! [X70,X68,X69,X67] : (~sP9(X67,X69,X68) | p(s(bool,X69)) | p(s(bool,X68)) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f2329,f304])).
fof(f2329,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X68)) | p(s(bool,X69)) | ~sP9(X67,X69,X68) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f508,f752])).
fof(f2654,plain,(
  ( ! [X66,X64,X65,X63] : (sP9(X63,X64,X65) | ~p(s(bool,X64)) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f2328,f304])).
fof(f2328,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X64)) | sP9(X63,X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f507,f752])).
fof(f2653,plain,(
  ( ! [X61,X59,X62,X60] : (sP9(X59,X61,X60) | ~p(s(bool,X60)) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f2327,f304])).
fof(f2327,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | ~p(s(bool,X60)) | sP9(X59,X61,X60) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f506,f752])).
fof(f2652,plain,(
  ( ! [X57,X58,X56,X55] : (~sP8(X55,X56,X57) | p(s(bool,X57)) | p(s(bool,X56)) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f2326,f304])).
fof(f2326,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,X56)) | p(s(bool,X57)) | ~sP8(X55,X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f501,f752])).
fof(f2651,plain,(
  ( ! [X54,X52,X53,X51] : (~sP7(X53,X52,X51) | p(s(bool,X53)) | ~p(s(bool,X52)) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f2325,f304])).
fof(f2325,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,X52)) | p(s(bool,X53)) | ~sP7(X53,X52,X51) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f493,f752])).
fof(f2650,plain,(
  ( ! [X47,X50,X48,X49] : (~sP6(X48,X47,X49) | p(s(bool,X49)) | ~p(s(bool,X48)) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f2324,f304])).
fof(f2324,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X48)) | p(s(bool,X49)) | ~sP6(X48,X47,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f484,f752])).
fof(f2649,plain,(
  ( ! [X45,X43,X46,X44] : (~sP3(X44,X43,X45) | p(s(bool,X45)) | ~p(s(bool,X44)) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f2323,f304])).
fof(f2323,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X44)) | p(s(bool,X45)) | ~sP3(X44,X43,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f465,f752])).
fof(f2648,plain,(
  ( ! [X39,X41,X42,X40] : (~sP4(X40,X39,X41) | p(s(bool,X41)) | ~p(s(bool,X40)) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f2322,f304])).
fof(f2322,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X40)) | p(s(bool,X41)) | ~sP4(X40,X39,X41) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f461,f752])).
fof(f2647,plain,(
  ( ! [X37,X35,X38,X36] : (~sP4(X36,X35,X37) | sP5(X36,X37,X35) | ~sP3(X37,X35,X36) | ~sP2(X35,X37,X36) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f2321,f304])).
fof(f2321,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | sP5(X36,X37,X35) | ~sP4(X36,X35,X37) | ~sP3(X37,X35,X36) | ~sP2(X35,X37,X36) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f458,f752])).
fof(f2646,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | ~sP5(X32,X31,X33) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f2320,f304])).
fof(f2320,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~sP5(X32,X31,X33) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f457,f752])).
fof(f2645,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f2319,f304])).
fof(f2319,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f431,f752])).
fof(f2644,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f2318,f304])).
fof(f2318,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f428,f752])).
fof(f2643,plain,(
  ( ! [X24,X23,X22] : (sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f2317,f304])).
fof(f2317,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f413,f752])).
fof(f2642,plain,(
  ( ! [X21,X19,X20] : (sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f2316,f304])).
fof(f2316,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f412,f752])).
fof(f2640,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f2311,f304])).
fof(f2311,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f329,f752])).
fof(f2276,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f325,f752])).
fof(f2213,plain,(
  ( ! [X177,X178,X176,X179] : (s(X178,f(s(bool,X179))) != s(X178,g(s(bool,X179))) | s(fun(bool,X178),X176) = s(fun(bool,X178),X177) | s(bool,'T_0') = s(bool,X179) | s(bool,'T_0') = s(bool,sK15(X176,X177,X178,bool))) )),
  inference(superposition,[],[f444,f752])).
fof(f2129,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f752,f752])).
fof(f2081,plain,(
  ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f1073])).
fof(f2072,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl3),
  inference(subsumption_resolution,[],[f2066,f540])).
fof(f2066,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl3),
  inference(superposition,[],[f816,f896])).
fof(f2071,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f2064,f540])).
fof(f2064,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X1) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f816,f602])).
fof(f2052,plain,(
  ~sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f2036,f456])).
fof(f2045,plain,(
  sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0')),
  inference(unit_resulting_resolution,[],[f875,f455])).
fof(f2046,plain,(
  sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0')),
  inference(unit_resulting_resolution,[],[f875,f454])).
fof(f2036,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f1002])).
fof(f2008,plain,(
  sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0')),
  inference(unit_resulting_resolution,[],[f873,f455])).
fof(f2009,plain,(
  sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0')),
  inference(unit_resulting_resolution,[],[f873,f454])).
fof(f2001,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f575,f573,f1895,f459])).
fof(f1977,plain,(
  ( ! [X0] : (~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f552,f548,f1893,f460])).
fof(f1893,plain,(
  ( ! [X0] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f602,f476])).
fof(f1894,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f304,f602,f474])).
fof(f1895,plain,(
  ( ! [X0] : (~sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f540,f602,f476])).
fof(f1887,plain,(
  ( ! [X0] : (~sP4('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f304,f554,f550,f1863,f458])).
fof(f1873,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f583,f445])).
fof(f1863,plain,(
  ( ! [X0] : (~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f583,f475])).
fof(f1867,plain,(
  ( ! [X0] : (~sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f304,f583,f475])).
fof(f1858,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f938])).
fof(f1812,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f896,f476])).
fof(f1813,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f896,f474])).
fof(f1814,plain,(
  ~sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f896,f476])).
fof(f1815,plain,(
  sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f896,f474])).
fof(f1799,plain,(
  sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f902,f455])).
fof(f1792,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f565,f984])).
fof(f1794,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f567,f984])).
fof(f1769,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f580,f983])).
fof(f1771,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f571,f983])).
fof(f1766,plain,(
  sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f899,f455])).
fof(f1748,plain,(
  ~sP4('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f558,f550,f898,f458])).
fof(f1699,plain,(
  ( ! [X0] : (sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f987,f513])).
fof(f1687,plain,(
  ( ! [X0] : (sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f986,f496])).
fof(f1684,plain,(
  ( ! [X0] : (sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f985,f496])).
fof(f1624,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f540,f1612,f517])).
fof(f1612,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f540,f1275])).
fof(f1595,plain,(
  ~sP11('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f1585,f513])).
fof(f1585,plain,(
  ~sP10('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f304,f1237])).
fof(f1555,plain,(
  ~sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f1545,f496])).
fof(f1545,plain,(
  ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f540,f1154])).
fof(f1499,plain,(
  ~sP7('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f1489,f477])).
fof(f1489,plain,(
  ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f540,f1074])).
fof(f1426,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f540,f445,f476])).
fof(f1427,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f304,f445,f474])).
fof(f1428,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f540,f445,f476])).
fof(f1429,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f304,f445,f474])).
fof(f1415,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) )),
  inference(forward_demodulation,[],[f1410,f445])).
fof(f1410,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) )),
  inference(superposition,[],[f447,f311])).
fof(f1414,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X0)))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) )),
  inference(forward_demodulation,[],[f1409,f445])).
fof(f1409,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int',X2))))) )),
  inference(superposition,[],[f447,f311])).
fof(f1374,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f559,f866,f546,f540,f460])).
fof(f1387,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f557,f547,f552,f540,f460])).
fof(f1392,plain,(
  ( ! [X0] : (sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f556,f546,f575,f540,f460])).
fof(f1393,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f557,f547,f575,f540,f460])).
fof(f1400,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f559,f549,f576,f540,f460])).
fof(f1335,plain,(
  sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f559,f549,f553,f540,f459])).
fof(f1338,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f559,f574,f553,f540,f459])).
fof(f1345,plain,(
  sP5('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f554,f548,f552,f540,f459])).
fof(f1346,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f555,f548,f552,f540,f459])).
fof(f1349,plain,(
  ( ! [X0] : (sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f554,f573,f575,f540,f459])).
fof(f1350,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f555,f573,f575,f540,f459])).
fof(f1309,plain,(
  ( ! [X2,X3] : (sP5(X2,X3,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ~sP4(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3) | ~sP3(X3,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X2) | ~sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3,X2)) ) | $spl3),
  inference(subsumption_resolution,[],[f1304,f304])).
fof(f1304,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | sP5(X2,X3,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ~sP4(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3) | ~sP3(X3,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X2) | ~sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3,X2)) ) | $spl3),
  inference(superposition,[],[f458,f881])).
fof(f1308,plain,(
  ( ! [X0,X1] : (~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | sP5(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ~sP3(X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(subsumption_resolution,[],[f1307,f559])).
fof(f1307,plain,(
  ( ! [X0,X1] : (sP5(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | ~sP3(X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(subsumption_resolution,[],[f1303,f304])).
fof(f1303,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP5(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | ~sP3(X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0) | ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(superposition,[],[f458,f586])).
fof(f1290,plain,(
  sP5('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f558,f550,f546,f304,f458])).
fof(f1291,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f558,f551,f546,f304,f458])).
fof(f1293,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0')),
  inference(unit_resulting_resolution,[],[f558,f551,f547,f304,f458])).
fof(f1296,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f558,f576,f549,f304,f458])).
fof(f1297,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f558,f553,f574,f304,f458])).
fof(f1298,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f558,f576,f574,f304,f458])).
fof(f1300,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','F_0')),
  inference(unit_resulting_resolution,[],[f558,f549,f864,f304,f458])).
fof(f1301,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f558,f549,f940,f304,f458])).
fof(f1281,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f540,f1025])).
fof(f1275,plain,(
  ( ! [X2,X3] : (~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3,X2) | p(s(bool,X3)) | ~p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1269,f304])).
fof(f1269,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X2)) | p(s(bool,X3)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3,X2)) ) | $spl3),
  inference(superposition,[],[f525,f881])).
fof(f1274,plain,(
  ( ! [X0,X1] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1268,f304])).
fof(f1268,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(superposition,[],[f525,f586])).
fof(f1255,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f540,f1003])).
fof(f1241,plain,(
  ~sP11('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1228,f513])).
fof(f1237,plain,(
  ( ! [X2,X3] : (~sP10(X3,X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ~p(s(bool,X3)) | p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1230,f304])).
fof(f1230,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | ~p(s(bool,X3)) | ~sP10(X3,X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(superposition,[],[f518,f881])).
fof(f1236,plain,(
  ( ! [X0,X1] : (~sP10(X1,X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ~p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1229,f304])).
fof(f1229,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP10(X1,X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(superposition,[],[f518,f586])).
fof(f1228,plain,(
  ~sP10('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f540,f304,f518])).
fof(f1212,plain,(
  sP11('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f572,f304,f540,f517])).
fof(f1213,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f581,f304,f540,f517])).
fof(f1209,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0',X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f982])).
fof(f1200,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,'F_0')) ) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f981])).
fof(f1191,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0',X0)) ) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f980])).
fof(f1185,plain,(
  ( ! [X2,X3] : (~sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3,X2) | p(s(bool,X3)) | p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1179,f304])).
fof(f1179,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | p(s(bool,X3)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3,X2)) ) | $spl3),
  inference(superposition,[],[f508,f881])).
fof(f1184,plain,(
  ( ! [X0,X1] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1178,f304])).
fof(f1178,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(superposition,[],[f508,f586])).
fof(f1171,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,'T_0')) ) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f979])).
fof(f1158,plain,(
  ~sP9('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1145,f496])).
fof(f1154,plain,(
  ( ! [X2,X3] : (~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X2,X3) | p(s(bool,X3)) | p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1147,f304])).
fof(f1147,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | p(s(bool,X3)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X2,X3)) ) | $spl3),
  inference(superposition,[],[f501,f881])).
fof(f1153,plain,(
  ( ! [X0,X1] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1146,f304])).
fof(f1146,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(superposition,[],[f501,f586])).
fof(f1145,plain,(
  ~sP8('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f304,f501])).
fof(f1138,plain,(
  sP1('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f977])).
fof(f1133,plain,(
  sP9('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f568,f540,f540,f500])).
fof(f1134,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f579,f540,f540,f500])).
fof(f1128,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f976])).
fof(f1107,plain,(
  ( ! [X2,X3] : (~sP7(X3,X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | p(s(bool,X3)) | ~p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1101,f304])).
fof(f1101,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X2)) | p(s(bool,X3)) | ~sP7(X3,X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(superposition,[],[f493,f881])).
fof(f1106,plain,(
  ( ! [X0,X1] : (~sP7(X1,X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1100,f304])).
fof(f1100,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1)) | ~sP7(X1,X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(superposition,[],[f493,f586])).
fof(f1091,plain,(
  sP4('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f941,f456])).
fof(f1078,plain,(
  ~sP7('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1065,f477])).
fof(f1074,plain,(
  ( ! [X2,X3] : (~sP6(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3) | p(s(bool,X3)) | ~p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1067,f304])).
fof(f1067,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X2)) | p(s(bool,X3)) | ~sP6(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3)) ) | $spl3),
  inference(superposition,[],[f484,f881])).
fof(f1073,plain,(
  ( ! [X0,X1] : (~sP6(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1066,f304])).
fof(f1066,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1)) | ~sP6(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(superposition,[],[f484,f586])).
fof(f1065,plain,(
  ~sP6('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f304,f304,f484])).
fof(f1052,plain,(
  sP7('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f560,f304,f304,f480])).
fof(f1053,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f561,f304,f304,f480])).
fof(f1048,plain,(
  ~sP5('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1036,f454])).
fof(f1036,plain,(
  ~sP2('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f540,f469])).
fof(f1029,plain,(
  ~sP5('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1016,f455])).
fof(f1025,plain,(
  ( ! [X2,X3] : (~sP3(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3) | p(s(bool,X3)) | ~p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f1018,f304])).
fof(f1018,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X2)) | p(s(bool,X3)) | ~sP3(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3)) ) | $spl3),
  inference(superposition,[],[f465,f881])).
fof(f1024,plain,(
  ( ! [X0,X1] : (~sP3(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f1017,f304])).
fof(f1017,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1)) | ~sP3(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(superposition,[],[f465,f586])).
fof(f1016,plain,(
  ~sP3('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f304,f304,f465])).
fof(f1003,plain,(
  ( ! [X2,X3] : (~sP4(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3) | p(s(bool,X3)) | ~p(s(bool,X2))) ) | $spl3),
  inference(subsumption_resolution,[],[f996,f304])).
fof(f996,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X2)) | p(s(bool,X3)) | ~sP4(X2,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X3)) ) | $spl3),
  inference(superposition,[],[f461,f881])).
fof(f1002,plain,(
  ( ! [X0,X1] : (~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f995,f304])).
fof(f995,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1)) | ~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(superposition,[],[f461,f586])).
fof(f994,plain,(
  ~sP4('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f304,f304,f461])).
fof(f987,plain,(
  ( ! [X23] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X23)) ) | $spl3),
  inference(subsumption_resolution,[],[f966,f304])).
fof(f966,plain,(
  ( ! [X23] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X23)) ) | $spl3),
  inference(superposition,[],[f694,f881])).
fof(f986,plain,(
  ( ! [X22] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X22)) ) | $spl3),
  inference(subsumption_resolution,[],[f965,f304])).
fof(f965,plain,(
  ( ! [X22] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X22)) ) | $spl3),
  inference(superposition,[],[f662,f881])).
fof(f985,plain,(
  ( ! [X21] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X21,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(subsumption_resolution,[],[f964,f304])).
fof(f964,plain,(
  ( ! [X21] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X21,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(superposition,[],[f657,f881])).
fof(f984,plain,(
  ( ! [X19,X20] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X19,X20) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X19,X20)) ) | $spl3),
  inference(subsumption_resolution,[],[f963,f304])).
fof(f963,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X19,X20) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X19,X20)) ) | $spl3),
  inference(superposition,[],[f529,f881])).
fof(f983,plain,(
  ( ! [X17,X18] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X17,X18) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X17,X18)) ) | $spl3),
  inference(subsumption_resolution,[],[f962,f304])).
fof(f962,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X17,X18) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X17,X18)) ) | $spl3),
  inference(superposition,[],[f528,f881])).
fof(f982,plain,(
  ( ! [X15,X16] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X15,X16) | ~p(s(bool,X15))) ) | $spl3),
  inference(subsumption_resolution,[],[f961,f304])).
fof(f961,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X15,X16)) ) | $spl3),
  inference(superposition,[],[f524,f881])).
fof(f981,plain,(
  ( ! [X14,X13] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X14,X13) | p(s(bool,X13))) ) | $spl3),
  inference(subsumption_resolution,[],[f960,f304])).
fof(f960,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | p(s(bool,X13)) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X14,X13)) ) | $spl3),
  inference(superposition,[],[f523,f881])).
fof(f980,plain,(
  ( ! [X12,X11] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X11,X12) | ~p(s(bool,X11))) ) | $spl3),
  inference(subsumption_resolution,[],[f959,f304])).
fof(f959,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X11,X12)) ) | $spl3),
  inference(superposition,[],[f507,f881])).
fof(f979,plain,(
  ( ! [X10,X9] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X10,X9) | ~p(s(bool,X9))) ) | $spl3),
  inference(subsumption_resolution,[],[f958,f304])).
fof(f958,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X10,X9)) ) | $spl3),
  inference(superposition,[],[f506,f881])).
fof(f978,plain,(
  ( ! [X8,X7] : (~sP5(X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X8) | p(s(bool,X8)) | ~p(s(bool,X7))) ) | $spl3),
  inference(subsumption_resolution,[],[f957,f304])).
fof(f957,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | p(s(bool,X8)) | ~sP5(X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X8)) ) | $spl3),
  inference(superposition,[],[f457,f881])).
fof(f977,plain,(
  ( ! [X6] : (sP1(X6,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | p(s(bool,X6))) ) | $spl3),
  inference(subsumption_resolution,[],[f956,f304])).
fof(f956,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(superposition,[],[f431,f881])).
fof(f976,plain,(
  ( ! [X5] : (sP1('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X5) | p(s(bool,X5))) ) | $spl3),
  inference(subsumption_resolution,[],[f955,f304])).
fof(f955,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X5)) ) | $spl3),
  inference(superposition,[],[f428,f881])).
fof(f975,plain,(
  ( ! [X4] : (sP0('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X4)) ) | $spl3),
  inference(subsumption_resolution,[],[f954,f304])).
fof(f954,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | sP0('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X4)) ) | $spl3),
  inference(superposition,[],[f413,f881])).
fof(f974,plain,(
  ( ! [X3] : (sP0(X3,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(subsumption_resolution,[],[f953,f304])).
fof(f953,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | sP0(X3,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | $spl3),
  inference(superposition,[],[f412,f881])).
fof(f940,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f881,f476])).
fof(f941,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f881,f474])).
fof(f942,plain,(
  ~sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f881,f476])).
fof(f943,plain,(
  sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f881,f474])).
fof(f938,plain,(
  ( ! [X0,X1] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f934,f304])).
fof(f934,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1)) | ~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(superposition,[],[f457,f586])).
fof(f929,plain,(
  sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f887,f454])).
fof(f909,plain,(
  sP2('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f884,f454])).
fof(f898,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f893,f475])).
fof(f899,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f893,f473])).
fof(f901,plain,(
  ~sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f893,f475])).
fof(f902,plain,(
  sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f893,f473])).
fof(f903,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f893,f390])).
fof(f893,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl3),
  inference(backward_demodulation,[],[f881,f303])).
fof(f881,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f880,f313])).
fof(f883,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f304,f880,f475])).
fof(f884,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0') | $spl3),
  inference(unit_resulting_resolution,[],[f540,f880,f473])).
fof(f886,plain,(
  ~sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f304,f880,f475])).
fof(f887,plain,(
  sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f880,f473])).
fof(f888,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | $spl3),
  inference(unit_resulting_resolution,[],[f540,f880,f387])).
fof(f872,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))),
  inference(unit_resulting_resolution,[],[f304,f303,f475])).
fof(f874,plain,(
  ~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))),
  inference(unit_resulting_resolution,[],[f304,f303,f475])).
fof(f875,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))),
  inference(unit_resulting_resolution,[],[f540,f303,f473])).
fof(f864,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0')),
  inference(unit_resulting_resolution,[],[f540,f586,f476])).
fof(f866,plain,(
  ~sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f540,f586,f476])).
fof(f855,plain,(
  ~sP5('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f582,f475])).
fof(f857,plain,(
  ~sP5('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f304,f582,f475])).
fof(f844,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0')),
  inference(unit_resulting_resolution,[],[f304,f586,f474])).
fof(f845,plain,(
  sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f304,f586,f474])).
fof(f836,plain,(
  sP5('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f540,f582,f473])).
fof(f837,plain,(
  sP5('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f582,f473])).
fof(f816,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f812,f540])).
fof(f812,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f387,f313])).
fof(f749,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(subsumption_resolution,[],[f748,f304])).
fof(f748,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(superposition,[],[f694,f586])).
fof(f747,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f694])).
fof(f739,plain,(
  ( ! [X0,X1] : (sP7('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f577,f540,f530])).
fof(f741,plain,(
  ( ! [X0,X1] : (sP7('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f578,f540,f530])).
fof(f731,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(subsumption_resolution,[],[f730,f304])).
fof(f730,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(superposition,[],[f529,f586])).
fof(f727,plain,(
  ( ! [X0] : (sP9('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f565,f304,f529])).
fof(f729,plain,(
  ( ! [X0] : (sP9('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(unit_resulting_resolution,[],[f567,f304,f529])).
fof(f718,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f683])).
fof(f715,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(subsumption_resolution,[],[f714,f304])).
fof(f714,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(superposition,[],[f528,f586])).
fof(f711,plain,(
  ( ! [X0,X1] : (sP11('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f580,f304,f528])).
fof(f713,plain,(
  ( ! [X0] : (sP11('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(unit_resulting_resolution,[],[f571,f304,f528])).
fof(f694,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(subsumption_resolution,[],[f693,f304])).
fof(f693,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(superposition,[],[f524,f586])).
fof(f692,plain,(
  ( ! [X0] : (sP11('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f304,f524])).
fof(f689,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(subsumption_resolution,[],[f688,f304])).
fof(f688,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(superposition,[],[f662,f586])).
fof(f687,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f662])).
fof(f683,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f682,f304])).
fof(f682,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(superposition,[],[f523,f586])).
fof(f681,plain,(
  ( ! [X0] : (sP11('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f304,f523])).
fof(f673,plain,(
  ( ! [X0] : (~sP11('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f540,f512])).
fof(f672,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(subsumption_resolution,[],[f671,f304])).
fof(f671,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(superposition,[],[f657,f586])).
fof(f670,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f657])).
fof(f669,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f540,f511])).
fof(f662,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(subsumption_resolution,[],[f661,f304])).
fof(f661,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(superposition,[],[f507,f586])).
fof(f660,plain,(
  ( ! [X0] : (sP9('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f304,f507])).
fof(f657,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(subsumption_resolution,[],[f656,f304])).
fof(f656,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1,X0)) )),
  inference(superposition,[],[f506,f586])).
fof(f655,plain,(
  ( ! [X0] : (sP9('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f304,f506])).
fof(f652,plain,(
  ( ! [X0] : (~sP9('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f540,f495])).
fof(f648,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f540,f494])).
fof(f647,plain,(
  ( ! [X0] : (sP7('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f540,f540,f489])).
fof(f641,plain,(
  ( ! [X0] : (sP7('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f540,f488])).
fof(f638,plain,(
  ( ! [X0] : (~sP7('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f540,f479])).
fof(f635,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f304,f540,f478])).
fof(f634,plain,(
  sP1('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))),
  inference(unit_resulting_resolution,[],[f540,f620])).
fof(f629,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f541])).
fof(f620,plain,(
  ( ! [X0] : (sP1(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f619,f304])).
fof(f619,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(superposition,[],[f431,f586])).
fof(f618,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f540,f304,f431])).
fof(f615,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')),
  inference(unit_resulting_resolution,[],[f540,f612])).
fof(f612,plain,(
  ( ! [X0] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f611,f304])).
fof(f611,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(superposition,[],[f428,f586])).
fof(f610,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f304,f428])).
fof(f607,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f304,f304,f427])).
fof(f606,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f540,f540,f426])).
fof(f583,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f382,f325])).
fof(f573,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f382,f463])).
fof(f574,plain,(
  ( ! [X2,X0,X1] : (sP4('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f382,f464])).
fof(f575,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f382,f467])).
fof(f576,plain,(
  ( ! [X2,X0,X1] : (sP3('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f382,f468])).
fof(f577,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f382,f486])).
fof(f578,plain,(
  ( ! [X2,X0,X1] : (sP6('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f382,f487])).
fof(f579,plain,(
  ( ! [X2,X0,X1] : (sP8('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f382,f504])).
fof(f580,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f382,f519])).
fof(f581,plain,(
  ( ! [X2,X0,X1] : (sP10('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f382,f521])).
fof(f572,plain,(
  ( ! [X0,X1] : (sP10('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f540,f521])).
fof(f570,plain,(
  ( ! [X0,X1] : (sP10(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f304,f520])).
fof(f571,plain,(
  ( ! [X0,X1] : (sP10(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(unit_resulting_resolution,[],[f302,f520])).
fof(f569,plain,(
  ( ! [X0,X1] : (sP10(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f540,f519])).
fof(f568,plain,(
  ( ! [X0,X1] : (sP8('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f540,f504])).
fof(f566,plain,(
  ( ! [X0,X1] : (sP8(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f304,f503])).
fof(f567,plain,(
  ( ! [X0,X1] : (sP8(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(unit_resulting_resolution,[],[f302,f503])).
fof(f564,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f502])).
fof(f565,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f302,f502])).
fof(f563,plain,(
  ( ! [X0,X1] : (sP6('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f540,f487])).
fof(f562,plain,(
  ( ! [X0,X1] : (sP6(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f540,f486])).
fof(f560,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f485])).
fof(f561,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f302,f485])).
fof(f558,plain,(
  ( ! [X0,X1] : (sP2('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f304,f472])).
fof(f559,plain,(
  ( ! [X0,X1] : (sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f302,f472])).
fof(f556,plain,(
  ( ! [X0,X1] : (sP2(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f304,f471])).
fof(f557,plain,(
  ( ! [X0,X1] : (sP2(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) )),
  inference(unit_resulting_resolution,[],[f302,f471])).
fof(f554,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f470])).
fof(f555,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f302,f470])).
fof(f553,plain,(
  ( ! [X0,X1] : (sP3('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f540,f468])).
fof(f552,plain,(
  ( ! [X0,X1] : (sP3(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f540,f467])).
fof(f550,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f466])).
fof(f551,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f302,f466])).
fof(f549,plain,(
  ( ! [X0,X1] : (sP4('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f540,f464])).
fof(f548,plain,(
  ( ! [X0,X1] : (sP4(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f540,f463])).
fof(f546,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f462])).
fof(f547,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f302,f462])).
fof(f544,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f304,f413])).
fof(f545,plain,(
  ( ! [X0] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) )),
  inference(unit_resulting_resolution,[],[f302,f413])).
fof(f542,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f304,f412])).
fof(f543,plain,(
  ( ! [X0] : (sP0(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) )),
  inference(unit_resulting_resolution,[],[f302,f412])).
fof(f522,plain,(
  ( ! [X2,X0,X1] : (sP11(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f301])).
fof(f301,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP11(X2,X0,X1)) & (~sP11(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f300])).
fof(f300,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP11(X2,X0,X1)) & (~sP11(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP11(X2,X0,X1))),
  inference(definition_folding,[],[f184,f201,f200])).
fof(f200,plain,(
  ! [X2,X0,X1] : (sP10(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f201,plain,(
  ! [X2,X0,X1] : (sP11(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f184,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X18,X17,X16] : ((p(s(bool,X16)) <=> (p(s(bool,X17)) => p(s(bool,X18)))) <=> ((p(s(bool,X16)) | p(s(bool,X17))) & (p(s(bool,X16)) | ~p(s(bool,X18))) & (~p(s(bool,X17)) | p(s(bool,X18)) | ~p(s(bool,X16)))))),
  file('thm.int_arith.lt_justify_multiplication','thm.sat.sat_27_prove_ltb')).
fof(f523,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f301])).
fof(f524,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f301])).
fof(f525,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f301])).
fof(f518,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~sP10(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f299])).
fof(f299,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP10(X0,X1,X2)))),
  inference(rectify,[],[f298])).
fof(f298,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP10(X2,X0,X1)))),
  inference(flattening,[],[f297])).
fof(f297,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP10(X2,X0,X1)))),
  inference(nnf_transformation,[],[f200])).
fof(f519,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f299])).
fof(f520,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f299])).
fof(f521,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f299])).
fof(f511,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f296])).
fof(f296,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP10(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP10(X0,X1,X2) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f295])).
fof(f295,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP10(X2,X0,X1) | sP11(X2,X0,X1)))),
  inference(flattening,[],[f294])).
fof(f294,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP10(X2,X0,X1)) | sP11(X2,X0,X1)))),
  inference(nnf_transformation,[],[f201])).
fof(f512,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f296])).
fof(f513,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | sP10(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f296])).
fof(f528,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP10(X0,X1,X2) | sP11(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f514])).
fof(f514,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f296])).
fof(f515,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f296])).
fof(f516,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f296])).
fof(f517,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f296])).
fof(f505,plain,(
  ( ! [X2,X0,X1] : (sP9(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f292])).
fof(f292,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP9(X2,X0,X1))),
  inference(definition_folding,[],[f147,f198,f197])).
fof(f197,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f198,plain,(
  ! [X2,X0,X1] : (sP9(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f147,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X18,X17,X16] : ((p(s(bool,X16)) <=> (p(s(bool,X17)) | p(s(bool,X18)))) <=> ((p(s(bool,X16)) | ~p(s(bool,X17))) & (p(s(bool,X16)) | ~p(s(bool,X18))) & (p(s(bool,X17)) | p(s(bool,X18)) | ~p(s(bool,X16)))))),
  file('thm.int_arith.lt_justify_multiplication','thm.sat.sat_25_prove_ltb')).
fof(f506,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f293])).
fof(f507,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f293])).
fof(f508,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)) | ~sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f293])).
fof(f501,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f290])).
fof(f290,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f289])).
fof(f289,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f197])).
fof(f502,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f291])).
fof(f503,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f291])).
fof(f504,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f291])).
fof(f494,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f288])).
fof(f288,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP8(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f287])).
fof(f287,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1) | sP9(X2,X0,X1)))),
  inference(flattening,[],[f286])).
fof(f286,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1)) | sP9(X2,X0,X1)))),
  inference(nnf_transformation,[],[f198])).
fof(f495,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f288])).
fof(f496,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f288])).
fof(f529,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f497])).
fof(f497,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f288])).
fof(f498,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f288])).
fof(f499,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f288])).
fof(f500,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f288])).
fof(f488,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f285])).
fof(f285,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f284])).
fof(f284,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP7(X2,X0,X1))),
  inference(definition_folding,[],[f145,f195,f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : (sP6(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f195,plain,(
  ! [X2,X0,X1] : (sP7(X2,X0,X1) <=> (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f145,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X18,X17,X16] : ((p(s(bool,X16)) <=> (p(s(bool,X17)) & p(s(bool,X18)))) <=> ((p(s(bool,X16)) | ~p(s(bool,X17)) | ~p(s(bool,X18))) & (p(s(bool,X17)) | ~p(s(bool,X16))) & (p(s(bool,X18)) | ~p(s(bool,X16)))))),
  file('thm.int_arith.lt_justify_multiplication','thm.sat.sat_23_prove_ltb')).
fof(f489,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f285])).
fof(f490,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f285])).
fof(f493,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f285])).
fof(f484,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f283])).
fof(f283,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(flattening,[],[f282])).
fof(f282,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(nnf_transformation,[],[f194])).
fof(f485,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f283])).
fof(f486,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f283])).
fof(f487,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f283])).
fof(f477,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f281])).
fof(f281,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (sP6(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP6(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f280])).
fof(f280,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP6(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP7(X2,X0,X1)))),
  inference(flattening,[],[f279])).
fof(f279,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP6(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP7(X2,X0,X1)))),
  inference(nnf_transformation,[],[f195])).
fof(f478,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f281])).
fof(f479,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f281])).
fof(f480,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f281])).
fof(f530,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0)) | ~sP6(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f483])).
fof(f483,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f281])).
fof(f474,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f278])).
fof(f475,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f278])).
fof(f469,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f277])).
fof(f277,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(flattening,[],[f276])).
fof(f276,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(nnf_transformation,[],[f189])).
fof(f470,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f277])).
fof(f471,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f277])).
fof(f472,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f277])).
fof(f465,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP3(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f275])).
fof(f275,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f274])).
fof(f274,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(flattening,[],[f273])).
fof(f273,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(nnf_transformation,[],[f190])).
fof(f466,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f275])).
fof(f467,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f275])).
fof(f468,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f275])).
fof(f461,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f272])).
fof(f272,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f271])).
fof(f271,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(flattening,[],[f270])).
fof(f270,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(nnf_transformation,[],[f191])).
fof(f462,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f272])).
fof(f463,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f272])).
fof(f464,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f272])).
fof(f454,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (sP2(X2,X1,X0) & sP3(X1,X2,X0) & sP4(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP2(X2,X1,X0) | ~sP3(X1,X2,X0) | ~sP4(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f268])).
fof(f268,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP5(X2,X1,X0)))),
  inference(flattening,[],[f267])).
fof(f267,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP5(X2,X1,X0)))),
  inference(nnf_transformation,[],[f192])).
fof(f455,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP3(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f269])).
fof(f456,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP4(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f269])).
fof(f457,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f269])).
fof(f458,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | sP5(X0,X1,X2) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | ~sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f269])).
fof(f459,plain,(
  ( ! [X2,X0,X1] : (~sP3(X1,X2,X0) | p(s(bool,X1)) | ~sP4(X0,X2,X1) | sP5(X0,X1,X2) | ~sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f269])).
fof(f460,plain,(
  ( ! [X2,X0,X1] : (~sP3(X1,X2,X0) | p(s(bool,X0)) | ~sP4(X0,X2,X1) | sP5(X0,X1,X2) | ~sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f269])).
fof(f444,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK15(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK15(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f264])).
fof(f264,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK15(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK15(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.int_arith.lt_justify_multiplication',aHL_EXT)).
fof(f426,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f257])).
fof(f257,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f256])).
fof(f256,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f427,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f258])).
fof(f428,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f258])).
fof(f431,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f258])).
fof(f541,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f411,f540])).
fof(f411,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f251])).
fof(f251,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f250])).
fof(f250,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f412,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f251])).
fof(f413,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f251])).
fof(f387,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f166])).
fof(f51386,plain,(
  $false | ($spl0 | $spl3 | $spl70)),
  inference(global_subsumption,[],[f24717,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51385,plain,(
  $false | ($spl0 | $spl3 | $spl72)),
  inference(global_subsumption,[],[f24718,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51384,plain,(
  $false | ($spl0 | $spl3 | $spl78)),
  inference(global_subsumption,[],[f24725,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51383,plain,(
  $false | ($spl0 | $spl3 | $spl80)),
  inference(global_subsumption,[],[f24732,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51382,plain,(
  $false | ($spl0 | $spl3 | $spl82)),
  inference(global_subsumption,[],[f24733,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51381,plain,(
  $false | ($spl0 | $spl3 | $spl84)),
  inference(global_subsumption,[],[f24734,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51380,plain,(
  $false | ($spl0 | $spl3 | $spl86)),
  inference(global_subsumption,[],[f24735,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51379,plain,(
  $false | ($spl0 | $spl3 | $spl88)),
  inference(global_subsumption,[],[f24743,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51378,plain,(
  $false | ($spl0 | $spl3 | $spl90)),
  inference(global_subsumption,[],[f24750,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51377,plain,(
  $false | ($spl0 | $spl3 | $spl92)),
  inference(global_subsumption,[],[f24761,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51376,plain,(
  $false | ($spl0 | $spl3)),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158,f51375])).
fof(f51374,plain,(
  $false | ($spl0 | $spl3)),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f880,f888,f887,f886,f884,f883,f881,f893,f903,f902,f901,f899,f898,f909,f929,f938,f943,f942,f941,f940,f974,f975,f976,f977,f978,f979,f980,f981,f982,f983,f984,f985,f986,f987,f994,f1002,f1003,f1016,f1024,f1025,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1074,f1078,f1091,f1106,f1107,f1128,f1134,f1133,f1138,f1145,f1153,f1154,f1158,f1171,f1184,f1185,f1191,f1200,f1209,f1213,f1212,f1228,f1236,f1237,f1241,f1255,f1274,f1275,f1281,f1301,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1309,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1489,f1499,f1545,f1555,f1585,f1595,f1612,f1624,f1684,f1687,f1699,f1748,f1766,f1771,f1769,f1794,f1792,f1799,f1815,f1814,f1813,f1812,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2072,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3713,f3777,f3850,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f4156,f4210,f4211,f4212,f4213,f4214,f4298,f4484,f4657,f4656,f4655,f4654,f4709,f4713,f4714,f4741,f4763,f4846,f4845,f4839,f4838,f4869,f4889,f4895,f5882,f6150,f6145,f6142,f6139,f6138,f6137,f6134,f6131,f6128,f6125,f6122,f6119,f6118,f6117,f6116,f6115,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5963,f5962,f5961,f5960,f5959,f5958,f5957,f5954,f5953,f5952,f5951,f5950,f5949,f5948,f5946,f5945,f5944,f5943,f5942,f5941,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7127,f7129,f7131,f7133,f7134,f7196,f7198,f7200,f7202,f7203,f7852,f7851,f7809,f7808,f7857,f7862,f7920,f7919,f7918,f7917,f8004,f8009,f8010,f8121,f8122,f8125,f8127,f8281,f8285,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8529,f9845,f9851,f9853,f9855,f9882,f9938,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f15648,f15460,f15446,f15444,f15412,f12029,f15996,f12359,f16318,f16320,f16326,f16328,f12723,f16341,f16356,f16357,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f13190,f13881,f13941,f7923,f7692,f4449,f1901,f1487,f896,f602,f540,f330,f329,f1417,f2678,f4300,f16340,f16429,f11258,f11227,f11192,f11041,f10983,f10886,f10019,f9978,f3906,f5496,f16426,f5721,f1657,f16424,f5772,f5770,f5719,f1710,f5886,f5888,f5609,f1544,f5611,f16418,f3987,f5881,f5668,f1606,f5670,f16416,f16428,f16427,f16425,f16421,f16411,f16408,f11160,f11159,f5885,f5549,f5531,f5498,f5478,f3907,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f4625,f4624,f4623,f4622,f4176,f4140,f4103,f4066,f6291,f6282,f6268,f6259,f5271,f5262,f16407,f16406,f16405,f16404,f12065,f12024,f11987,f11913,f9854,f9817,f8528,f8484,f8283,f7188,f7119,f7041,f4652,f4651,f4650,f4649,f4648,f4647,f4646,f4645,f4644,f4643,f4642,f4641,f4640,f4639,f4638,f4637,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4629,f4627,f4189,f4153,f4116,f4079,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f1434,f445,f4063,f4100,f4137,f4173,f5114,f16423,f16422,f16420,f16419,f16417,f16415,f16414,f16413,f16412,f16410,f16409,f16402,f16401,f16400,f16399,f11158,f11157,f6293,f6270,f5448,f5427,f5321,f5302,f5273,f4621,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f16403,f16398,f12062,f12019,f11982,f11908,f11334,f11297,f9813,f8480,f7184,f7115,f7037,f5883,f5138,f5136,f5135,f4620,f4542,f4027,f4026,f4025,f4024,f4023,f4022,f4021,f4020,f4019,f4018,f4017,f4016,f4015,f4014,f4013,f4012,f4011,f4010,f4009,f4008,f4007,f4006,f4005,f3996,f3995,f3994,f3993,f3992,f3990,f3988,f2665,f1469,f1432,f447,f16338,f13192,f12907,f12725,f12361,f4728,f2365,f2214,f1488,f13842,f13557,f13555,f13375,f13373,f13193,f12908,f12906,f12726,f12724,f12544,f12362,f24817,f24818,f4717,f4716,f4715,f24819,f13840,f13191,f12542,f12360,f29378,f21711,f878,f33231,f33230,f33229,f33228,f33321,f33331,f33337,f33338,f33339,f33340,f33341,f33342,f33343,f33344,f33345,f33346,f33347,f33348,f33349,f33350,f33351,f33352,f33353,f33354,f33355,f33356,f33357,f33358,f33359,f33360,f33361,f34649,f34682,f34731,f34823,f34834,f34858,f34882,f34916,f34984,f35068,f35081,f35242,f35337,f35357,f35378,f35445,f35466,f35497,f35505,f35542,f35541,f35538,f35578,f35577,f35575,f35574,f35646,f35753,f35767,f35768,f35769,f35770,f35775,f35777,f35779,f35784,f35786,f35788,f35789,f35790,f35791,f35792,f35793,f35794,f35795,f35796,f35797,f35798,f35799,f35800,f35801,f35802,f35803,f35804,f35805,f35806,f35807,f35808,f35809,f35810,f35811,f35812,f35813,f35822,f35827,f35931,f35934,f35935,f35943,f35989,f36028,f36093,f37304,f37332,f37386,f37412,f37461,f37533,f39213,f39239,f39240,f39242,f39311,f39352,f39380,f39407,f39461,f39462,f39463,f39435,f39464,f39465,f39438,f39466,f39468,f39502,f39524,f39693,f39751,f39778,f39777,f39776,f39774,f39773,f39772,f39771,f39768,f29342,f40407,f40126,f40129,f40134,f40491,f40261,f41151,f40657,f41146,f41144,f41142,f41140,f41197,f41136,f40678,f40703,f41243,f40836,f41291,f41305,f41306,f41307,f41308,f41322,f41323,f41325,f41328,f41329,f41330,f41331,f41332,f41333,f41334,f41335,f41336,f41337,f41338,f41339,f41340,f41341,f41342,f41343,f41344,f41345,f41346,f41347,f41348,f41349,f41350,f41351,f41352,f41471,f41501,f41502,f41506,f41580,f41623,f41592,f41624,f41632,f41691,f41734,f41703,f41735,f41743,f41767,f41788,f41818,f41834,f41860,f41907,f42023,f42051,f42073,f42660,f42659,f42658,f42657,f42656,f42655,f42653,f42652,f42650,f43239,f42739,f43212,f43210,f43281,f43323,f42918,f43371,f43384,f43387,f43388,f43389,f43390,f43392,f43393,f43394,f43395,f43396,f43398,f43401,f43402,f43403,f43404,f43405,f43406,f43407,f43408,f43409,f43410,f43411,f43412,f43413,f43414,f43415,f43416,f43417,f43418,f43419,f43420,f43421,f43422,f43836,f43828,f43814,f43812,f43810,f43904,f43639,f43953,f43959,f43961,f44253,f44254,f44255,f44256,f44220,f44257,f44258,f44259,f44225,f44260,f44263,f46359,f46357,f46456,f46466,f46545,f46614,f46702,f46779,f46780,f46788,f46789,f46791,f46792,f46793,f46797,f46798,f46799,f46808,f46809,f46816,f46825,f46826,f46827,f46832,f46833,f46835,f46836,f46838,f46839,f46840,f46841,f46842,f46844,f46845,f46846,f46847,f46848,f46849,f46850,f46851,f46852,f46853,f46854,f46855,f46856,f46857,f46858,f46859,f46860,f46861,f46862,f46863,f46864,f46865,f46866,f46867,f46872,f46884,f46885,f46886,f46889,f46890,f46891,f46892,f46893,f46894,f46897,f46996,f46903,f46997,f46905,f46906,f46907,f46908,f46909,f46910,f46912,f46915,f46916,f46917,f46918,f46919,f46921,f46927,f46940,f46941,f46942,f46943,f46944,f46949,f46961,f46962,f46963,f46966,f46967,f46968,f46969,f46970,f46971,f46974,f47315,f47364,f47365,f47330,f47374,f47545,f47594,f47595,f47560,f47604,f47694,f47695,f47671,f47696,f47699,f47775,f47776,f47752,f47777,f47780,f47873,f47874,f47840,f47875,f47876,f47845,f47877,f47880,f49519,f49729,f49974,f49975,f49933,f49976,f49977,f49938,f49978,f49940,f49979,f49980,f49944,f49981,f49984,f50182,f50235,f50237,f50238,f50241,f50291,f50292,f50267,f50293,f50296,f50327,f50397,f50404,f50339,f50414,f50416,f50431,f50433,f50374,f50435,f50515,f50455,f50516,f50518,f50525,f50527,f50540,f50542,f50490,f50544,f50626,f50566,f50635,f50637,f50648,f50651,f50653,f50601,f50655,f50659,f50664,f50735,f50742,f50677,f50745,f50752,f50754,f50769,f50771,f50712,f50773,f50842,f50843,f50818,f50844,f50853,f50927,f50928,f50903,f50929,f50938,f51018,f51019,f50984,f51020,f51021,f50989,f51022,f51025,f51135,f51142,f51144,f51076,f51146,f51153,f51107,f51156,f51163,f51165,f35158])).
fof(f51356,plain,(
  ( ! [X15,X16] : (s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl140),
  inference(cnf_transformation,[],[f51356_D])).
fof(f51356_D,plain,(
  ( ! [X15,X16] : (s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X15)) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f51350,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | $spl136),
  inference(cnf_transformation,[],[f51350_D])).
fof(f51350_D,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f51355,plain,(
  ( ! [X15,X16] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(subsumption_resolution,[],[f51232,f540])).
fof(f51232,plain,(
  ( ! [X15,X16] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(superposition,[],[f2674,f36098])).
fof(f36098,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl2),
  inference(unit_resulting_resolution,[],[f33709,f4542])).
fof(f33709,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl2),
  inference(subsumption_resolution,[],[f33494,f583])).
fof(f33494,plain,(
  ( ! [X147] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X147),s('type.integer.int',X147)))) ) | $spl2),
  inference(superposition,[],[f583,f33196])).
fof(f33196,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,X0)) ) | $spl2),
  inference(subsumption_resolution,[],[f33121,f582])).
fof(f33121,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f879,f752])).
fof(f51354,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int',X12))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl138),
  inference(cnf_transformation,[],[f51354_D])).
fof(f51354_D,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int',X12))))) | s(bool,'T_0') = s(bool,X11)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f51353,plain,(
  ( ! [X12,X11] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X11) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int',X12))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl2),
  inference(subsumption_resolution,[],[f51230,f540])).
fof(f51230,plain,(
  ( ! [X12,X11] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X11) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int',X12))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl2),
  inference(superposition,[],[f2670,f36098])).
fof(f51348,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl134),
  inference(cnf_transformation,[],[f51348_D])).
fof(f51348_D,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f51347,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X5) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl2),
  inference(subsumption_resolution,[],[f51227,f540])).
fof(f51227,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | s(bool,X5) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl2),
  inference(superposition,[],[f2667,f36098])).
fof(f39799,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl118),
  inference(cnf_transformation,[],[f39799_D])).
fof(f39799_D,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f39800,plain,(
  ( ! [X4,X5,X3] : (s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5) | s(bool,X5) = s(bool,sK15(X3,X4,bool,bool))) ) | $spl120),
  inference(cnf_transformation,[],[f39800_D])).
fof(f39800_D,plain,(
  ( ! [X4,X5,X3] : (s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5) | s(bool,X5) = s(bool,sK15(X3,X4,bool,bool))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f39825,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl131),
  inference(cnf_transformation,[],[f39825_D])).
fof(f39825_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl131),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl131])])).
fof(f39768,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK15(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2364,f752])).
fof(f39823,plain,(
  ( ! [X56] : (s(bool,X56) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X56)) ) | $spl128),
  inference(cnf_transformation,[],[f39823_D])).
fof(f39823_D,plain,(
  ( ! [X56] : (s(bool,X56) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X56)) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f39801,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,X10) = s(bool,sK15(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X7)) ) | $spl65),
  inference(subsumption_resolution,[],[f39769,f7681])).
fof(f39769,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,X10) = s(bool,sK15(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f2364,f752])).
fof(f39803,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,X14) = s(bool,sK15(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X11)) ) | $spl65),
  inference(subsumption_resolution,[],[f39770,f7681])).
fof(f39770,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,X14) = s(bool,sK15(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2364,f752])).
fof(f39771,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK15(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f2364,f752])).
fof(f39826,plain,(
  ( ! [X26,X31] : (s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,X26) = s(bool,X31)) ) | $spl132),
  inference(cnf_transformation,[],[f39826_D])).
fof(f39826_D,plain,(
  ( ! [X26,X31] : (s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,X26) = s(bool,X31)) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f39772,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,X23) = s(bool,sK15(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39773,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X27) = s(fun(bool,bool),X28) | s(bool,X29) = s(bool,sK15(X27,X28,bool,bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X26) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39822,plain,(
  ( ! [X61,X60] : (s(bool,X60) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X61) | s(bool,X60) = s(bool,X61)) ) | $spl126),
  inference(cnf_transformation,[],[f39822_D])).
fof(f39822_D,plain,(
  ( ! [X61,X60] : (s(bool,X60) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X61) | s(bool,X60) = s(bool,X61)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f39774,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s(bool,X32) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X33) = s(fun(bool,bool),X34) | s(bool,X35) = s(bool,sK15(X33,X34,bool,bool)) | s(bool,'T_0') = s(bool,X35) | s(bool,X36) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X32) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39821,plain,(
  ( ! [X66,X62,X67] : (s(bool,X62) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X67) | s(bool,X66) = s(bool,X67) | s(bool,X62) = s(bool,X66)) ) | $spl124),
  inference(cnf_transformation,[],[f39821_D])).
fof(f39821_D,plain,(
  ( ! [X66,X62,X67] : (s(bool,X62) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X67) | s(bool,X66) = s(bool,X67) | s(bool,X62) = s(bool,X66)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f39813,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,X38) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X39) = s(fun(bool,bool),X40) | s(bool,X41) = s(bool,sK15(X39,X40,bool,bool)) | s(bool,'T_0') = s(bool,X41) | s(bool,X38) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) ) | $spl65),
  inference(subsumption_resolution,[],[f39775,f7681])).
fof(f39775,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,X38) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X39) = s(fun(bool,bool),X40) | s(bool,X41) = s(bool,sK15(X39,X40,bool,bool)) | s(bool,'T_0') = s(bool,X41) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39816,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X49) | s(bool,X47) = s(bool,X49) | s(bool,X48) = s(bool,g(s(bool,'T_0')))) ) | $spl122),
  inference(cnf_transformation,[],[f39816_D])).
fof(f39816_D,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X49) | s(bool,X47) = s(bool,X49) | s(bool,X48) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f39776,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X44) = s(fun(bool,bool),X45) | s(bool,X46) = s(bool,sK15(X44,X45,bool,bool)) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,X48) | s(bool,X48) = s(bool,g(s(bool,'T_0'))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39777,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X50) = s(fun(bool,bool),X51) | s(bool,X52) = s(bool,sK15(X50,X51,bool,bool)) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,X53) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39778,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(bool,X56) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X57) = s(fun(bool,bool),X58) | s(bool,X59) = s(bool,sK15(X57,X58,bool,bool)) | s(bool,'T_0') = s(bool,X59) | s(bool,X60) = s(bool,g(s(bool,'T_0'))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39819,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s(bool,X62) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X63) = s(fun(bool,bool),X64) | s(bool,X65) = s(bool,sK15(X63,X64,bool,bool)) | s(bool,'T_0') = s(bool,X65) | s(bool,X62) = s(bool,X66) | s(bool,X66) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) ) | $spl65),
  inference(subsumption_resolution,[],[f39779,f7681])).
fof(f39779,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s(bool,X62) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X63) = s(fun(bool,bool),X64) | s(bool,X65) = s(bool,sK15(X63,X64,bool,bool)) | s(bool,'T_0') = s(bool,X65) | s(bool,X62) = s(bool,X66) | s(bool,X66) = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f2364,f2129])).
fof(f39817,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(fun(bool,bool),X50) = s(fun(bool,bool),X51) | s(bool,X52) = s(bool,sK15(X50,X51,bool,bool)) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,X53) = s(bool,g(s(bool,'T_0')))) ) | $spl61),
  inference(subsumption_resolution,[],[f39777,f28954])).
fof(f28954,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl61),
  inference(unit_resulting_resolution,[],[f304,f582,f4727,f2641])).
fof(f39815,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(fun(bool,bool),X44) = s(fun(bool,bool),X45) | s(bool,X46) = s(bool,sK15(X44,X45,bool,bool)) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,X48) | s(bool,X48) = s(bool,g(s(bool,'T_0'))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) ) | $spl61),
  inference(subsumption_resolution,[],[f39776,f28954])).
fof(f39811,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,sK15(X5,X6,bool,bool)) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,X4) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl61),
  inference(duplicate_literal_removal,[],[f39810])).
fof(f39810,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,sK15(X5,X6,bool,bool)) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,X4) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X4)) ) | $spl61),
  inference(condensation,[],[f39809])).
fof(f39809,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(fun(bool,bool),X27) = s(fun(bool,bool),X28) | s(bool,X29) = s(bool,sK15(X27,X28,bool,bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X26) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl61),
  inference(subsumption_resolution,[],[f39773,f29112])).
fof(f29112,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl61),
  inference(condensation,[],[f29111])).
fof(f29111,plain,(
  ( ! [X12,X13,X11] : (s(bool,X12) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl61),
  inference(subsumption_resolution,[],[f29060,f313])).
fof(f29060,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,X11) | s(bool,X12) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl61),
  inference(superposition,[],[f4727,f2129])).
fof(f39808,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X3) = s(bool,sK15(X4,X5,bool,bool)) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X3) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl61),
  inference(duplicate_literal_removal,[],[f39807])).
fof(f39807,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X3) = s(bool,sK15(X4,X5,bool,bool)) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl61),
  inference(condensation,[],[f39806])).
fof(f39806,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,X23) = s(bool,sK15(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X25)) ) | $spl61),
  inference(subsumption_resolution,[],[f39772,f29112])).
fof(f39805,plain,(
  ( ! [X17,X15,X18,X16] : (s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK15(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X18)) ) | $spl61),
  inference(subsumption_resolution,[],[f39771,f28954])).
fof(f39798,plain,(
  ( ! [X6,X4,X5,X3] : (s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK15(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl61),
  inference(subsumption_resolution,[],[f39768,f28954])).
fof(f33082,plain,(
  ( ! [X10,X9] : (s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK15(X9,X10,bool,fun(bool,bool)))))) ) | $spl114),
  inference(cnf_transformation,[],[f33082_D])).
fof(f33082_D,plain,(
  ( ! [X10,X9] : (s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK15(X9,X10,bool,fun(bool,bool)))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f33083,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11)))) ) | $spl116),
  inference(cnf_transformation,[],[f33083_D])).
fof(f33083_D,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f33079,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11))) | s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK15(X9,X10,bool,fun(bool,bool)))))) ) | $spl62),
  inference(superposition,[],[f1488,f7679])).
fof(f33075,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11))) | s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK15(X9,X10,bool,fun(bool,bool)))))) ) | $spl62),
  inference(superposition,[],[f1488,f7679])).
fof(f4725,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,sK15(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X2,X3,bool,bool)))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4)) ) | $spl58),
  inference(cnf_transformation,[],[f4725_D])).
fof(f4725_D,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,sK15(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X2,X3,bool,bool)))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f24821,plain,(
  ( ! [X835,X837] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(bool,'T_0') = s(bool,X837) | s(bool,X835) = s(bool,X837)) ) | $spl112),
  inference(cnf_transformation,[],[f24821_D])).
fof(f24821_D,plain,(
  ( ! [X835,X837] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(bool,'T_0') = s(bool,X837) | s(bool,X835) = s(bool,X837)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f12360,plain,(
  ( ! [X835,X833,X837,X834,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool)))) | s(bool,X835) = s(bool,X836) | s(bool,'T_0') = s(bool,X836) | s(bool,X837) = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,X837)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f12542,plain,(
  ( ! [X835,X833,X837,X834,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool)))) | s(bool,X836) = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,X836) | s(bool,X835) = s(bool,X837) | s(bool,'T_0') = s(bool,X837)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f24820,plain,(
  ( ! [X802,X800,X799,X803,X801] : (s(fun(bool,bool),X799) = s(fun(bool,bool),X800) | s(bool,X801) = s(bool,sK15(X799,X800,bool,bool)) | s(bool,X801) = s(bool,X802) | s(bool,'T_0') = s(bool,X803) | s(bool,X802) = s(bool,X803) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X799,X800,bool,bool))))) ) | $spl110),
  inference(cnf_transformation,[],[f24820_D])).
fof(f24820_D,plain,(
  ( ! [X802,X800,X799,X803,X801] : (s(fun(bool,bool),X799) = s(fun(bool,bool),X800) | s(bool,X801) = s(bool,sK15(X799,X800,bool,bool)) | s(bool,X801) = s(bool,X802) | s(bool,'T_0') = s(bool,X803) | s(bool,X802) = s(bool,X803) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X799,X800,bool,bool))))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f4727,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl61),
  inference(cnf_transformation,[],[f4727_D])).
fof(f4727_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl61),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl61])])).
fof(f13191,plain,(
  ( ! [X802,X800,X799,X803,X801] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X799) = s(fun(bool,bool),X800) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X799,X800,bool,bool)))) | s(bool,X801) = s(bool,X802) | s(bool,X802) = s(bool,sK15(X799,X800,bool,bool)) | s(bool,X801) = s(bool,X803) | s(bool,'T_0') = s(bool,X803)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f13840,plain,(
  ( ! [X802,X800,X799,X803,X801] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X799) = s(fun(bool,bool),X800) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X799,X800,bool,bool)))) | s(bool,X801) = s(bool,X802) | s(bool,X802) = s(bool,X803) | s(bool,'T_0') = s(bool,X803) | s(bool,X801) = s(bool,sK15(X799,X800,bool,bool))) )),
  inference(superposition,[],[f1488,f2129])).
fof(f24811,plain,(
  ( ! [X833,X834] : (s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool))))) ) | $spl98),
  inference(cnf_transformation,[],[f24811_D])).
fof(f24811_D,plain,(
  ( ! [X833,X834] : (s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f4223,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(cnf_transformation,[],[f4223_D])).
fof(f4223_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f24819,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X0,X1,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool))) ) | $spl3),
  inference(forward_demodulation,[],[f4712,f4449])).
fof(f4712,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X0,X1,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool))) ) | $spl3),
  inference(superposition,[],[f1488,f4298])).
fof(f24815,plain,(
  ( ! [X835] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(bool,'T_0') = s(bool,X835)) ) | $spl106),
  inference(cnf_transformation,[],[f24815_D])).
fof(f24815_D,plain,(
  ( ! [X835] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(bool,'T_0') = s(bool,X835)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f4715,plain,(
  ( ! [X10,X8,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X8,X9,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f1488,f752])).
fof(f4716,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,X13))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X11,X12,bool,bool)))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,sK15(X11,X12,bool,bool))) )),
  inference(superposition,[],[f1488,f752])).
fof(f4717,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X14,X15,bool,bool))) )),
  inference(superposition,[],[f1488,f313])).
fof(f24818,plain,(
  ( ! [X194,X195] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X194) = s(fun(bool,bool),X195) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X194,X195,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X194,X195,bool,bool))) ) | $spl3),
  inference(forward_demodulation,[],[f6406,f896])).
fof(f6406,plain,(
  ( ! [X194,X195] : (s(bool,'F_0') != s(bool,f(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))))) | s(fun(bool,bool),X194) = s(fun(bool,bool),X195) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X194,X195,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X194,X195,bool,bool))) ) | $spl3),
  inference(superposition,[],[f1488,f2072])).
fof(f24817,plain,(
  ( ! [X333,X332] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X332) = s(fun(bool,bool),X333) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X332,X333,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X332,X333,bool,bool))) )),
  inference(forward_demodulation,[],[f6816,f602])).
fof(f6816,plain,(
  ( ! [X333,X332,X334] : (s(bool,'F_0') != s(bool,f(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X334),s('type.integer.int',X334))))) | s(fun(bool,bool),X332) = s(fun(bool,bool),X333) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X332,X333,bool,bool)))) | s(bool,'T_0') = s(bool,sK15(X332,X333,bool,bool))) )),
  inference(superposition,[],[f1488,f2071])).
fof(f4215,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl42),
  inference(cnf_transformation,[],[f4215_D])).
fof(f4215_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f4216,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl44),
  inference(cnf_transformation,[],[f4216_D])).
fof(f4216_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f24816,plain,(
  ( ! [X848,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X844) = s(bool,X848)) ) | $spl108),
  inference(cnf_transformation,[],[f24816_D])).
fof(f24816_D,plain,(
  ( ! [X848,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X844) = s(bool,X848)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f12362,plain,(
  ( ! [X848,X847,X845,X846,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X845) = s(fun(bool,bool),X846) | s(bool,'T_0') = s(bool,sK15(X845,X846,bool,bool)) | s(bool,X844) = s(bool,X847) | s(bool,'T_0') = s(bool,X847) | s(bool,X848) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f12544,plain,(
  ( ! [X848,X847,X845,X846,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X845) = s(fun(bool,bool),X846) | s(bool,'T_0') = s(bool,sK15(X845,X846,bool,bool)) | s(bool,X847) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X847) | s(bool,X844) = s(bool,X848) | s(bool,'T_0') = s(bool,X848)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f24814,plain,(
  ( ! [X833,X837,X834,X836] : (s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,X837) | s(bool,X836) = s(bool,X837) | s(bool,X836) = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool))))) ) | $spl104),
  inference(cnf_transformation,[],[f24814_D])).
fof(f24814_D,plain,(
  ( ! [X833,X837,X834,X836] : (s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,X837) | s(bool,X836) = s(bool,X837) | s(bool,X836) = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool))))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f12724,plain,(
  ( ! [X835,X833,X837,X834,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool)))) | s(bool,X836) = s(bool,sK15(X833,X834,bool,bool)) | s(bool,'T_0') = s(bool,X835) | s(bool,X836) = s(bool,X837) | s(bool,'T_0') = s(bool,X837)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f24813,plain,(
  ( ! [X848,X847] : (s(bool,X847) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X847) = s(bool,X848)) ) | $spl102),
  inference(cnf_transformation,[],[f24813_D])).
fof(f24813_D,plain,(
  ( ! [X848,X847] : (s(bool,X847) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X847) = s(bool,X848)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f4221,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl50),
  inference(cnf_transformation,[],[f4221_D])).
fof(f4221_D,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f12726,plain,(
  ( ! [X848,X847,X845,X846,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X845) = s(fun(bool,bool),X846) | s(bool,'T_0') = s(bool,sK15(X845,X846,bool,bool)) | s(bool,X847) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X844) | s(bool,X847) = s(bool,X848) | s(bool,'T_0') = s(bool,X848)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f24812,plain,(
  ( ! [X835,X837,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(bool,'T_0') = s(bool,X837) | s(bool,X836) = s(bool,X837) | s(bool,X835) = s(bool,X836)) ) | $spl100),
  inference(cnf_transformation,[],[f24812_D])).
fof(f24812_D,plain,(
  ( ! [X835,X837,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(bool,'T_0') = s(bool,X837) | s(bool,X836) = s(bool,X837) | s(bool,X835) = s(bool,X836)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f12906,plain,(
  ( ! [X771,X773,X770,X774,X772] : (s(bool,'F_0') != s(bool,f(s(bool,X772))) | s(fun(bool,bool),X770) = s(fun(bool,bool),X771) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X770,X771,bool,bool)))) | s(bool,X772) = s(bool,X773) | s(bool,'T_0') = s(bool,sK15(X770,X771,bool,bool)) | s(bool,X773) = s(bool,X774) | s(bool,'T_0') = s(bool,X774)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f4220,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl48),
  inference(cnf_transformation,[],[f4220_D])).
fof(f4220_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f24810,plain,(
  ( ! [X848,X847,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X847) = s(bool,X848) | s(bool,X844) = s(bool,X847)) ) | $spl96),
  inference(cnf_transformation,[],[f24810_D])).
fof(f24810_D,plain,(
  ( ! [X848,X847,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X847) = s(bool,X848) | s(bool,X844) = s(bool,X847)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f12908,plain,(
  ( ! [X784,X783,X781,X785,X782] : (s(bool,X781) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X782) = s(fun(bool,bool),X783) | s(bool,'T_0') = s(bool,sK15(X782,X783,bool,bool)) | s(bool,X781) = s(bool,X784) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X784) = s(bool,X785) | s(bool,'T_0') = s(bool,X785)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f24809,plain,(
  ( ! [X814,X812,X813] : (s(bool,X812) = s(bool,X813) | s(bool,X812) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X814) | s(bool,X813) = s(bool,X814)) ) | $spl94),
  inference(cnf_transformation,[],[f24809_D])).
fof(f24809_D,plain,(
  ( ! [X814,X812,X813] : (s(bool,X812) = s(bool,X813) | s(bool,X812) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X814) | s(bool,X813) = s(bool,X814)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f4218,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl47),
  inference(cnf_transformation,[],[f4218_D])).
fof(f4218_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f13193,plain,(
  ( ! [X810,X814,X812,X811,X813] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X810) = s(fun(bool,bool),X811) | s(bool,'T_0') = s(bool,sK15(X810,X811,bool,bool)) | s(bool,X812) = s(bool,X813) | s(bool,X813) = s(bool,g(s(bool,'F_0'))) | s(bool,X812) = s(bool,X814) | s(bool,'T_0') = s(bool,X814)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f13373,plain,(
  ( ! [X835,X833,X837,X834,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool)))) | s(bool,X836) = s(bool,sK15(X833,X834,bool,bool)) | s(bool,X836) = s(bool,X837) | s(bool,'T_0') = s(bool,X837) | s(bool,'T_0') = s(bool,X835)) )),
  inference(superposition,[],[f1488,f2129])).
fof(f13375,plain,(
  ( ! [X848,X847,X845,X846,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X845) = s(fun(bool,bool),X846) | s(bool,'T_0') = s(bool,sK15(X845,X846,bool,bool)) | s(bool,X847) = s(bool,g(s(bool,'F_0'))) | s(bool,X847) = s(bool,X848) | s(bool,'T_0') = s(bool,X848) | s(bool,'T_0') = s(bool,X844)) )),
  inference(superposition,[],[f1487,f2129])).
fof(f13555,plain,(
  ( ! [X835,X833,X837,X834,X836] : (s(bool,'F_0') != s(bool,f(s(bool,X835))) | s(fun(bool,bool),X833) = s(fun(bool,bool),X834) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X833,X834,bool,bool)))) | s(bool,X835) = s(bool,X836) | s(bool,X836) = s(bool,X837) | s(bool,'T_0') = s(bool,X837) | s(bool,'T_0') = s(bool,sK15(X833,X834,bool,bool))) )),
  inference(superposition,[],[f1488,f2129])).
fof(f13557,plain,(
  ( ! [X848,X847,X845,X846,X844] : (s(bool,X844) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X845) = s(fun(bool,bool),X846) | s(bool,'T_0') = s(bool,sK15(X845,X846,bool,bool)) | s(bool,X844) = s(bool,X847) | s(bool,X847) = s(bool,X848) | s(bool,'T_0') = s(bool,X848) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1487,f2129])).
fof(f13842,plain,(
  ( ! [X810,X814,X812,X811,X813] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X810) = s(fun(bool,bool),X811) | s(bool,'T_0') = s(bool,sK15(X810,X811,bool,bool)) | s(bool,X812) = s(bool,X813) | s(bool,X813) = s(bool,X814) | s(bool,'T_0') = s(bool,X814) | s(bool,X812) = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1487,f2129])).
fof(f24734,plain,(
  ( ! [X18] : (s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'F_0') = s(bool,g(s(bool,X18)))) ) | $spl84),
  inference(cnf_transformation,[],[f24734_D])).
fof(f24734_D,plain,(
  ( ! [X18] : (s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'F_0') = s(bool,g(s(bool,X18)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f24492,plain,(
  ( ! [X346,X345] : (s(bool,'T_0') = s(bool,X345) | s(bool,'F_0') = s(bool,g(s(bool,X346))) | s(bool,X346) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f24465])).
fof(f24465,plain,(
  ( ! [X346,X345] : (s(bool,'T_0') = s(bool,X345) | s(bool,'T_0') = s(bool,X345) | s(bool,'F_0') = s(bool,g(s(bool,X346))) | s(bool,X346) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f2072,f9141])).
fof(f9141,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9023,f752])).
fof(f9023,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65)),
  inference(forward_demodulation,[],[f9004,f4449])).
fof(f9004,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl65)),
  inference(unit_resulting_resolution,[],[f304,f4484,f7681,f2641])).
fof(f24733,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X15))) | s(bool,'F_0') = s(bool,g(s(bool,X16)))) ) | $spl82),
  inference(cnf_transformation,[],[f24733_D])).
fof(f24733_D,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X15))) | s(bool,'F_0') = s(bool,g(s(bool,X16)))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f24495,plain,(
  ( ! [X327,X329,X328] : (s(bool,'T_0') = s(bool,X328) | s(bool,'F_0') = s(bool,g(s(bool,X329))) | s(bool,X329) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X327),s('type.integer.int',X327)))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f24459])).
fof(f24459,plain,(
  ( ! [X327,X329,X328] : (s(bool,'T_0') = s(bool,X328) | s(bool,'T_0') = s(bool,X328) | s(bool,'F_0') = s(bool,g(s(bool,X329))) | s(bool,X329) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X327),s('type.integer.int',X327)))) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f2071,f9141])).
fof(f24545,plain,(
  ( ! [X123,X122] : (s(bool,X123) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'T_0') = s(bool,X122) | s(bool,'F_0') = s(bool,g(s(bool,X123)))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f24089])).
fof(f24089,plain,(
  ( ! [X123,X122] : (s(bool,X123) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'T_0') = s(bool,X122) | s(bool,'F_0') = s(bool,g(s(bool,X123))) | s(bool,'T_0') = s(bool,X122)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f2072,f9141])).
fof(f24546,plain,(
  ( ! [X121,X120,X119] : (s(bool,X120) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X121),s('type.integer.int',X121))) | s(bool,'T_0') = s(bool,X119) | s(bool,'F_0') = s(bool,g(s(bool,X120)))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f24088])).
fof(f24088,plain,(
  ( ! [X121,X120,X119] : (s(bool,X120) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X121),s('type.integer.int',X121))) | s(bool,'T_0') = s(bool,X119) | s(bool,'F_0') = s(bool,g(s(bool,X120))) | s(bool,'T_0') = s(bool,X119)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f2071,f9141])).
fof(f16342,plain,(
  ( ! [X4] : (p(s(bool,X4))) ) | $spl66),
  inference(cnf_transformation,[],[f16342_D])).
fof(f16342_D,plain,(
  ( ! [X4] : (p(s(bool,X4))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f24761,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) | $spl92),
  inference(cnf_transformation,[],[f24761_D])).
fof(f24761_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f24760,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) | ($spl3 | $spl65)),
  inference(subsumption_resolution,[],[f24053,f325])).
fof(f24053,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f325,f9141])).
fof(f24732,plain,(
  ( ! [X111,X112] : (s(bool,'F_0') = s(bool,g(s(bool,sK15(X111,X112,bool,bool)))) | s(fun(bool,bool),X111) = s(fun(bool,bool),X112)) ) | $spl80),
  inference(cnf_transformation,[],[f24732_D])).
fof(f24732_D,plain,(
  ( ! [X111,X112] : (s(bool,'F_0') = s(bool,g(s(bool,sK15(X111,X112,bool,bool)))) | s(fun(bool,bool),X111) = s(fun(bool,bool),X112)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f24553,plain,(
  ( ! [X383,X382,X381] : (s(bool,'T_0') = s(bool,X383) | s(fun(bool,bool),X381) = s(fun(bool,bool),X382) | s(bool,'F_0') = s(bool,g(s(bool,sK15(X381,X382,bool,bool))))) ) | ($spl3 | $spl44 | $spl65)),
  inference(duplicate_literal_removal,[],[f24049])).
fof(f24049,plain,(
  ( ! [X383,X382,X381] : (s(bool,'T_0') = s(bool,X383) | s(fun(bool,bool),X381) = s(fun(bool,bool),X382) | s(bool,'F_0') = s(bool,g(s(bool,sK15(X381,X382,bool,bool)))) | s(bool,'T_0') = s(bool,X383)) ) | ($spl3 | $spl44 | $spl65)),
  inference(superposition,[],[f4216,f9141])).
fof(f24750,plain,(
  ( ! [X170] : (sP1(X170,'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X170)))) ) | $spl90),
  inference(cnf_transformation,[],[f24750_D])).
fof(f24750_D,plain,(
  ( ! [X170] : (sP1(X170,'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X170)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f24749,plain,(
  ( ! [X171,X170] : (sP1(X170,'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X170))) | s(bool,'T_0') = s(bool,X171)) ) | ($spl3 | $spl8 | $spl65)),
  inference(subsumption_resolution,[],[f23944,f326])).
fof(f23944,plain,(
  ( ! [X171,X170] : (p(s(bool,X171)) | sP1(X170,'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X170))) | s(bool,'T_0') = s(bool,X171)) ) | ($spl3 | $spl8 | $spl65)),
  inference(superposition,[],[f2590,f9141])).
fof(f24743,plain,(
  ( ! [X12,X10] : (p(s(bool,X12)) | s(bool,'F_0') = s(bool,g(s(bool,X10))) | s(bool,X10) = s(bool,X12)) ) | $spl88),
  inference(cnf_transformation,[],[f24743_D])).
fof(f24743_D,plain,(
  ( ! [X12,X10] : (p(s(bool,X12)) | s(bool,'F_0') = s(bool,g(s(bool,X10))) | s(bool,X10) = s(bool,X12)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f24744,plain,(
  ( ! [X14,X15,X13] : (p(s(bool,X15)) | s(bool,X13) = s(bool,X15) | s(bool,'F_0') = s(bool,g(s(bool,X13))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl3 | $spl65)),
  inference(subsumption_resolution,[],[f23902,f326])).
fof(f23902,plain,(
  ( ! [X14,X15,X13] : (p(s(bool,X14)) | p(s(bool,X15)) | s(bool,X13) = s(bool,X15) | s(bool,'F_0') = s(bool,g(s(bool,X13))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f387,f9141])).
fof(f24742,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X12)) | s(bool,X10) = s(bool,X12) | s(bool,'F_0') = s(bool,g(s(bool,X10))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl3 | $spl65)),
  inference(subsumption_resolution,[],[f23901,f326])).
fof(f23901,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X11)) | p(s(bool,X12)) | s(bool,X10) = s(bool,X12) | s(bool,'F_0') = s(bool,g(s(bool,X10))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f387,f9141])).
fof(f24593,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') = s(bool,X70) | s(bool,'F_0') = s(bool,g(s(bool,X71))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23828])).
fof(f23828,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') = s(bool,X70) | s(bool,'F_0') = s(bool,g(s(bool,X71))) | s(bool,X71) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'T_0') = s(bool,X70)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f2072])).
fof(f24594,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,g(s(bool,X69))) | s(bool,X69) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X67),s('type.integer.int',X67)))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23827])).
fof(f23827,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,g(s(bool,X69))) | s(bool,X69) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X67),s('type.integer.int',X67))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f2071])).
fof(f24717,plain,(
  ( ! [X70,X72] : (s(bool,'F_0') = s(bool,g(s(bool,X70))) | s(bool,X70) = s(bool,X72) | s(bool,'F_0') = s(bool,g(s(bool,X72)))) ) | $spl70),
  inference(cnf_transformation,[],[f24717_D])).
fof(f24717_D,plain,(
  ( ! [X70,X72] : (s(bool,'F_0') = s(bool,g(s(bool,X70))) | s(bool,X70) = s(bool,X72) | s(bool,'F_0') = s(bool,g(s(bool,X72)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f24596,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,'F_0') = s(bool,g(s(bool,X51))) | s(bool,X49) = s(bool,X51) | s(bool,'F_0') = s(bool,g(s(bool,X49)))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23822])).
fof(f23822,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,'F_0') = s(bool,g(s(bool,X51))) | s(bool,X49) = s(bool,X51) | s(bool,'F_0') = s(bool,g(s(bool,X49))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f9141])).
fof(f24627,plain,(
  ( ! [X66,X64,X65] : (s(bool,X65) = s(bool,X66) | s(bool,'F_0') = s(bool,g(s(bool,X66))) | s(bool,'T_0') = s(bool,X64) | s(bool,'F_0') = s(bool,g(s(bool,X65)))) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23770])).
fof(f23770,plain,(
  ( ! [X66,X64,X65] : (s(bool,X65) = s(bool,X66) | s(bool,'F_0') = s(bool,g(s(bool,X66))) | s(bool,'T_0') = s(bool,X64) | s(bool,'F_0') = s(bool,g(s(bool,X65))) | s(bool,'T_0') = s(bool,X64)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f9141])).
fof(f24735,plain,(
  ( ! [X60] : (s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'F_0') = s(bool,g(s(bool,X60)))) ) | $spl86),
  inference(cnf_transformation,[],[f24735_D])).
fof(f24735_D,plain,(
  ( ! [X60] : (s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'F_0') = s(bool,g(s(bool,X60)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f24628,plain,(
  ( ! [X59,X60] : (s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'F_0') = s(bool,g(s(bool,X60))) | s(bool,'T_0') = s(bool,X59)) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23768])).
fof(f23768,plain,(
  ( ! [X59,X60] : (s(bool,X60) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'F_0') = s(bool,g(s(bool,X60))) | s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f4298])).
fof(f24641,plain,(
  ( ! [X17,X18] : (s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'F_0') = s(bool,g(s(bool,X18))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23759])).
fof(f23759,plain,(
  ( ! [X17,X18] : (s(bool,X18) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | s(bool,'F_0') = s(bool,g(s(bool,X18))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f2072])).
fof(f24642,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X15))) | s(bool,'F_0') = s(bool,g(s(bool,X16))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23758])).
fof(f23758,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X15),s('type.integer.int',X15))) | s(bool,'F_0') = s(bool,g(s(bool,X16))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f2071])).
fof(f24725,plain,(
  ( ! [X65] : (s(bool,'F_0') = s(bool,g(s(bool,X65))) | s(bool,'F_0') = s(bool,X65)) ) | $spl78),
  inference(cnf_transformation,[],[f24725_D])).
fof(f24725_D,plain,(
  ( ! [X65] : (s(bool,'F_0') = s(bool,g(s(bool,X65))) | s(bool,'F_0') = s(bool,X65)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f24647,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23753])).
fof(f23753,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f313])).
fof(f24648,plain,(
  ( ! [X111,X112,X113] : (s(bool,'T_0') = s(bool,X113) | s(bool,'F_0') = s(bool,g(s(bool,sK15(X111,X112,bool,bool)))) | s(fun(bool,bool),X111) = s(fun(bool,bool),X112)) ) | ($spl3 | $spl44 | $spl65)),
  inference(duplicate_literal_removal,[],[f23752])).
fof(f23752,plain,(
  ( ! [X111,X112,X113] : (s(bool,'T_0') = s(bool,X113) | s(bool,'F_0') = s(bool,g(s(bool,sK15(X111,X112,bool,bool)))) | s(bool,'T_0') = s(bool,X113) | s(fun(bool,bool),X111) = s(fun(bool,bool),X112)) ) | ($spl3 | $spl44 | $spl65)),
  inference(superposition,[],[f9141,f4216])).
fof(f24667,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,g(s(bool,X67))) | s(bool,'F_0') = s(bool,g(s(bool,X69))) | s(bool,X67) = s(bool,X69)) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23734])).
fof(f23734,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,g(s(bool,X67))) | s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,g(s(bool,X69))) | s(bool,X67) = s(bool,X69)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f9141])).
fof(f24724,plain,(
  ( ! [X66,X64] : (s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,g(s(bool,X64))) | s(bool,'T_0') = s(bool,X66)) ) | $spl76),
  inference(cnf_transformation,[],[f24724_D])).
fof(f24724_D,plain,(
  ( ! [X66,X64] : (s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,g(s(bool,X64))) | s(bool,'T_0') = s(bool,X66)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f23714,plain,(
  ( ! [X66,X64,X65] : (s(bool,'F_0') = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,X66) | s(bool,'F_0') = s(bool,g(s(bool,X65))) | s(bool,'T_0') = s(bool,g(s(bool,X64)))) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f9141])).
fof(f24718,plain,(
  ( ! [X94,X95,X93] : (s(bool,X94) = s(bool,g(s(bool,X93))) | s(bool,'T_0') = s(bool,X95) | s(bool,X93) = s(bool,X95) | s(bool,'T_0') = s(bool,X94)) ) | $spl72),
  inference(cnf_transformation,[],[f24718_D])).
fof(f24718_D,plain,(
  ( ! [X94,X95,X93] : (s(bool,X94) = s(bool,g(s(bool,X93))) | s(bool,'T_0') = s(bool,X95) | s(bool,X93) = s(bool,X95) | s(bool,'T_0') = s(bool,X94)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f24720,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl74),
  inference(cnf_transformation,[],[f24720_D])).
fof(f24720_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f23688,plain,(
  ( ! [X94,X95,X93] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X94) = s(bool,g(s(bool,X93))) | s(bool,'T_0') = s(bool,X94) | s(bool,X93) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f9141])).
fof(f24693,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') = s(bool,g(s(bool,X70))) | s(bool,'T_0') = s(bool,X71) | s(bool,'F_0') = s(bool,g(s(bool,X72))) | s(bool,X70) = s(bool,X72)) ) | ($spl3 | $spl65)),
  inference(duplicate_literal_removal,[],[f23680])).
fof(f23680,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') = s(bool,g(s(bool,X70))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X71) | s(bool,'F_0') = s(bool,g(s(bool,X72))) | s(bool,X70) = s(bool,X72)) ) | ($spl3 | $spl65)),
  inference(superposition,[],[f9141,f9141])).
fof(f21434,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553,f16551,f16531,f16529,f16504,f16478,f16475])).
fof(f16475,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f329])).
fof(f16478,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f390])).
fof(f16504,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f390])).
fof(f16529,plain,(
  ( ! [X0,X1] : (sP0(X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f412])).
fof(f16531,plain,(
  ( ! [X0,X1] : (sP0(X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f413])).
fof(f16551,plain,(
  ( ! [X0] : (~sP1(X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f427])).
fof(f16553,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f427])).
fof(f16573,plain,(
  ( ! [X0] : (~sP1('T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f427])).
fof(f16575,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f427])).
fof(f16581,plain,(
  ( ! [X0] : (sP1(X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f428])).
fof(f16587,plain,(
  ( ! [X0] : (sP1('F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f431])).
fof(f16615,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f457])).
fof(f16674,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f457])).
fof(f16711,plain,(
  ( ! [X0] : (~sP5('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f457])).
fof(f16770,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f457])).
fof(f16775,plain,(
  ( ! [X0] : (sP5('T_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f16342,f458])).
fof(f16776,plain,(
  ( ! [X0] : (sP5('T_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f546,f16342,f458])).
fof(f16780,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f551,f546,f16342,f458])).
fof(f16781,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f546,f16342,f458])).
fof(f16785,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f5936,f546,f16342,f458])).
fof(f16786,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f546,f16342,f458])).
fof(f16789,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5939,f5936,f546,f16342,f458])).
fof(f16790,plain,(
  ( ! [X0] : (sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f552,f546,f16342,f458])).
fof(f16792,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f555,f552,f546,f16342,f458])).
fof(f16794,plain,(
  ( ! [X0,X1] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f546,f16342,f458])).
fof(f16796,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f575,f546,f16342,f458])).
fof(f16798,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f550,f547,f16342,f458])).
fof(f16799,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f547,f16342,f458])).
fof(f16803,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f551,f547,f16342,f458])).
fof(f16804,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f547,f16342,f458])).
fof(f16808,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f5936,f547,f16342,f458])).
fof(f16809,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f547,f16342,f458])).
fof(f16812,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5939,f5936,f547,f16342,f458])).
fof(f16813,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f552,f547,f16342,f458])).
fof(f16815,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f555,f552,f547,f16342,f458])).
fof(f16817,plain,(
  ( ! [X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f575,f547,f16342,f458])).
fof(f16818,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f575,f547,f16342,f458])).
fof(f16819,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f575,f547,f16342,f458])).
fof(f16820,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f575,f547,f16342,f458])).
fof(f16821,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f550,f5923,f16342,f458])).
fof(f16822,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f5923,f16342,f458])).
fof(f16825,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5939,f550,f5923,f16342,f458])).
fof(f16826,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f551,f5923,f16342,f458])).
fof(f16827,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f5923,f16342,f458])).
fof(f16830,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5939,f551,f5923,f16342,f458])).
fof(f16831,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f5936,f5923,f16342,f458])).
fof(f16832,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f5923,f16342,f458])).
fof(f16835,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5939,f5936,f5923,f16342,f458])).
fof(f16836,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f552,f5923,f16342,f458])).
fof(f16838,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f555,f552,f5923,f16342,f458])).
fof(f16840,plain,(
  ( ! [X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f575,f5923,f16342,f458])).
fof(f16841,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f575,f5923,f16342,f458])).
fof(f16842,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f575,f5923,f16342,f458])).
fof(f16843,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f575,f5923,f16342,f458])).
fof(f16846,plain,(
  ( ! [X0] : (sP5('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f552,f548,f16342,f458])).
fof(f16847,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f552,f548,f16342,f458])).
fof(f16848,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f552,f548,f16342,f458])).
fof(f16849,plain,(
  ( ! [X0] : (sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f552,f548,f16342,f458])).
fof(f16850,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f552,f548,f16342,f458])).
fof(f16851,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f552,f548,f16342,f458])).
fof(f16852,plain,(
  ( ! [X0] : (sP5('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f548,f16342,f458])).
fof(f16856,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f548,f16342,f458])).
fof(f16857,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f556,f551,f548,f16342,f458])).
fof(f16858,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f557,f551,f548,f16342,f458])).
fof(f16859,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f551,f548,f16342,f458])).
fof(f16860,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f548,f16342,f458])).
fof(f16868,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f576,f548,f16342,f458])).
fof(f16870,plain,(
  ( ! [X0,X1] : (sP5('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f575,f573,f16342,f458])).
fof(f16871,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f575,f573,f16342,f458])).
fof(f16872,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f575,f573,f16342,f458])).
fof(f16873,plain,(
  ( ! [X0,X1] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f573,f16342,f458])).
fof(f16874,plain,(
  ( ! [X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f575,f573,f16342,f458])).
fof(f16875,plain,(
  ( ! [X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f575,f573,f16342,f458])).
fof(f16876,plain,(
  ( ! [X0,X1] : (sP5('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f573,f16342,f458])).
fof(f16878,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f550,f573,f16342,f458])).
fof(f16879,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f550,f573,f16342,f458])).
fof(f16880,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f573,f16342,f458])).
fof(f16881,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f551,f573,f16342,f458])).
fof(f16882,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f551,f573,f16342,f458])).
fof(f16883,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f551,f573,f16342,f458])).
fof(f16884,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f573,f16342,f458])).
fof(f16886,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f5936,f573,f16342,f458])).
fof(f16887,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f5936,f573,f16342,f458])).
fof(f16891,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f576,f573,f16342,f458])).
fof(f16892,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f576,f573,f16342,f458])).
fof(f16893,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f576,f573,f16342,f458])).
fof(f16929,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f552,f574,f16342,f458])).
fof(f16930,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f552,f574,f16342,f458])).
fof(f16931,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f552,f574,f16342,f458])).
fof(f16932,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f574,f16342,f458])).
fof(f16933,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f575,f574,f16342,f458])).
fof(f16934,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f575,f574,f16342,f458])).
fof(f16940,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5939,f576,f574,f16342,f458])).
fof(f17001,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f872,f16342,f458])).
fof(f17002,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f874,f16342,f458])).
fof(f17061,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f461])).
fof(f17077,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f461])).
fof(f17098,plain,(
  ( ! [X0] : (~sP4('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f461])).
fof(f17114,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f461])).
fof(f17116,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f462])).
fof(f17138,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f465])).
fof(f17155,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f465])).
fof(f17177,plain,(
  ( ! [X0] : (~sP3('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f465])).
fof(f17194,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f465])).
fof(f17196,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f466])).
fof(f17198,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f470])).
fof(f17200,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f471])).
fof(f17202,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f472])).
fof(f17248,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f586,f16342,f474])).
fof(f17250,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5893,f16342,f474])).
fof(f17254,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f445,f16342,f474])).
fof(f17256,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))),'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1432,f16342,f474])).
fof(f17260,plain,(
  ( ! [X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f602,f16342,f474])).
fof(f17262,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X2)))),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1901,f16342,f474])).
fof(f17269,plain,(
  ( ! [X0] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f586,f16342,f474])).
fof(f17271,plain,(
  ( ! [X0] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5893,f16342,f474])).
fof(f17275,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X3)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X3))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f445,f16342,f474])).
fof(f17277,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1432,f16342,f474])).
fof(f17281,plain,(
  ( ! [X0,X1] : (sP5(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f602,f16342,f474])).
fof(f17283,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1901,f16342,f474])).
fof(f17347,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f475])).
fof(f17351,plain,(
  ( ! [X0,X1] : (~sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f16342,f475])).
fof(f17353,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f16342,f475])).
fof(f17358,plain,(
  ( ! [X0] : (~sP5(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f475])).
fof(f17362,plain,(
  ( ! [X0,X1] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f16342,f475])).
fof(f17364,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X2)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f16342,f475])).
fof(f17378,plain,(
  ( ! [X0,X1] : (~sP7(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f478])).
fof(f17389,plain,(
  ( ! [X0,X1] : (~sP7(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f479])).
fof(f17401,plain,(
  ( ! [X0] : (sP7('T_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f560,f304,f16342,f480])).
fof(f17402,plain,(
  ( ! [X0] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f561,f304,f16342,f480])).
fof(f17403,plain,(
  ( ! [X0] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5988,f304,f16342,f480])).
fof(f17404,plain,(
  ( ! [X0] : (sP7(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f304,f16342,f480])).
fof(f17405,plain,(
  ( ! [X0,X1] : (sP7(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f304,f16342,f480])).
fof(f17412,plain,(
  ( ! [X0,X1] : (sP7('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f560,f16342,f16342,f480])).
fof(f17413,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f561,f16342,f16342,f480])).
fof(f17414,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5988,f16342,f16342,f480])).
fof(f17415,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f16342,f16342,f480])).
fof(f17416,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f16342,f16342,f480])).
fof(f17417,plain,(
  ( ! [X0,X1] : (sP7(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f16342,f16342,f480])).
fof(f17418,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f16342,f16342,f480])).
fof(f17442,plain,(
  ( ! [X0] : (sP7('T_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f560,f304,f16342,f480])).
fof(f17443,plain,(
  ( ! [X0] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f561,f304,f16342,f480])).
fof(f17444,plain,(
  ( ! [X0] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5988,f304,f16342,f480])).
fof(f17445,plain,(
  ( ! [X0] : (sP7(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f304,f16342,f480])).
fof(f17446,plain,(
  ( ! [X0,X1] : (sP7(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f304,f16342,f480])).
fof(f17455,plain,(
  ( ! [X0,X1] : (sP7('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f560,f16342,f16342,f480])).
fof(f17456,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f561,f16342,f16342,f480])).
fof(f17457,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5988,f16342,f16342,f480])).
fof(f17458,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f16342,f16342,f480])).
fof(f17459,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f16342,f16342,f480])).
fof(f17460,plain,(
  ( ! [X0,X1] : (sP7(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f16342,f16342,f480])).
fof(f17461,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f16342,f16342,f480])).
fof(f17484,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f484])).
fof(f17493,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f484])).
fof(f17504,plain,(
  ( ! [X0] : (~sP6('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f484])).
fof(f17513,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f484])).
fof(f17515,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f485])).
fof(f17532,plain,(
  ( ! [X0] : (sP7('T_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f304,f16342,f490])).
fof(f17534,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f304,f16342,f490])).
fof(f17545,plain,(
  ( ! [X0,X1] : (sP7('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f16342,f490])).
fof(f17547,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f16342,f490])).
fof(f17566,plain,(
  ( ! [X0] : (sP7('T_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f304,f16342,f490])).
fof(f17568,plain,(
  ( ! [X0,X1] : (sP7(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f304,f16342,f490])).
fof(f17579,plain,(
  ( ! [X0,X1] : (sP7('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f16342,f490])).
fof(f17581,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f16342,f490])).
fof(f17602,plain,(
  ( ! [X0] : (sP7(X0,'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f304,f16342,f490])).
fof(f17604,plain,(
  ( ! [X0,X1] : (sP7(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f304,f16342,f490])).
fof(f17615,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f16342,f490])).
fof(f17617,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f16342,f490])).
fof(f17629,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f493])).
fof(f17640,plain,(
  ( ! [X0,X1] : (~sP7('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f493])).
fof(f17652,plain,(
  ( ! [X0] : (~sP7('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f493])).
fof(f17663,plain,(
  ( ! [X0,X1] : (~sP7('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f493])).
fof(f17691,plain,(
  ( ! [X0,X1] : (~sP9('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f494])).
fof(f17719,plain,(
  ( ! [X0,X1] : (~sP9('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f495])).
fof(f17733,plain,(
  ( ! [X0] : (sP9(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f566,f540,f16342,f498])).
fof(f17734,plain,(
  ( ! [X0] : (sP9(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f567,f540,f16342,f498])).
fof(f17735,plain,(
  ( ! [X0] : (sP9(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6041,f540,f16342,f498])).
fof(f17736,plain,(
  ( ! [X0] : (sP9('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f568,f540,f16342,f498])).
fof(f17737,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f579,f540,f16342,f498])).
fof(f17769,plain,(
  ( ! [X0] : (sP9(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f564,f540,f16342,f499])).
fof(f17771,plain,(
  ( ! [X0] : (sP9(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f565,f540,f16342,f499])).
fof(f17772,plain,(
  ( ! [X0] : (sP9(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6040,f540,f16342,f499])).
fof(f17774,plain,(
  ( ! [X0] : (sP9('F_0','F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f568,f540,f16342,f499])).
fof(f17778,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f579,f540,f16342,f499])).
fof(f17793,plain,(
  ( ! [X0] : (~sP8(X0,'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f16342,f501])).
fof(f17795,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f502])).
fof(f17797,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f503])).
fof(f17807,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f506])).
fof(f17809,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f506])).
fof(f17819,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f506])).
fof(f17821,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f506])).
fof(f17831,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f507])).
fof(f17833,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f507])).
fof(f17843,plain,(
  ( ! [X0,X1] : (sP9(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f507])).
fof(f17845,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f507])).
fof(f17875,plain,(
  ( ! [X0] : (~sP9(X0,'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f16342,f508])).
fof(f17899,plain,(
  ( ! [X0,X1] : (~sP11('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f512])).
fof(f17910,plain,(
  ( ! [X0] : (sP11(X0,'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f570,f304,f16342,f515])).
fof(f17911,plain,(
  ( ! [X0] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f571,f304,f16342,f515])).
fof(f17912,plain,(
  ( ! [X0] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6088,f304,f16342,f515])).
fof(f17913,plain,(
  ( ! [X0] : (sP11('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f304,f16342,f515])).
fof(f17914,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f304,f16342,f515])).
fof(f17925,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f16342,f16342,f515])).
fof(f17926,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f16342,f16342,f515])).
fof(f17927,plain,(
  ( ! [X0,X1] : (sP11(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f570,f16342,f16342,f515])).
fof(f17928,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f571,f16342,f16342,f515])).
fof(f17929,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6088,f16342,f16342,f515])).
fof(f17930,plain,(
  ( ! [X0,X1] : (sP11('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f16342,f16342,f515])).
fof(f17931,plain,(
  ( ! [X2,X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f16342,f16342,f515])).
fof(f17977,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f16342,f16342,f515])).
fof(f17979,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f16342,f16342,f515])).
fof(f17981,plain,(
  ( ! [X0,X1] : (sP11(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f570,f16342,f16342,f515])).
fof(f17983,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f571,f16342,f16342,f515])).
fof(f17985,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6088,f16342,f16342,f515])).
fof(f17987,plain,(
  ( ! [X0,X1] : (sP11('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f16342,f16342,f515])).
fof(f17989,plain,(
  ( ! [X2,X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f16342,f16342,f515])).
fof(f18011,plain,(
  ( ! [X0] : (sP11(X0,'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f540,f16342,f516])).
fof(f18013,plain,(
  ( ! [X0,X1] : (sP11(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f540,f16342,f516])).
fof(f18014,plain,(
  ( ! [X0] : (sP11('F_0','F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f16342,f516])).
fof(f18016,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f16342,f516])).
fof(f18036,plain,(
  ( ! [X0] : (sP11(X0,'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f540,f16342,f517])).
fof(f18038,plain,(
  ( ! [X0,X1] : (sP11(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f540,f16342,f517])).
fof(f18039,plain,(
  ( ! [X0] : (sP11('F_0','F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f16342,f517])).
fof(f18041,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f16342,f517])).
fof(f18064,plain,(
  ( ! [X0,X1] : (~sP10(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f518])).
fof(f18084,plain,(
  ( ! [X0] : (~sP10('T_0','F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f16342,f518])).
fof(f18086,plain,(
  ( ! [X0,X1] : (~sP10(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f518])).
fof(f18088,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f520])).
fof(f18101,plain,(
  ( ! [X0] : (sP11('F_0','F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f16342,f522])).
fof(f18113,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f523])).
fof(f18127,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f524])).
fof(f18139,plain,(
  ( ! [X0,X1] : (sP11(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f304,f16342,f524])).
fof(f18141,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f524])).
fof(f18183,plain,(
  ( ! [X0,X1] : (~sP11(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f525])).
fof(f18209,plain,(
  ( ! [X0] : (~sP11(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f16342,f525])).
fof(f18233,plain,(
  ( ! [X0,X1] : (~sP11(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f525])).
fof(f18245,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f16342,f528])).
fof(f18247,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f16342,f528])).
fof(f18249,plain,(
  ( ! [X0,X1] : (sP11(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f570,f16342,f528])).
fof(f18251,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f571,f16342,f528])).
fof(f18253,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6088,f16342,f528])).
fof(f18255,plain,(
  ( ! [X0,X1] : (sP11('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f16342,f528])).
fof(f18257,plain,(
  ( ! [X2,X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f16342,f528])).
fof(f18268,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f564,f16342,f529])).
fof(f18270,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f565,f16342,f529])).
fof(f18272,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6040,f16342,f529])).
fof(f18274,plain,(
  ( ! [X0,X1] : (sP9(X0,'T_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f566,f16342,f529])).
fof(f18276,plain,(
  ( ! [X0,X1] : (sP9(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f567,f16342,f529])).
fof(f18278,plain,(
  ( ! [X0,X1] : (sP9(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6041,f16342,f529])).
fof(f18280,plain,(
  ( ! [X0,X1] : (sP9('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f568,f16342,f529])).
fof(f18284,plain,(
  ( ! [X2,X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f579,f16342,f529])).
fof(f18287,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f657])).
fof(f18289,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f662])).
fof(f18291,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f694])).
fof(f18293,plain,(
  ( ! [X0] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f938])).
fof(f18313,plain,(
  ( ! [X0] : (~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1002])).
fof(f18329,plain,(
  ( ! [X0] : (~sP3(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1024])).
fof(f18347,plain,(
  ( ! [X0] : (~sP6(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1073])).
fof(f18363,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1106])).
fof(f18373,plain,(
  ( ! [X0] : (~sP10(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1236])).
fof(f18393,plain,(
  ( ! [X0] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1274])).
fof(f18707,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f582,f582,f16342,f2646])).
fof(f18763,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f583,f583,f16342,f2646])).
fof(f18791,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1873,f1873,f16342,f2646])).
fof(f18877,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f582,f16342,f2648])).
fof(f18878,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f574,f540,f582,f16342,f2648])).
fof(f18886,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f582,f582,f16342,f2648])).
fof(f18918,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f583,f583,f16342,f2648])).
fof(f18934,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1873,f1873,f16342,f2648])).
fof(f19003,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f582,f16342,f2649])).
fof(f19005,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f576,f540,f582,f16342,f2649])).
fof(f19018,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f582,f582,f16342,f2649])).
fof(f19062,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f583,f583,f16342,f2649])).
fof(f19084,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1873,f1873,f16342,f2649])).
fof(f19152,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f582,f16342,f2650])).
fof(f19153,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f540,f582,f16342,f2650])).
fof(f19159,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f582,f582,f16342,f2650])).
fof(f19181,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f583,f583,f16342,f2650])).
fof(f19192,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1873,f1873,f16342,f2650])).
fof(f19238,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f582,f16342,f2651])).
fof(f19239,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f741,f540,f582,f16342,f2651])).
fof(f19246,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f582,f582,f16342,f2651])).
fof(f19270,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f583,f583,f16342,f2651])).
fof(f19282,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1873,f1873,f16342,f2651])).
fof(f19323,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f582,f16342,f2653])).
fof(f19343,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f583,f16342,f2653])).
fof(f19353,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f1873,f16342,f2653])).
fof(f19390,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f582,f16342,f2654])).
fof(f19410,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f583,f16342,f2654])).
fof(f19420,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f1873,f16342,f2654])).
fof(f19464,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f582,f16342,f2656])).
fof(f19465,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f582,f16342,f2656])).
fof(f19491,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f583,f16342,f2656])).
fof(f19504,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f1873,f16342,f2656])).
fof(f19752,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f4005])).
fof(f19753,plain,(
  ( ! [X2,X0,X1] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f4006])).
fof(f19754,plain,(
  ( ! [X0,X1] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f4007])).
fof(f19755,plain,(
  ( ! [X0,X1] : (sP1('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f4008])).
fof(f19759,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X2,X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f4017])).
fof(f19762,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X2,X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f4021])).
fof(f19770,plain,(
  ( ! [X2,X0,X3,X1] : (sP0(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f1444])).
fof(f19771,plain,(
  ( ! [X2,X0,X3,X1] : (sP0('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f1445])).
fof(f19772,plain,(
  ( ! [X2,X0,X1] : (sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1446])).
fof(f19773,plain,(
  ( ! [X2,X0,X1] : (sP1('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f1447])).
fof(f19775,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f1448])).
fof(f19791,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f573,f16342,f1449])).
fof(f19795,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f573,f16342,f1449])).
fof(f19799,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f573,f16342,f1449])).
fof(f19806,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f576,f573,f16342,f1449])).
fof(f19807,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f576,f573,f16342,f1449])).
fof(f19808,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f576,f573,f16342,f1449])).
fof(f19809,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f546,f16342,f1449])).
fof(f19814,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f546,f16342,f1449])).
fof(f19816,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f546,f16342,f1449])).
fof(f19818,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f546,f16342,f1449])).
fof(f19819,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f575,f547,f16342,f1449])).
fof(f19824,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f547,f16342,f1449])).
fof(f19826,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f547,f16342,f1449])).
fof(f19828,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f547,f16342,f1449])).
fof(f19829,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f575,f5923,f16342,f1449])).
fof(f19834,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f5923,f16342,f1449])).
fof(f19836,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f555,f551,f5923,f16342,f1449])).
fof(f19838,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f5936,f5923,f16342,f1449])).
fof(f19847,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f574,f16342,f1449])).
fof(f19848,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f575,f574,f16342,f1449])).
fof(f19849,plain,(
  ( ! [X2,X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f575,f574,f16342,f1449])).
fof(f19877,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f1450])).
fof(f19894,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f1451])).
fof(f19909,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)),'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f1452])).
fof(f19924,plain,(
  ( ! [X2,X0,X3,X1] : (~sP7('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f1453])).
fof(f19934,plain,(
  ( ! [X2,X0,X1] : (~sP8('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f16342,f1454])).
fof(f19947,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,X4)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f1456])).
fof(f19948,plain,(
  ( ! [X2,X0,X1] : (~sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f16342,f1457])).
fof(f19953,plain,(
  ( ! [X2,X0,X3,X1] : (~sP10(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int',X3)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f16342,f1458])).
fof(f19972,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,X4)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f16342,f1460])).
fof(f19974,plain,(
  ( ! [X2,X0,X3,X1] : (~sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'F_0',X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f16342,f1461])).
fof(f19978,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X2,X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f16342,f1462])).
fof(f19979,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f16342,f1462])).
fof(f19980,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,'const.integer.int_lt_2'(s('type.integer.int',X4),s('type.integer.int',X4)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f16342,f1462])).
fof(f19981,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'T_0',X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f570,f16342,f1462])).
fof(f19982,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f571,f16342,f1462])).
fof(f19983,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6088,f16342,f1462])).
fof(f19984,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),X2,X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f579,f16342,f1463])).
fof(f19985,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f564,f16342,f1463])).
fof(f19986,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f565,f16342,f1463])).
fof(f19987,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),X3,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6040,f16342,f1463])).
fof(f19988,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'T_0',X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f566,f16342,f1463])).
fof(f19989,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f567,f16342,f1463])).
fof(f19990,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X3)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6041,f16342,f1463])).
fof(f21433,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553,f16551,f16531,f16529,f16504,f16478])).
fof(f21432,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16479,f304])).
fof(f16479,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f390])).
fof(f21431,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16481,f304])).
fof(f16481,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f16342,f390])).
fof(f21430,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16483,f304])).
fof(f16483,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f16342,f390])).
fof(f21429,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16485,f304])).
fof(f16485,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f16342,f390])).
fof(f21428,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16487,f304])).
fof(f16487,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f16342,f390])).
fof(f21427,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16489,f304])).
fof(f16489,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f16342,f390])).
fof(f21426,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16491,f16342])).
fof(f16491,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f390])).
fof(f21425,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16493,f16342])).
fof(f16493,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f16342,f390])).
fof(f21424,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16495,f16342])).
fof(f16495,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f16342,f390])).
fof(f21423,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16497,f16342])).
fof(f16497,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f16342,f390])).
fof(f21422,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16499,f16342])).
fof(f16499,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f16342,f390])).
fof(f21421,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16501,f16342])).
fof(f16501,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f16342,f390])).
fof(f21420,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553,f16551,f16531,f16529,f16504])).
fof(f21419,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16505,f304])).
fof(f16505,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f390])).
fof(f21418,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16507,f304])).
fof(f16507,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f16342,f390])).
fof(f21417,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16509,f304])).
fof(f16509,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f16342,f390])).
fof(f21416,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16511,f304])).
fof(f16511,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f16342,f390])).
fof(f21415,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16513,f304])).
fof(f16513,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f16342,f390])).
fof(f21414,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16515,f304])).
fof(f16515,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f16342,f390])).
fof(f21413,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16517,f16342])).
fof(f16517,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f390])).
fof(f21412,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16519,f16342])).
fof(f16519,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f16342,f390])).
fof(f21411,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16521,f16342])).
fof(f16521,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f583,f16342,f390])).
fof(f21410,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16523,f16342])).
fof(f16523,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1873,f16342,f390])).
fof(f21409,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16525,f16342])).
fof(f16525,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f16342,f390])).
fof(f21408,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16527,f16342])).
fof(f16527,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f16342,f390])).
fof(f21407,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553,f16551,f16531,f16529])).
fof(f21406,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553,f16551,f16531])).
fof(f21405,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16533,f16342])).
fof(f16533,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f610,f16342,f427])).
fof(f21404,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f16534,f16342])).
fof(f16534,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f3483,f16342,f427])).
fof(f3483,plain,(
  ( ! [X0] : (sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f583,f3312])).
fof(f3312,plain,(
  ( ! [X0] : (sP1('T_0',X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(condensation,[],[f3311])).
fof(f3311,plain,(
  ( ! [X4,X5] : (sP1('T_0',X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl4),
  inference(subsumption_resolution,[],[f3303,f326])).
fof(f3303,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | sP1('T_0',X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl4),
  inference(superposition,[],[f2586,f752])).
fof(f21403,plain,(
  $false | ($spl3 | $spl4 | $spl66)),
  inference(subsumption_resolution,[],[f16535,f16342])).
fof(f16535,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f3482,f16342,f427])).
fof(f3482,plain,(
  sP1('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl4)),
  inference(unit_resulting_resolution,[],[f893,f3312])).
fof(f21402,plain,(
  $false | ($spl54 | $spl66)),
  inference(subsumption_resolution,[],[f16536,f16342])).
fof(f16536,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl54 | $spl66)),
  inference(unit_resulting_resolution,[],[f4514,f16342,f427])).
fof(f21401,plain,(
  $false | ($spl4 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16537,f16342])).
fof(f16537,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl4 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f8906,f16342,f427])).
fof(f8906,plain,(
  sP1('T_0',g(s(bool,'T_0'))) | ($spl4 | $spl65)),
  inference(unit_resulting_resolution,[],[f7681,f3312])).
fof(f21400,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16538,f304])).
fof(f16538,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f618,f16342,f427])).
fof(f21399,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16539,f16342])).
fof(f16539,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f634,f16342,f427])).
fof(f21398,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16540,f16342])).
fof(f16540,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5902,f16342,f427])).
fof(f21397,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16541,f16342])).
fof(f16541,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1138,f16342,f427])).
fof(f21396,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16542,f16342])).
fof(f16542,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5722,f16342,f427])).
fof(f5722,plain,(
  sP1('F_0',f(s(bool,'T_0'))) | $spl61),
  inference(unit_resulting_resolution,[],[f540,f5394])).
fof(f5394,plain,(
  ( ! [X6] : (sP1(X6,f(s(bool,'T_0'))) | p(s(bool,X6))) ) | $spl61),
  inference(subsumption_resolution,[],[f5347,f304])).
fof(f5347,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,f(s(bool,'T_0')))) ) | $spl61),
  inference(superposition,[],[f431,f4983])).
fof(f4983,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl61),
  inference(unit_resulting_resolution,[],[f540,f4727,f816])).
fof(f21395,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16543,f16342])).
fof(f16543,plain,(
  ~p(s(bool,'F_0')) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5671,f16342,f427])).
fof(f5671,plain,(
  sP1(f(s(bool,'T_0')),'F_0') | $spl61),
  inference(unit_resulting_resolution,[],[f540,f5393])).
fof(f5393,plain,(
  ( ! [X5] : (sP1(f(s(bool,'T_0')),X5) | p(s(bool,X5))) ) | $spl61),
  inference(subsumption_resolution,[],[f5346,f304])).
fof(f5346,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1(f(s(bool,'T_0')),X5)) ) | $spl61),
  inference(superposition,[],[f428,f4983])).
fof(f21394,plain,(
  $false | ($spl8 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16544,f304])).
fof(f16544,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f8907,f16342,f427])).
fof(f8907,plain,(
  sP1(g(s(bool,'T_0')),'T_0') | ($spl8 | $spl65)),
  inference(unit_resulting_resolution,[],[f7681,f3338])).
fof(f3338,plain,(
  ( ! [X0] : (sP1(X0,'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(condensation,[],[f3337])).
fof(f3337,plain,(
  ( ! [X4,X5] : (sP1(X4,'T_0') | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl8),
  inference(subsumption_resolution,[],[f3329,f326])).
fof(f3329,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | sP1(X4,'T_0') | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl8),
  inference(superposition,[],[f2590,f752])).
fof(f21393,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16545,f16342])).
fof(f16545,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f615,f16342,f427])).
fof(f21392,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16546,f16342])).
fof(f16546,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5901,f16342,f427])).
fof(f21391,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16547,f16342])).
fof(f16547,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1128,f16342,f427])).
fof(f21390,plain,(
  $false | ($spl8 | $spl66)),
  inference(subsumption_resolution,[],[f16548,f304])).
fof(f16548,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl66)),
  inference(unit_resulting_resolution,[],[f3505,f16342,f427])).
fof(f3505,plain,(
  ( ! [X0] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f583,f3338])).
fof(f21389,plain,(
  $false | ($spl3 | $spl8 | $spl66)),
  inference(subsumption_resolution,[],[f16549,f304])).
fof(f16549,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl8 | $spl66)),
  inference(unit_resulting_resolution,[],[f3504,f16342,f427])).
fof(f3504,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | ($spl3 | $spl8)),
  inference(unit_resulting_resolution,[],[f893,f3338])).
fof(f21388,plain,(
  $false | ($spl56 | $spl66)),
  inference(subsumption_resolution,[],[f16550,f304])).
fof(f16550,plain,(
  ~p(s(bool,'T_0')) | ($spl56 | $spl66)),
  inference(unit_resulting_resolution,[],[f4517,f16342,f427])).
fof(f21387,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553,f16551])).
fof(f21386,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573,f16553])).
fof(f21385,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16555,f304])).
fof(f16555,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f610,f16342,f427])).
fof(f21384,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f16556,f304])).
fof(f16556,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f3483,f16342,f427])).
fof(f21383,plain,(
  $false | ($spl3 | $spl4 | $spl66)),
  inference(subsumption_resolution,[],[f16557,f304])).
fof(f16557,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f3482,f16342,f427])).
fof(f21382,plain,(
  $false | ($spl54 | $spl66)),
  inference(subsumption_resolution,[],[f16558,f304])).
fof(f16558,plain,(
  ~p(s(bool,'T_0')) | ($spl54 | $spl66)),
  inference(unit_resulting_resolution,[],[f4514,f16342,f427])).
fof(f21381,plain,(
  $false | ($spl4 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16559,f304])).
fof(f16559,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f8906,f16342,f427])).
fof(f21380,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16560,f16342])).
fof(f16560,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f618,f16342,f427])).
fof(f21379,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16561,f16342])).
fof(f16561,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f634,f16342,f427])).
fof(f21378,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16562,f16342])).
fof(f16562,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5902,f16342,f427])).
fof(f21377,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16563,f16342])).
fof(f16563,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1138,f16342,f427])).
fof(f21376,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16564,f16342])).
fof(f16564,plain,(
  ~p(s(bool,'F_0')) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5722,f16342,f427])).
fof(f21375,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16565,f16342])).
fof(f16565,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5671,f16342,f427])).
fof(f21374,plain,(
  $false | ($spl8 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16566,f16342])).
fof(f16566,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl8 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f8907,f16342,f427])).
fof(f21373,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16567,f16342])).
fof(f16567,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f615,f16342,f427])).
fof(f21372,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16568,f16342])).
fof(f16568,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5901,f16342,f427])).
fof(f21371,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16569,f16342])).
fof(f16569,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1128,f16342,f427])).
fof(f21370,plain,(
  $false | ($spl8 | $spl66)),
  inference(subsumption_resolution,[],[f16570,f16342])).
fof(f16570,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl8 | $spl66)),
  inference(unit_resulting_resolution,[],[f3505,f16342,f427])).
fof(f21369,plain,(
  $false | ($spl3 | $spl8 | $spl66)),
  inference(subsumption_resolution,[],[f16571,f16342])).
fof(f16571,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl8 | $spl66)),
  inference(unit_resulting_resolution,[],[f3504,f16342,f427])).
fof(f21368,plain,(
  $false | ($spl56 | $spl66)),
  inference(subsumption_resolution,[],[f16572,f16342])).
fof(f16572,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl56 | $spl66)),
  inference(unit_resulting_resolution,[],[f4517,f16342,f427])).
fof(f21367,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575,f16573])).
fof(f21366,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581,f16575])).
fof(f21365,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587,f16581])).
fof(f21364,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615,f16587])).
fof(f21363,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16589,f304])).
fof(f16589,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f16342,f457])).
fof(f21362,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16590,f16342])).
fof(f16590,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f4972,f540,f16342,f457])).
fof(f4972,plain,(
  sP5('F_0',f(s(bool,'T_0')),'F_0') | $spl61),
  inference(unit_resulting_resolution,[],[f540,f4727,f473])).
fof(f21361,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16591,f16342])).
fof(f16591,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f884,f540,f16342,f457])).
fof(f21360,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16592,f16342])).
fof(f16592,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f1387,f540,f16342,f457])).
fof(f21359,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16593,f16342])).
fof(f16593,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6672,f540,f16342,f457])).
fof(f21358,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16594,f16342])).
fof(f16594,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1345,f540,f16342,f457])).
fof(f21357,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16595,f16342])).
fof(f16595,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9131,f540,f16342,f457])).
fof(f9131,plain,(
  sP5('T_0',g(s(bool,'T_0')),'F_0') | ($spl3 | $spl65)),
  inference(unit_resulting_resolution,[],[f304,f9023,f474])).
fof(f21356,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16596,f16342])).
fof(f16596,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1894,f540,f16342,f457])).
fof(f21355,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16597,f16342])).
fof(f16597,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1813,f540,f16342,f457])).
fof(f21354,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16598,f16342])).
fof(f16598,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4655,f540,f16342,f457])).
fof(f21353,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16599,f16342])).
fof(f16599,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1346,f540,f16342,f457])).
fof(f21352,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16600,f16342])).
fof(f16600,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6641,f540,f16342,f457])).
fof(f21351,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674,f16615])).
fof(f21350,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711,f16674])).
fof(f21349,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16676,f16342])).
fof(f16676,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f16342,f457])).
fof(f21348,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16677,f16342])).
fof(f16677,plain,(
  ~p(s(bool,'F_0')) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f4972,f540,f16342,f457])).
fof(f21347,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16678,f16342])).
fof(f16678,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f884,f540,f16342,f457])).
fof(f21346,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16679,f16342])).
fof(f16679,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1387,f540,f16342,f457])).
fof(f21345,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16680,f16342])).
fof(f16680,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6672,f540,f16342,f457])).
fof(f21344,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16681,f304])).
fof(f16681,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1345,f540,f16342,f457])).
fof(f21343,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16682,f304])).
fof(f16682,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9131,f540,f16342,f457])).
fof(f21342,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16683,f304])).
fof(f16683,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1894,f540,f16342,f457])).
fof(f21341,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16684,f304])).
fof(f16684,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1813,f540,f16342,f457])).
fof(f21340,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16685,f304])).
fof(f16685,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4655,f540,f16342,f457])).
fof(f21339,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16686,f16342])).
fof(f16686,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f1346,f540,f16342,f457])).
fof(f21338,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16687,f16342])).
fof(f16687,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6641,f540,f16342,f457])).
fof(f21337,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770,f16711])).
fof(f21336,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775,f16770])).
fof(f21335,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776,f16775])).
fof(f21334,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780,f16776])).
fof(f21333,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781,f16780])).
fof(f21332,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785,f16781])).
fof(f21331,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786,f16785])).
fof(f21330,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789,f16786])).
fof(f21329,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790,f16789])).
fof(f21328,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792,f16790])).
fof(f21327,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16791,f857])).
fof(f16791,plain,(
  sP5('T_0','T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f554,f552,f546,f16342,f458])).
fof(f21326,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794,f16792])).
fof(f21325,plain,(
  $false | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f16793,f6158])).
fof(f6158,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','F_0') | $spl10),
  inference(unit_resulting_resolution,[],[f540,f5882,f2593])).
fof(f16793,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f552,f546,f16342,f458])).
fof(f21324,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796,f16794])).
fof(f21323,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16795,f1867])).
fof(f16795,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f575,f546,f16342,f458])).
fof(f21322,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798,f16796])).
fof(f21321,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16797,f5958])).
fof(f16797,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f575,f546,f16342,f458])).
fof(f21320,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799,f16798])).
fof(f21319,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803,f16799])).
fof(f21318,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804,f16803])).
fof(f21317,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808,f16804])).
fof(f21316,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809,f16808])).
fof(f21315,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812,f16809])).
fof(f21314,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813,f16812])).
fof(f21313,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815,f16813])).
fof(f21312,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16814,f1858])).
fof(f16814,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f554,f552,f547,f16342,f458])).
fof(f21311,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817,f16815])).
fof(f21310,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16816,f6114])).
fof(f16816,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f552,f547,f16342,f458])).
fof(f21309,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818,f16817])).
fof(f21308,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819,f16818])).
fof(f21307,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820,f16819])).
fof(f21306,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821,f16820])).
fof(f21305,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822,f16821])).
fof(f21304,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825,f16822])).
fof(f21303,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826,f16825])).
fof(f21302,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827,f16826])).
fof(f21301,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830,f16827])).
fof(f21300,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831,f16830])).
fof(f21299,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832,f16831])).
fof(f21298,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835,f16832])).
fof(f21297,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836,f16835])).
fof(f21296,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838,f16836])).
fof(f21295,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16837,f5905])).
fof(f16837,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f554,f552,f5923,f16342,f458])).
fof(f21294,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840,f16838])).
fof(f21293,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16839,f5906])).
fof(f16839,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5937,f552,f5923,f16342,f458])).
fof(f21292,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841,f16840])).
fof(f21291,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842,f16841])).
fof(f21290,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843,f16842])).
fof(f21289,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846,f16843])).
fof(f21288,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847,f16846])).
fof(f21287,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848,f16847])).
fof(f21286,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849,f16848])).
fof(f21285,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850,f16849])).
fof(f21284,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851,f16850])).
fof(f21283,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852,f16851])).
fof(f21282,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856,f16852])).
fof(f21281,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16853,f857])).
fof(f16853,plain,(
  sP5('T_0','T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f548,f16342,f458])).
fof(f21280,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16854,f1858])).
fof(f16854,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f557,f550,f548,f16342,f458])).
fof(f21279,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16855,f5905])).
fof(f16855,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f550,f548,f16342,f458])).
fof(f21278,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857,f16856])).
fof(f21277,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858,f16857])).
fof(f21276,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859,f16858])).
fof(f21275,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860,f16859])).
fof(f21274,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868,f16860])).
fof(f21273,plain,(
  $false | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f16861,f6158])).
fof(f16861,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f556,f5936,f548,f16342,f458])).
fof(f21272,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16862,f6114])).
fof(f16862,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f557,f5936,f548,f16342,f458])).
fof(f21271,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16863,f5906])).
fof(f16863,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f5936,f548,f16342,f458])).
fof(f21270,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870,f16868])).
fof(f21269,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871,f16870])).
fof(f21268,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872,f16871])).
fof(f21267,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873,f16872])).
fof(f21266,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874,f16873])).
fof(f21265,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875,f16874])).
fof(f21264,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876,f16875])).
fof(f21263,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878,f16876])).
fof(f21262,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16877,f1867])).
fof(f16877,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f573,f16342,f458])).
fof(f21261,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879,f16878])).
fof(f21260,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880,f16879])).
fof(f21259,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881,f16880])).
fof(f21258,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882,f16881])).
fof(f21257,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883,f16882])).
fof(f21256,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884,f16883])).
fof(f21255,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886,f16884])).
fof(f21254,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16885,f5958])).
fof(f16885,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f5936,f573,f16342,f458])).
fof(f21253,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887,f16886])).
fof(f21252,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891,f16887])).
fof(f21251,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892,f16891])).
fof(f21250,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893,f16892])).
fof(f21249,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929,f16893])).
fof(f21248,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930,f16929])).
fof(f21247,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931,f16930])).
fof(f21246,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932,f16931])).
fof(f21245,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933,f16932])).
fof(f21244,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934,f16933])).
fof(f21243,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940,f16934])).
fof(f21242,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001,f16940])).
fof(f21241,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16941,f546])).
fof(f16941,plain,(
  ~sP4('T_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f556,f552,f857,f16342,f458])).
fof(f21240,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16942,f550])).
fof(f16942,plain,(
  ~sP3('T_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f556,f548,f857,f16342,f458])).
fof(f21239,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16943,f554])).
fof(f16943,plain,(
  ~sP2('F_0','T_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f552,f548,f857,f16342,f458])).
fof(f21238,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16945,f546])).
fof(f16945,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f550,f901,f16342,f458])).
fof(f21237,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16946,f550])).
fof(f16946,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f546,f901,f16342,f458])).
fof(f21236,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16947,f554])).
fof(f16947,plain,(
  ~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0','T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f550,f546,f901,f16342,f458])).
fof(f21235,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16949,f546])).
fof(f16949,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f1867,f16342,f458])).
fof(f21234,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16950,f546])).
fof(f16950,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f575,f1867,f16342,f458])).
fof(f21233,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16951,f546])).
fof(f16951,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f1867,f16342,f458])).
fof(f21232,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16952,f546])).
fof(f16952,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f1867,f16342,f458])).
fof(f21231,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16953,f550])).
fof(f16953,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f573,f1867,f16342,f458])).
fof(f21230,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16954,f550])).
fof(f16954,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f573,f1867,f16342,f458])).
fof(f21229,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16955,f554])).
fof(f16955,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f575,f573,f1867,f16342,f458])).
fof(f21228,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16957,f554])).
fof(f16957,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f550,f573,f1867,f16342,f458])).
fof(f21227,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16959,f550])).
fof(f16959,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f546,f1867,f16342,f458])).
fof(f21226,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16960,f550])).
fof(f16960,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f546,f1867,f16342,f458])).
fof(f21225,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16961,f554])).
fof(f16961,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f575,f546,f1867,f16342,f458])).
fof(f21224,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16963,f554])).
fof(f16963,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f550,f546,f1867,f16342,f458])).
fof(f21223,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16965,f546])).
fof(f16965,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f550,f4846,f16342,f458])).
fof(f21222,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16966,f550])).
fof(f16966,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f546,f4846,f16342,f458])).
fof(f21221,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16967,f554])).
fof(f16967,plain,(
  ~sP2('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0','T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f550,f546,f4846,f16342,f458])).
fof(f21220,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16969,f546])).
fof(f16969,plain,(
  ~sP4('T_0',g(s(bool,'T_0')),'T_0') | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f550,f8997,f16342,f458])).
fof(f8997,plain,(
  ~sP5('T_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f304,f7681,f475])).
fof(f21219,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16970,f550])).
fof(f16970,plain,(
  ~sP3('T_0',g(s(bool,'T_0')),'T_0') | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f546,f8997,f16342,f458])).
fof(f21218,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f16971,f554])).
fof(f16971,plain,(
  ~sP2(g(s(bool,'T_0')),'T_0','T_0') | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f550,f546,f8997,f16342,f458])).
fof(f21217,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16978,f548])).
fof(f16978,plain,(
  ~sP4('T_0','F_0',f(s(bool,'T_0'))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f554,f552,f4973,f16342,f458])).
fof(f4973,plain,(
  ~sP5('T_0',f(s(bool,'T_0')),'F_0') | $spl61),
  inference(unit_resulting_resolution,[],[f304,f4727,f475])).
fof(f21216,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16979,f550])).
fof(f16979,plain,(
  ~sP3(f(s(bool,'T_0')),'F_0','T_0') | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f554,f548,f4973,f16342,f458])).
fof(f21215,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f16980,f554])).
fof(f16980,plain,(
  ~sP2('F_0',f(s(bool,'T_0')),'T_0') | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f552,f548,f4973,f16342,f458])).
fof(f21214,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16983,f548])).
fof(f16983,plain,(
  ~sP4('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f554,f552,f883,f16342,f458])).
fof(f21213,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16984,f550])).
fof(f16984,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0','T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f554,f548,f883,f16342,f458])).
fof(f21212,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f16985,f554])).
fof(f16985,plain,(
  ~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f552,f548,f883,f16342,f458])).
fof(f21211,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16987,f547])).
fof(f16987,plain,(
  ~sP4('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(unit_resulting_resolution,[],[f557,f552,f1858,f16342,f458])).
fof(f21210,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16988,f550])).
fof(f16988,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f557,f548,f1858,f16342,f458])).
fof(f21209,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16989,f554])).
fof(f16989,plain,(
  ~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)),'T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f552,f548,f1858,f16342,f458])).
fof(f21208,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16991,f5923])).
fof(f16991,plain,(
  ~sP4('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f552,f5905,f16342,f458])).
fof(f21207,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16992,f550])).
fof(f16992,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f548,f5905,f16342,f458])).
fof(f21206,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f16993,f554])).
fof(f16993,plain,(
  ~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f552,f548,f5905,f16342,f458])).
fof(f21205,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002,f17001])).
fof(f21204,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061,f17002])).
fof(f21203,plain,(
  $false | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f17043,f546])).
fof(f17043,plain,(
  ~sP4('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0','T_0') | ($spl10 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f552,f6158,f16342,f458])).
fof(f21202,plain,(
  $false | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f17044,f5936])).
fof(f17044,plain,(
  ~sP3('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl10 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f548,f6158,f16342,f458])).
fof(f21201,plain,(
  $false | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f17045,f5937])).
fof(f17045,plain,(
  ~sP2('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl10 | $spl66)),
  inference(unit_resulting_resolution,[],[f552,f548,f6158,f16342,f458])).
fof(f21200,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17047,f16342])).
fof(f17047,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f548,f540,f16342,f461])).
fof(f21199,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17048,f16342])).
fof(f17048,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f573,f540,f16342,f461])).
fof(f21198,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17049,f16342])).
fof(f17049,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3850,f540,f16342,f461])).
fof(f21197,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17050,f16342])).
fof(f17050,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4763,f540,f16342,f461])).
fof(f21196,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17051,f16342])).
fof(f17051,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9411,f540,f16342,f461])).
fof(f9411,plain,(
  sP4('T_0',g(s(bool,'T_0')),'F_0') | ($spl3 | $spl65)),
  inference(unit_resulting_resolution,[],[f9140,f456])).
fof(f9140,plain,(
  sP5('T_0','F_0',g(s(bool,'T_0'))) | ($spl3 | $spl65)),
  inference(unit_resulting_resolution,[],[f304,f9023,f474])).
fof(f21195,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17052,f16342])).
fof(f17052,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f16342,f461])).
fof(f21194,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17053,f16342])).
fof(f17053,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f574,f540,f16342,f461])).
fof(f21193,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077,f17061])).
fof(f21192,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098,f17077])).
fof(f21191,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17079,f16342])).
fof(f17079,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f548,f540,f16342,f461])).
fof(f21190,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17080,f16342])).
fof(f17080,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f573,f540,f16342,f461])).
fof(f21189,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17081,f304])).
fof(f17081,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3850,f540,f16342,f461])).
fof(f21188,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17082,f304])).
fof(f17082,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4763,f540,f16342,f461])).
fof(f21187,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17083,f304])).
fof(f17083,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9411,f540,f16342,f461])).
fof(f21186,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17084,f16342])).
fof(f17084,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f16342,f461])).
fof(f21185,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17085,f16342])).
fof(f17085,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f574,f540,f16342,f461])).
fof(f21184,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114,f17098])).
fof(f21183,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116,f17114])).
fof(f21182,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138,f17116])).
fof(f21181,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17118,f16342])).
fof(f17118,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f552,f540,f16342,f465])).
fof(f21180,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17119,f16342])).
fof(f17119,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f575,f540,f16342,f465])).
fof(f21179,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17120,f16342])).
fof(f17120,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1799,f540,f16342,f465])).
fof(f21178,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17121,f16342])).
fof(f17121,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4895,f540,f16342,f465])).
fof(f21177,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17122,f16342])).
fof(f17122,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9870,f540,f16342,f465])).
fof(f9870,plain,(
  sP3('T_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f8996,f455])).
fof(f8996,plain,(
  sP5('F_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f540,f7681,f473])).
fof(f21176,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17123,f16342])).
fof(f17123,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f16342,f465])).
fof(f21175,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17124,f304])).
fof(f17124,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9734,f540,f16342,f465])).
fof(f9734,plain,(
  sP3(g(s(bool,'T_0')),'T_0','F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f8910,f455])).
fof(f8910,plain,(
  sP5('F_0',g(s(bool,'T_0')),'T_0') | $spl65),
  inference(unit_resulting_resolution,[],[f540,f7681,f473])).
fof(f21174,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17125,f16342])).
fof(f17125,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f576,f540,f16342,f465])).
fof(f21173,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17126,f304])).
fof(f17126,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1766,f540,f16342,f465])).
fof(f21172,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17127,f304])).
fof(f17127,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4869,f540,f16342,f465])).
fof(f21171,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17128,f16342])).
fof(f17128,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | $spl66),
  inference(unit_resulting_resolution,[],[f2008,f540,f16342,f465])).
fof(f21170,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17129,f16342])).
fof(f17129,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f2045,f540,f16342,f465])).
fof(f21169,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155,f17138])).
fof(f21168,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177,f17155])).
fof(f21167,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17157,f16342])).
fof(f17157,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f552,f540,f16342,f465])).
fof(f21166,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17158,f16342])).
fof(f17158,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f575,f540,f16342,f465])).
fof(f21165,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17159,f304])).
fof(f17159,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1799,f540,f16342,f465])).
fof(f21164,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17160,f304])).
fof(f17160,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4895,f540,f16342,f465])).
fof(f21163,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17161,f304])).
fof(f17161,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9870,f540,f16342,f465])).
fof(f21162,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17162,f16342])).
fof(f17162,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f16342,f465])).
fof(f21161,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17163,f16342])).
fof(f17163,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9734,f540,f16342,f465])).
fof(f21160,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17164,f16342])).
fof(f17164,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f576,f540,f16342,f465])).
fof(f21159,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17165,f16342])).
fof(f17165,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1766,f540,f16342,f465])).
fof(f21158,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17166,f16342])).
fof(f17166,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4869,f540,f16342,f465])).
fof(f21157,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17167,f16342])).
fof(f17167,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f2008,f540,f16342,f465])).
fof(f21156,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17168,f16342])).
fof(f17168,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | $spl66),
  inference(unit_resulting_resolution,[],[f2045,f540,f16342,f465])).
fof(f21155,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194,f17177])).
fof(f21154,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196,f17194])).
fof(f21153,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198,f17196])).
fof(f21152,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200,f17198])).
fof(f21151,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202,f17200])).
fof(f21150,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248,f17202])).
fof(f21141,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17222,f19478])).
fof(f19478,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f581,f540,f893,f16342,f2656])).
fof(f17222,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl66),
  inference(unit_resulting_resolution,[],[f872,f16342,f474])).
fof(f21140,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17223,f19478])).
fof(f17223,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl66),
  inference(unit_resulting_resolution,[],[f874,f16342,f474])).
fof(f21139,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17224,f20553])).
fof(f20553,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f20552,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752])).
fof(f20552,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK15(X2,X3,bool,X1)))) | s(bool,X0) = s(bool,X4)) ) | ($spl65 | $spl66)),
  inference(condensation,[],[f20551])).
fof(f20551,plain,(
  ( ! [X843,X841,X839,X842,X840,X838] : (s(fun(X838,bool),X839) = s(fun(X838,bool),X840) | s(bool,X842) = s(bool,g(s(X838,sK15(X839,X840,bool,X838)))) | s(bool,'T_0') = s(bool,X841) | s(bool,X842) = s(bool,X843) | s(bool,'T_0') = s(bool,X843)) ) | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20286,f9020])).
fof(f9020,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl65),
  inference(trivial_inequality_removal,[],[f9015])).
fof(f9015,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl65),
  inference(superposition,[],[f7681,f752])).
fof(f20286,plain,(
  ( ! [X843,X841,X839,X842,X840,X838] : (s(bool,X841) != s(bool,g(s(bool,'T_0'))) | s(fun(X838,bool),X839) = s(fun(X838,bool),X840) | s(bool,X842) = s(bool,g(s(X838,sK15(X839,X840,bool,X838)))) | s(bool,'T_0') = s(bool,X841) | s(bool,X842) = s(bool,X843) | s(bool,'T_0') = s(bool,X843)) ) | ($spl65 | $spl66)),
  inference(backward_demodulation,[],[f19530,f12725])).
fof(f19530,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f581,f540,f7681,f16342,f2656])).
fof(f17224,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(unit_resulting_resolution,[],[f866,f16342,f474])).
fof(f21138,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17225,f20553])).
fof(f17225,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6612,f16342,f474])).
fof(f21137,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17226,f20553])).
fof(f17226,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f942,f16342,f474])).
fof(f21136,plain,(
  $false | ($spl61 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17228,f20553])).
fof(f17228,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5325,f16342,f474])).
fof(f5325,plain,(
  ~sP5('F_0','T_0',f(s(bool,'T_0'))) | $spl61),
  inference(unit_resulting_resolution,[],[f540,f4983,f476])).
fof(f21135,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17230,f19491])).
fof(f17230,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1895,f16342,f474])).
fof(f21134,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17231,f19478])).
fof(f17231,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1814,f16342,f474])).
fof(f21133,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17232,f19517])).
fof(f19517,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f581,f540,f4484,f16342,f2656])).
fof(f17232,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4656,f16342,f474])).
fof(f21132,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17233,f19530])).
fof(f17233,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9139,f16342,f474])).
fof(f9139,plain,(
  ~sP5('F_0','F_0',g(s(bool,'T_0'))) | ($spl3 | $spl65)),
  inference(unit_resulting_resolution,[],[f540,f9023,f476])).
fof(f21131,plain,(
  $false | ($spl61 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17234,f20553])).
fof(f17234,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5323,f16342,f474])).
fof(f5323,plain,(
  ~sP5('F_0',f(s(bool,'T_0')),'T_0') | $spl61),
  inference(unit_resulting_resolution,[],[f540,f4983,f476])).
fof(f21130,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17235,f19530])).
fof(f17235,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9130,f16342,f474])).
fof(f9130,plain,(
  ~sP5('F_0',g(s(bool,'T_0')),'F_0') | ($spl3 | $spl65)),
  inference(unit_resulting_resolution,[],[f540,f9023,f476])).
fof(f21129,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17236,f20553])).
fof(f17236,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(unit_resulting_resolution,[],[f864,f16342,f474])).
fof(f21128,plain,(
  $false | ($spl16 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17237,f20553])).
fof(f17237,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl16 | $spl66)),
  inference(unit_resulting_resolution,[],[f8131,f16342,f474])).
fof(f8131,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0') | $spl16),
  inference(unit_resulting_resolution,[],[f6162,f455])).
fof(f6162,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0','F_0') | $spl16),
  inference(unit_resulting_resolution,[],[f540,f5882,f2603])).
fof(f21127,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f17238,f20553])).
fof(f17238,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f940,f16342,f474])).
fof(f21126,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17239,f19491])).
fof(f17239,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1893,f16342,f474])).
fof(f21125,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17240,f19478])).
fof(f17240,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1812,f16342,f474])).
fof(f21124,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17241,f19517])).
fof(f17241,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4654,f16342,f474])).
fof(f21123,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f21122,f19530])).
fof(f21122,plain,(
  ( ! [X2,X0,X1] : (s(bool,g(s(bool,'T_0'))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f17242,f19530])).
fof(f17242,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1426,f16342,f474])).
fof(f21121,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f21120,f19530])).
fof(f21120,plain,(
  ( ! [X2,X0,X1] : (s(bool,g(s(bool,'T_0'))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) ) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f17243,f19530])).
fof(f17243,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int',X1)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1428,f16342,f474])).
fof(f21119,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f21118,f19530])).
fof(f21118,plain,(
  ( ! [X0,X1] : (s(bool,g(s(bool,'T_0'))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) ) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f17244,f19530])).
fof(f17244,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3863,f16342,f474])).
fof(f21117,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f21116,f19530])).
fof(f21116,plain,(
  ( ! [X0,X1] : (s(bool,g(s(bool,'T_0'))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) ) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f17245,f19530])).
fof(f17245,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3918,f16342,f474])).
fof(f21115,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250,f17248])).
fof(f21114,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254,f17250])).
fof(f21113,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17252,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254])).
fof(f17252,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'T_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f881,f16342,f474])).
fof(f21112,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256,f17254])).
fof(f21111,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260,f17256])).
fof(f21110,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17258,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260])).
fof(f17258,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f896,f16342,f474])).
fof(f21109,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262,f17260])).
fof(f21108,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269,f17262])).
fof(f21107,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17263,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269])).
fof(f17263,plain,(
  ( ! [X0] : (sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4449,f16342,f474])).
fof(f21106,plain,(
  $false | ($spl61 | $spl66)),
  inference(global_subsumption,[],[f17265,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269])).
fof(f17265,plain,(
  ( ! [X0] : (sP5(X0,f(s(bool,'T_0')),'T_0')) ) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f4983,f16342,f474])).
fof(f21105,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(global_subsumption,[],[f17267,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269])).
fof(f17267,plain,(
  ( ! [X0] : (sP5(X0,g(s(bool,'T_0')),'F_0')) ) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9023,f16342,f474])).
fof(f21104,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271,f17269])).
fof(f21103,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275,f17271])).
fof(f21102,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17273,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275])).
fof(f17273,plain,(
  ( ! [X0] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f881,f16342,f474])).
fof(f21101,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277,f17275])).
fof(f21100,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281,f17277])).
fof(f21099,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17279,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281])).
fof(f17279,plain,(
  ( ! [X0] : (sP5(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f896,f16342,f474])).
fof(f21098,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283,f17281])).
fof(f21097,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347,f17283])).
fof(f21096,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17284,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347])).
fof(f17284,plain,(
  ( ! [X0] : (sP5(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4449,f16342,f474])).
fof(f21095,plain,(
  $false | ($spl61 | $spl66)),
  inference(global_subsumption,[],[f17286,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347])).
fof(f17286,plain,(
  ( ! [X0] : (sP5(X0,'T_0',f(s(bool,'T_0')))) ) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f4983,f16342,f474])).
fof(f21094,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(global_subsumption,[],[f17288,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347])).
fof(f17288,plain,(
  ( ! [X0] : (sP5(X0,'F_0',g(s(bool,'T_0')))) ) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9023,f16342,f474])).
fof(f21080,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351,f17347])).
fof(f21079,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17349,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351])).
fof(f17349,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f16342,f475])).
fof(f21078,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353,f17351])).
fof(f21077,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358,f17353])).
fof(f21076,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17354,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358])).
fof(f17354,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f16342,f475])).
fof(f21075,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f17356,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358])).
fof(f17356,plain,(
  ( ! [X0] : (~sP5(X0,'T_0',g(s(bool,'T_0')))) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f16342,f475])).
fof(f21074,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362,f17358])).
fof(f21073,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17360,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362])).
fof(f17360,plain,(
  ( ! [X0] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))),'T_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f16342,f475])).
fof(f21072,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364,f17362])).
fof(f21071,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378,f17364])).
fof(f21070,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f17365,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378])).
fof(f17365,plain,(
  ( ! [X0] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f16342,f475])).
fof(f21069,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f17367,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378])).
fof(f17367,plain,(
  ( ! [X0] : (~sP5(X0,g(s(bool,'T_0')),'T_0')) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f16342,f475])).
fof(f21068,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389,f17378])).
fof(f21067,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401,f17389])).
fof(f21066,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17391,f16342])).
fof(f17391,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f635,f16342,f480])).
fof(f21065,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17392,f16342])).
fof(f17392,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f638,f16342,f480])).
fof(f21064,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17393,f16342])).
fof(f17393,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f560,f638,f16342,f480])).
fof(f21063,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17394,f16342])).
fof(f17394,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f638,f16342,f480])).
fof(f21062,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17395,f16342])).
fof(f17395,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f638,f16342,f480])).
fof(f21061,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17396,f16342])).
fof(f17396,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f5964,f16342,f480])).
fof(f21060,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17397,f16342])).
fof(f17397,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f5965,f16342,f480])).
fof(f21059,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17398,f16342])).
fof(f17398,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5988,f5965,f16342,f480])).
fof(f21058,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17399,f16342])).
fof(f17399,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f5965,f16342,f480])).
fof(f21057,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17400,f16342])).
fof(f17400,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f5965,f16342,f480])).
fof(f21056,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402,f17401])).
fof(f21055,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403,f17402])).
fof(f21054,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404,f17403])).
fof(f21053,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405,f17404])).
fof(f21052,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412,f17405])).
fof(f21051,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17406,f560])).
fof(f17406,plain,(
  ~sP6('F_0','T_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f16342,f480])).
fof(f21050,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17410,f5988])).
fof(f17410,plain,(
  ~sP6('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f304,f16342,f480])).
fof(f21049,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413,f17412])).
fof(f21048,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414,f17413])).
fof(f21047,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415,f17414])).
fof(f21046,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416,f17415])).
fof(f21045,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417,f17416])).
fof(f21044,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418,f17417])).
fof(f21043,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442,f17418])).
fof(f21042,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17419,f560])).
fof(f17419,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f480])).
fof(f21041,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17421,f560])).
fof(f17421,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f480])).
fof(f21040,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17428,f5988])).
fof(f17428,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f480])).
fof(f21039,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17430,f5988])).
fof(f17430,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f480])).
fof(f21038,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17432,f16342])).
fof(f17432,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f635,f16342,f480])).
fof(f21037,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17433,f16342])).
fof(f17433,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f560,f635,f16342,f480])).
fof(f21036,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17434,f16342])).
fof(f17434,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f635,f16342,f480])).
fof(f21035,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17435,f16342])).
fof(f17435,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f635,f16342,f480])).
fof(f21034,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17436,f16342])).
fof(f17436,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f638,f16342,f480])).
fof(f21033,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17437,f16342])).
fof(f17437,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f5964,f16342,f480])).
fof(f21032,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17438,f16342])).
fof(f17438,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5988,f5964,f16342,f480])).
fof(f21031,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17439,f16342])).
fof(f17439,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f5964,f16342,f480])).
fof(f21030,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17440,f16342])).
fof(f17440,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f5964,f16342,f480])).
fof(f21029,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17441,f16342])).
fof(f17441,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f5965,f16342,f480])).
fof(f21028,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443,f17442])).
fof(f21027,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444,f17443])).
fof(f21026,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445,f17444])).
fof(f21025,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446,f17445])).
fof(f21024,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455,f17446])).
fof(f21023,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17447,f560])).
fof(f17447,plain,(
  ~sP6('T_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f480])).
fof(f21022,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17453,f5988])).
fof(f17453,plain,(
  ~sP6('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f304,f16342,f480])).
fof(f21021,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456,f17455])).
fof(f21020,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457,f17456])).
fof(f21019,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458,f17457])).
fof(f21018,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459,f17458])).
fof(f21017,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460,f17459])).
fof(f21016,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461,f17460])).
fof(f21015,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484,f17461])).
fof(f21014,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17462,f560])).
fof(f17462,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f480])).
fof(f21013,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17464,f560])).
fof(f17464,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f480])).
fof(f21012,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17471,f5988])).
fof(f17471,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f480])).
fof(f21011,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17473,f5988])).
fof(f17473,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f480])).
fof(f21010,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17475,f16342])).
fof(f17475,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f540,f16342,f484])).
fof(f21009,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17476,f16342])).
fof(f17476,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f540,f16342,f484])).
fof(f21008,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17477,f16342])).
fof(f17477,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f16342,f484])).
fof(f21007,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17478,f16342])).
fof(f17478,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f540,f16342,f484])).
fof(f21006,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493,f17484])).
fof(f21005,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504,f17493])).
fof(f21004,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17495,f16342])).
fof(f17495,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f562,f540,f16342,f484])).
fof(f21003,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17496,f16342])).
fof(f17496,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f577,f540,f16342,f484])).
fof(f21002,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17497,f16342])).
fof(f17497,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f16342,f484])).
fof(f21001,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17498,f16342])).
fof(f17498,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f578,f540,f16342,f484])).
fof(f21000,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513,f17504])).
fof(f20999,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515,f17513])).
fof(f20998,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532,f17515])).
fof(f20997,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17517,f16342])).
fof(f17517,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f490])).
fof(f20996,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17518,f16342])).
fof(f17518,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f16342,f490])).
fof(f20995,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17519,f16342])).
fof(f17519,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f490])).
fof(f20994,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17520,f16342])).
fof(f17520,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f490])).
fof(f20993,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17521,f304])).
fof(f17521,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f16342,f16342,f490])).
fof(f20992,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17522,f16342])).
fof(f17522,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f16342,f16342,f490])).
fof(f20991,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17523,f16342])).
fof(f17523,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f16342,f16342,f490])).
fof(f20990,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17524,f16342])).
fof(f17524,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f16342,f16342,f490])).
fof(f20989,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17525,f304])).
fof(f17525,plain,(
  ~p(s(bool,'T_0')) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f16342,f16342,f490])).
fof(f6168,plain,(
  ~sP7('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0') | $spl20),
  inference(unit_resulting_resolution,[],[f540,f5882,f2609])).
fof(f20988,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17526,f16342])).
fof(f17526,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f490])).
fof(f20987,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17527,f16342])).
fof(f17527,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f490])).
fof(f20986,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17528,f304])).
fof(f17528,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f16342,f490])).
fof(f20985,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17529,f16342])).
fof(f17529,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f304,f16342,f490])).
fof(f20984,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17530,f16342])).
fof(f17530,plain,(
  ~p(s(bool,'F_0')) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f304,f16342,f490])).
fof(f20983,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17531,f16342])).
fof(f17531,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f304,f16342,f490])).
fof(f20982,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534,f17532])).
fof(f20981,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545,f17534])).
fof(f20980,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17536,f304])).
fof(f17536,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f490])).
fof(f20979,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17537,f304])).
fof(f17537,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f490])).
fof(f20978,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17538,f16342])).
fof(f17538,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f16342,f16342,f490])).
fof(f20977,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17539,f16342])).
fof(f17539,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f16342,f16342,f490])).
fof(f20976,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17540,f16342])).
fof(f17540,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f16342,f16342,f490])).
fof(f20975,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17541,f16342])).
fof(f17541,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f16342,f16342,f490])).
fof(f20974,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17542,f16342])).
fof(f17542,plain,(
  ~p(s(bool,'F_0')) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f16342,f16342,f490])).
fof(f20973,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17543,f16342])).
fof(f17543,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f490])).
fof(f20972,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17544,f16342])).
fof(f17544,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f490])).
fof(f20971,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547,f17545])).
fof(f20970,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566,f17547])).
fof(f20969,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17549,f16342])).
fof(f17549,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f490])).
fof(f20968,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17550,f16342])).
fof(f17550,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f16342,f490])).
fof(f20967,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17551,f16342])).
fof(f17551,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f490])).
fof(f20966,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17552,f16342])).
fof(f17552,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f490])).
fof(f20965,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17553,f304])).
fof(f17553,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f16342,f16342,f490])).
fof(f20964,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17554,f304])).
fof(f17554,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f16342,f16342,f490])).
fof(f20963,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17555,f304])).
fof(f17555,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f16342,f16342,f490])).
fof(f20962,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17556,f304])).
fof(f17556,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f16342,f16342,f490])).
fof(f20961,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17557,f16342])).
fof(f17557,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f16342,f16342,f490])).
fof(f20960,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17558,f16342])).
fof(f17558,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f490])).
fof(f20959,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17559,f16342])).
fof(f17559,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f490])).
fof(f20958,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17560,f304])).
fof(f17560,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f490])).
fof(f20957,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17561,f16342])).
fof(f17561,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f304,f16342,f490])).
fof(f20956,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17562,f16342])).
fof(f17562,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f304,f16342,f490])).
fof(f20955,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17563,f16342])).
fof(f17563,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f304,f16342,f490])).
fof(f20954,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17564,f16342])).
fof(f17564,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f304,f16342,f490])).
fof(f20953,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17565,f16342])).
fof(f17565,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f304,f16342,f490])).
fof(f20952,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568,f17566])).
fof(f20951,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579,f17568])).
fof(f20950,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17570,f304])).
fof(f17570,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f490])).
fof(f20949,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17571,f304])).
fof(f17571,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f490])).
fof(f20948,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17572,f16342])).
fof(f17572,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f16342,f16342,f490])).
fof(f20947,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17573,f16342])).
fof(f17573,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f16342,f16342,f490])).
fof(f20946,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17574,f16342])).
fof(f17574,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f16342,f16342,f490])).
fof(f20945,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17575,f16342])).
fof(f17575,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f16342,f16342,f490])).
fof(f20944,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17576,f16342])).
fof(f17576,plain,(
  ~p(s(bool,'F_0')) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f16342,f16342,f490])).
fof(f20943,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17577,f16342])).
fof(f17577,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f490])).
fof(f20942,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17578,f16342])).
fof(f17578,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f490])).
fof(f20941,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581,f17579])).
fof(f20940,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602,f17581])).
fof(f20939,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17583,f16342])).
fof(f17583,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f16342,f490])).
fof(f20938,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17584,f304])).
fof(f17584,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f304,f16342,f490])).
fof(f20937,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17585,f16342])).
fof(f17585,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f304,f16342,f490])).
fof(f20936,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17586,f16342])).
fof(f17586,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f304,f16342,f490])).
fof(f20935,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17587,f16342])).
fof(f17587,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f490])).
fof(f20934,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17588,f16342])).
fof(f17588,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f490])).
fof(f20933,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17589,f304])).
fof(f17589,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f16342,f16342,f490])).
fof(f20932,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17590,f304])).
fof(f17590,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f16342,f16342,f490])).
fof(f20931,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17591,f304])).
fof(f17591,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f16342,f16342,f490])).
fof(f20930,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17592,f304])).
fof(f17592,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f16342,f16342,f490])).
fof(f20929,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17593,f16342])).
fof(f17593,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f16342,f16342,f490])).
fof(f20928,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17594,f16342])).
fof(f17594,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f490])).
fof(f20927,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17595,f16342])).
fof(f17595,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f490])).
fof(f20926,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17596,f16342])).
fof(f17596,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f490])).
fof(f20925,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17597,f304])).
fof(f17597,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f304,f16342,f490])).
fof(f20924,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17598,f16342])).
fof(f17598,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f304,f16342,f490])).
fof(f20923,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17599,f16342])).
fof(f17599,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f304,f16342,f490])).
fof(f20922,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17600,f16342])).
fof(f17600,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f304,f16342,f490])).
fof(f20921,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17601,f16342])).
fof(f17601,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f304,f16342,f490])).
fof(f20920,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604,f17602])).
fof(f20919,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615,f17604])).
fof(f20918,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17606,f16342])).
fof(f17606,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f490])).
fof(f20917,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17607,f16342])).
fof(f17607,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f16342,f490])).
fof(f20916,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17608,f304])).
fof(f17608,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f16342,f16342,f490])).
fof(f20915,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17609,f16342])).
fof(f17609,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1499,f16342,f16342,f490])).
fof(f20914,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17610,f16342])).
fof(f17610,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f3277,f16342,f16342,f490])).
fof(f20913,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17611,f16342])).
fof(f17611,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6007,f16342,f16342,f490])).
fof(f20912,plain,(
  $false | ($spl20 | $spl66)),
  inference(subsumption_resolution,[],[f17612,f304])).
fof(f17612,plain,(
  ~p(s(bool,'T_0')) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f6168,f16342,f16342,f490])).
fof(f20911,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17613,f16342])).
fof(f17613,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f5964,f16342,f16342,f490])).
fof(f20910,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17614,f16342])).
fof(f17614,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f5965,f16342,f16342,f490])).
fof(f20909,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617,f17615])).
fof(f20908,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629,f17617])).
fof(f20907,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17619,f16342])).
fof(f17619,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f641,f540,f16342,f493])).
fof(f20906,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17620,f16342])).
fof(f17620,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f739,f540,f16342,f493])).
fof(f20905,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17621,f16342])).
fof(f17621,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f16342,f493])).
fof(f20904,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17622,f16342])).
fof(f17622,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f741,f540,f16342,f493])).
fof(f20903,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640,f17629])).
fof(f20902,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652,f17640])).
fof(f20901,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17642,f16342])).
fof(f17642,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f641,f540,f16342,f493])).
fof(f20900,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17643,f16342])).
fof(f17643,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f739,f540,f16342,f493])).
fof(f20899,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17644,f16342])).
fof(f17644,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f16342,f493])).
fof(f20898,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17645,f16342])).
fof(f17645,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f741,f540,f16342,f493])).
fof(f20897,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663,f17652])).
fof(f20896,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691,f17663])).
fof(f20895,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719,f17691])).
fof(f20894,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733,f17719])).
fof(f20893,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734,f17733])).
fof(f20892,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735,f17734])).
fof(f20891,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736,f17735])).
fof(f20890,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737,f17736])).
fof(f20889,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769,f17737])).
fof(f20888,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17740,f566])).
fof(f17740,plain,(
  ~sP8('F_0','T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f652,f540,f16342,f498])).
fof(f20887,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17742,f6041])).
fof(f17742,plain,(
  ~sP8('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f540,f16342,f498])).
fof(f20886,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17763,f564])).
fof(f17763,plain,(
  ~sP8('F_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f648,f540,f16342,f499])).
fof(f20885,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17764,f6040])).
fof(f17764,plain,(
  ~sP8('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f540,f16342,f499])).
fof(f20884,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771,f17769])).
fof(f20883,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772,f17771])).
fof(f20882,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774,f17772])).
fof(f20881,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778,f17774])).
fof(f20880,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793,f17778])).
fof(f20879,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795,f17793])).
fof(f20878,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797,f17795])).
fof(f20877,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807,f17797])).
fof(f20876,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17799,f16342])).
fof(f17799,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f506])).
fof(f20875,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17800,f16342])).
fof(f17800,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f16342,f506])).
fof(f20874,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17801,f16342])).
fof(f17801,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f652,f16342,f506])).
fof(f20873,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17802,f16342])).
fof(f17802,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f16342,f506])).
fof(f20872,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17803,f304])).
fof(f17803,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f16342,f506])).
fof(f20871,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17804,f16342])).
fof(f17804,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1555,f16342,f506])).
fof(f20870,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17805,f16342])).
fof(f17805,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f3552,f16342,f506])).
fof(f20869,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17806,f16342])).
fof(f17806,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6052,f16342,f506])).
fof(f20868,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809,f17807])).
fof(f20867,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819,f17809])).
fof(f20866,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17811,f304])).
fof(f17811,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f506])).
fof(f20865,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17812,f16342])).
fof(f17812,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f16342,f506])).
fof(f20864,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17813,f16342])).
fof(f17813,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f652,f16342,f506])).
fof(f20863,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17814,f16342])).
fof(f17814,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f16342,f506])).
fof(f20862,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17815,f16342])).
fof(f17815,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f16342,f506])).
fof(f20861,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17816,f16342])).
fof(f17816,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1555,f16342,f506])).
fof(f20860,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17817,f16342])).
fof(f17817,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3552,f16342,f506])).
fof(f20859,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17818,f16342])).
fof(f17818,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6052,f16342,f506])).
fof(f20858,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821,f17819])).
fof(f20857,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831,f17821])).
fof(f20856,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17823,f16342])).
fof(f17823,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f507])).
fof(f20855,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17824,f16342])).
fof(f17824,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f16342,f507])).
fof(f20854,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17825,f16342])).
fof(f17825,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f652,f16342,f507])).
fof(f20853,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17826,f16342])).
fof(f17826,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f16342,f507])).
fof(f20852,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17827,f304])).
fof(f17827,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f16342,f507])).
fof(f20851,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17828,f16342])).
fof(f17828,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1555,f16342,f507])).
fof(f20850,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17829,f16342])).
fof(f17829,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f3552,f16342,f507])).
fof(f20849,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17830,f16342])).
fof(f17830,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6052,f16342,f507])).
fof(f20848,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833,f17831])).
fof(f20847,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843,f17833])).
fof(f20846,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17835,f16342])).
fof(f17835,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f507])).
fof(f20845,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17836,f16342])).
fof(f17836,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f16342,f507])).
fof(f20844,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17837,f304])).
fof(f17837,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f652,f16342,f507])).
fof(f20843,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17838,f16342])).
fof(f17838,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f16342,f507])).
fof(f20842,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17839,f16342])).
fof(f17839,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f16342,f507])).
fof(f20841,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f17840,f16342])).
fof(f17840,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1555,f16342,f507])).
fof(f20840,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17841,f16342])).
fof(f17841,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3552,f16342,f507])).
fof(f20839,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17842,f16342])).
fof(f17842,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6052,f16342,f507])).
fof(f20838,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845,f17843])).
fof(f20837,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875,f17845])).
fof(f20836,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899,f17875])).
fof(f20835,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910,f17899])).
fof(f20834,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17901,f16342])).
fof(f17901,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f669,f16342,f515])).
fof(f20833,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17902,f16342])).
fof(f17902,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f673,f16342,f515])).
fof(f20832,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17903,f16342])).
fof(f17903,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f570,f673,f16342,f515])).
fof(f20831,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17904,f16342])).
fof(f17904,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f673,f16342,f515])).
fof(f20830,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17905,f16342])).
fof(f17905,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f673,f16342,f515])).
fof(f20829,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17906,f16342])).
fof(f17906,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f6053,f16342,f515])).
fof(f20828,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17907,f16342])).
fof(f17907,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6088,f6053,f16342,f515])).
fof(f20827,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17908,f16342])).
fof(f17908,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f6053,f16342,f515])).
fof(f20826,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17909,f16342])).
fof(f17909,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f6053,f16342,f515])).
fof(f20825,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911,f17910])).
fof(f20824,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912,f17911])).
fof(f20823,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913,f17912])).
fof(f20822,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914,f17913])).
fof(f20821,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925,f17914])).
fof(f20820,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17917,f570])).
fof(f17917,plain,(
  ~sP10('F_0','T_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f673,f304,f16342,f515])).
fof(f20819,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17919,f6088])).
fof(f17919,plain,(
  ~sP10('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),'T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f304,f16342,f515])).
fof(f20818,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926,f17925])).
fof(f20817,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927,f17926])).
fof(f20816,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928,f17927])).
fof(f20815,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929,f17928])).
fof(f20814,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930,f17929])).
fof(f20813,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931,f17930])).
fof(f20812,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977,f17931])).
fof(f20811,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17934,f569])).
fof(f17934,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f16342,f515])).
fof(f20810,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17936,f570])).
fof(f17936,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f16342,f16342,f515])).
fof(f20809,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17938,f6088])).
fof(f17938,plain,(
  ( ! [X0] : (~sP10('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f16342,f16342,f515])).
fof(f20808,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17947,f16342])).
fof(f17947,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f569,f16342,f515])).
fof(f20807,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17948,f16342])).
fof(f17948,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f569,f16342,f515])).
fof(f20806,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17949,f16342])).
fof(f17949,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f569,f16342,f515])).
fof(f20805,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17950,f16342])).
fof(f17950,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f580,f16342,f515])).
fof(f20804,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17951,f16342])).
fof(f17951,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f580,f16342,f515])).
fof(f20803,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17952,f16342])).
fof(f17952,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f570,f16342,f515])).
fof(f20802,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17953,f16342])).
fof(f17953,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f570,f16342,f515])).
fof(f20801,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17954,f16342])).
fof(f17954,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f571,f16342,f515])).
fof(f20800,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17955,f16342])).
fof(f17955,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f6088,f16342,f515])).
fof(f20799,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17956,f16342])).
fof(f17956,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f6088,f16342,f515])).
fof(f20798,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17957,f16342])).
fof(f17957,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f572,f16342,f515])).
fof(f20797,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17967,f569])).
fof(f17967,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f16342,f515])).
fof(f20796,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17968,f570])).
fof(f17968,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f16342,f16342,f515])).
fof(f20795,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f17969,f6088])).
fof(f17969,plain,(
  ( ! [X0] : (~sP10('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f16342,f16342,f515])).
fof(f20794,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979,f17977])).
fof(f20793,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981,f17979])).
fof(f20792,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983,f17981])).
fof(f20791,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985,f17983])).
fof(f20790,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987,f17985])).
fof(f20789,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989,f17987])).
fof(f20788,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011,f17989])).
fof(f20787,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18003,f569])).
fof(f18003,plain,(
  ~sP10('F_0','F_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f669,f540,f16342,f516])).
fof(f20786,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013,f18011])).
fof(f20785,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014,f18013])).
fof(f20784,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016,f18014])).
fof(f20783,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036,f18016])).
fof(f20782,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18028,f569])).
fof(f18028,plain,(
  ~sP10('F_0','F_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f669,f540,f16342,f517])).
fof(f20781,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038,f18036])).
fof(f20780,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039,f18038])).
fof(f20779,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041,f18039])).
fof(f20778,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064,f18041])).
fof(f20777,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18058,f16342])).
fof(f18058,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f540,f16342,f518])).
fof(f20776,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18059,f16342])).
fof(f18059,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f540,f16342,f518])).
fof(f20775,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18060,f16342])).
fof(f18060,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f16342,f518])).
fof(f20774,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18061,f16342])).
fof(f18061,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f16342,f518])).
fof(f20773,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084,f18064])).
fof(f20772,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18080,f16342])).
fof(f18080,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f569,f540,f16342,f518])).
fof(f20771,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18081,f16342])).
fof(f18081,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f580,f540,f16342,f518])).
fof(f20770,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18082,f16342])).
fof(f18082,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f16342,f518])).
fof(f20769,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18083,f16342])).
fof(f18083,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f540,f16342,f518])).
fof(f20768,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086,f18084])).
fof(f20767,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088,f18086])).
fof(f20766,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101,f18088])).
fof(f20765,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113,f18101])).
fof(f20764,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127,f18113])).
fof(f20763,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18115,f16342])).
fof(f18115,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f524])).
fof(f20762,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18116,f16342])).
fof(f18116,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f16342,f524])).
fof(f20761,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18117,f16342])).
fof(f18117,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f16342,f524])).
fof(f20760,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18118,f304])).
fof(f18118,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f16342,f524])).
fof(f20759,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18119,f304])).
fof(f18119,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f16342,f524])).
fof(f20758,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18120,f304])).
fof(f18120,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f16342,f524])).
fof(f20757,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f18121,f304])).
fof(f18121,plain,(
  ~p(s(bool,'T_0')) | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f16342,f524])).
fof(f6175,plain,(
  ~sP11('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl36),
  inference(unit_resulting_resolution,[],[f540,f5882,f2633])).
fof(f20756,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18122,f16342])).
fof(f18122,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f16342,f524])).
fof(f20755,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18123,f16342])).
fof(f18123,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f3630,f16342,f524])).
fof(f20754,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18124,f16342])).
fof(f18124,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6101,f16342,f524])).
fof(f20753,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139,f18127])).
fof(f20752,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18129,f16342])).
fof(f18129,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f524])).
fof(f20751,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18130,f304])).
fof(f18130,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f16342,f524])).
fof(f20750,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18131,f16342])).
fof(f18131,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f16342,f524])).
fof(f20749,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18132,f16342])).
fof(f18132,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f16342,f524])).
fof(f20748,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18133,f16342])).
fof(f18133,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f16342,f524])).
fof(f20747,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18134,f16342])).
fof(f18134,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f16342,f524])).
fof(f20746,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f18135,f16342])).
fof(f18135,plain,(
  ~p(s(bool,'F_0')) | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f16342,f524])).
fof(f20745,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18136,f16342])).
fof(f18136,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f16342,f524])).
fof(f20744,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18137,f16342])).
fof(f18137,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f3630,f16342,f524])).
fof(f20743,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18138,f16342])).
fof(f18138,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6101,f16342,f524])).
fof(f20742,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141,f18139])).
fof(f20741,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183,f18141])).
fof(f20740,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18143,f304])).
fof(f18143,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f16342,f525])).
fof(f20739,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18144,f304])).
fof(f18144,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f16342,f525])).
fof(f20738,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18145,f16342])).
fof(f18145,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1212,f540,f16342,f525])).
fof(f20737,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18146,f16342])).
fof(f18146,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6089,f540,f16342,f525])).
fof(f20736,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f18147,f16342])).
fof(f18147,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f16342,f525])).
fof(f11232,plain,(
  ( ! [X0] : (sP11(f(s(bool,'T_0')),X0,'F_0')) ) | $spl61),
  inference(unit_resulting_resolution,[],[f540,f5406])).
fof(f5406,plain,(
  ( ! [X30,X29] : (sP11(f(s(bool,'T_0')),X30,X29) | p(s(bool,X29))) ) | $spl61),
  inference(subsumption_resolution,[],[f5359,f304])).
fof(f5359,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP11(f(s(bool,'T_0')),X30,X29)) ) | $spl61),
  inference(superposition,[],[f523,f4983])).
fof(f20735,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18148,f16342])).
fof(f18148,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f540,f16342,f525])).
fof(f20734,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18149,f16342])).
fof(f18149,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) | $spl66),
  inference(unit_resulting_resolution,[],[f4156,f540,f16342,f525])).
fof(f20733,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18150,f16342])).
fof(f18150,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6103,f540,f16342,f525])).
fof(f20732,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18151,f16342])).
fof(f18151,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f16342,f525])).
fof(f20731,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18152,f16342])).
fof(f18152,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f16342,f525])).
fof(f20730,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18153,f16342])).
fof(f18153,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1213,f540,f16342,f525])).
fof(f20729,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209,f18183])).
fof(f20728,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18185,f16342])).
fof(f18185,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f16342,f525])).
fof(f20727,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18186,f16342])).
fof(f18186,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f16342,f525])).
fof(f20726,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18187,f304])).
fof(f18187,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1212,f540,f16342,f525])).
fof(f20725,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18188,f16342])).
fof(f18188,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6089,f540,f16342,f525])).
fof(f20724,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f18189,f16342])).
fof(f18189,plain,(
  ~p(s(bool,'F_0')) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f16342,f525])).
fof(f20723,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18190,f16342])).
fof(f18190,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f540,f16342,f525])).
fof(f20722,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18191,f16342])).
fof(f18191,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f4156,f540,f16342,f525])).
fof(f20721,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18192,f16342])).
fof(f18192,plain,(
  ~p(s(bool,'F_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f6103,f540,f16342,f525])).
fof(f20720,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18193,f16342])).
fof(f18193,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f16342,f525])).
fof(f20719,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f18194,f16342])).
fof(f18194,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f16342,f525])).
fof(f20718,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18195,f304])).
fof(f18195,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f1213,f540,f16342,f525])).
fof(f20717,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233,f18209])).
fof(f20716,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245,f18233])).
fof(f20715,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18235,f569])).
fof(f18235,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f528])).
fof(f20714,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18236,f570])).
fof(f18236,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f673,f16342,f528])).
fof(f20713,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18237,f6088])).
fof(f18237,plain,(
  ( ! [X0] : (~sP10('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f16342,f528])).
fof(f20712,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247,f18245])).
fof(f20711,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249,f18247])).
fof(f20710,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251,f18249])).
fof(f20709,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253,f18251])).
fof(f20708,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255,f18253])).
fof(f20707,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257,f18255])).
fof(f20706,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268,f18257])).
fof(f20705,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18260,f564])).
fof(f18260,plain,(
  ( ! [X0] : (~sP8('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f529])).
fof(f20704,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18261,f6040])).
fof(f18261,plain,(
  ( ! [X0] : (~sP8('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f16342,f529])).
fof(f20703,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18262,f566])).
fof(f18262,plain,(
  ( ! [X0] : (~sP8('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f652,f16342,f529])).
fof(f20702,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18263,f6041])).
fof(f18263,plain,(
  ( ! [X0] : (~sP8('F_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))),X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f16342,f529])).
fof(f20701,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270,f18268])).
fof(f20700,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272,f18270])).
fof(f20699,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274,f18272])).
fof(f20698,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276,f18274])).
fof(f20697,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278,f18276])).
fof(f20696,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280,f18278])).
fof(f20695,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284,f18280])).
fof(f20694,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287,f18284])).
fof(f20693,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289,f18287])).
fof(f20692,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291,f18289])).
fof(f20691,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293,f18291])).
fof(f20690,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313,f18293])).
fof(f20689,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18301,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313])).
fof(f18301,plain,(
  ( ! [X0] : (~sP5(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f978])).
fof(f20688,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18307,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313])).
fof(f18307,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f979])).
fof(f20687,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18309,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313])).
fof(f18309,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f980])).
fof(f20686,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18311,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313])).
fof(f18311,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f982])).
fof(f20685,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329,f18313])).
fof(f20684,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18321,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329])).
fof(f18321,plain,(
  ( ! [X0] : (~sP4(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f1003])).
fof(f20683,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347,f18329])).
fof(f20682,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18337,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347])).
fof(f18337,plain,(
  ( ! [X0] : (~sP3(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f1025])).
fof(f20681,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363,f18347])).
fof(f20680,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18355,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363])).
fof(f18355,plain,(
  ( ! [X0] : (~sP6(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f1074])).
fof(f20679,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373,f18363])).
fof(f20678,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18368,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373])).
fof(f18368,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f1107])).
fof(f20677,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393,f18373])).
fof(f20676,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18383,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393])).
fof(f18383,plain,(
  ( ! [X0] : (~sP10(X0,'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f1237])).
fof(f20675,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707,f18393])).
fof(f20674,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18402,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18402,plain,(
  ( ! [X0] : (~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14)),'F_0',X0)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f1275])).
fof(f20673,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18409,f16342])).
fof(f18409,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1894,f16342,f1448])).
fof(f20672,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18419,f16342])).
fof(f18419,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f573,f16342,f1450])).
fof(f20671,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18420,f16342])).
fof(f18420,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f549,f16342,f1450])).
fof(f20670,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18421,f16342])).
fof(f18421,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f574,f16342,f1450])).
fof(f20669,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18434,f16342])).
fof(f18434,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f575,f16342,f1451])).
fof(f20668,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18435,f16342])).
fof(f18435,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f553,f16342,f1451])).
fof(f20667,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18436,f16342])).
fof(f18436,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f576,f16342,f1451])).
fof(f20666,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18447,f16342])).
fof(f18447,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f577,f16342,f1452])).
fof(f20665,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18448,f16342])).
fof(f18448,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f563,f16342,f1452])).
fof(f20664,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18449,f16342])).
fof(f18449,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f578,f16342,f1452])).
fof(f20663,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18460,f16342])).
fof(f18460,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f739,f16342,f1453])).
fof(f20662,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18461,f16342])).
fof(f18461,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f647,f16342,f1453])).
fof(f20661,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18462,f16342])).
fof(f18462,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f741,f16342,f1453])).
fof(f20660,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18472,f16342])).
fof(f18472,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f580,f16342,f1458])).
fof(f20659,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18473,f16342])).
fof(f18473,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f572,f16342,f1458])).
fof(f20658,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18474,f16342])).
fof(f18474,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f581,f16342,f1458])).
fof(f20657,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f18488,f16342])).
fof(f18488,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1))))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1213,f16342,f1461])).
fof(f20656,plain,(
  $false | ($spl10 | $spl66)),
  inference(global_subsumption,[],[f18506,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18506,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | ($spl10 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f2593])).
fof(f20655,plain,(
  $false | ($spl14 | $spl66)),
  inference(global_subsumption,[],[f18515,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18515,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | ($spl14 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f2600])).
fof(f20654,plain,(
  $false | ($spl16 | $spl66)),
  inference(global_subsumption,[],[f18525,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18525,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | ($spl16 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f2603])).
fof(f20653,plain,(
  $false | ($spl18 | $spl66)),
  inference(global_subsumption,[],[f18532,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18532,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | ($spl18 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f2606])).
fof(f20652,plain,(
  $false | ($spl20 | $spl66)),
  inference(global_subsumption,[],[f18540,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18540,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f16342,f2609])).
fof(f20651,plain,(
  $false | ($spl24 | $spl66)),
  inference(global_subsumption,[],[f18542,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18542,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f2615])).
fof(f20650,plain,(
  $false | ($spl26 | $spl66)),
  inference(global_subsumption,[],[f18544,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f18544,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl26 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f2618])).
fof(f20645,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763,f18707])).
fof(f20644,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18735,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763])).
fof(f18735,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f893,f893,f16342,f2646])).
fof(f20643,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791,f18763])).
fof(f20642,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877,f18791])).
fof(f20641,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18819,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877])).
fof(f18819,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f4484,f4484,f16342,f2646])).
fof(f20640,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f18847,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877])).
fof(f18847,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f7681,f7681,f16342,f2646])).
fof(f20639,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878,f18877])).
fof(f20638,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886,f18878])).
fof(f20637,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918,f18886])).
fof(f20636,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18902,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918])).
fof(f18902,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f893,f893,f16342,f2648])).
fof(f20635,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934,f18918])).
fof(f20634,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003,f18934])).
fof(f20633,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f18950,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003])).
fof(f18950,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f4484,f4484,f16342,f2648])).
fof(f20632,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f18966,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003])).
fof(f18966,plain,(
  ( ! [X0] : (~sP4(X0,'T_0','F_0')) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f7681,f7681,f16342,f2648])).
fof(f20631,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005,f19003])).
fof(f20630,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018,f19005])).
fof(f20628,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062,f19018])).
fof(f20627,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19040,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062])).
fof(f19040,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f893,f893,f16342,f2649])).
fof(f20626,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084,f19062])).
fof(f20625,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152,f19084])).
fof(f20624,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19106,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152])).
fof(f19106,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f4484,f4484,f16342,f2649])).
fof(f20623,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f19128,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152])).
fof(f19128,plain,(
  ( ! [X0] : (~sP3(X0,'T_0','F_0')) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f7681,f7681,f16342,f2649])).
fof(f20622,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153,f19152])).
fof(f20621,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159,f19153])).
fof(f20620,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181,f19159])).
fof(f20619,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19170,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181])).
fof(f19170,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f893,f893,f16342,f2650])).
fof(f20618,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192,f19181])).
fof(f20617,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238,f19192])).
fof(f20616,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19203,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238])).
fof(f19203,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f4484,f4484,f16342,f2650])).
fof(f20615,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f19214,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238])).
fof(f19214,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f7681,f7681,f16342,f2650])).
fof(f20614,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239,f19238])).
fof(f20613,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246,f19239])).
fof(f20612,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270,f19246])).
fof(f20611,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19258,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270])).
fof(f19258,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f893,f893,f16342,f2651])).
fof(f20610,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282,f19270])).
fof(f20609,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323,f19282])).
fof(f20608,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19294,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323])).
fof(f19294,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f4484,f4484,f16342,f2651])).
fof(f20607,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f19306,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323])).
fof(f19306,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f7681,f7681,f16342,f2651])).
fof(f20603,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343,f19323])).
fof(f20602,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19333,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343])).
fof(f19333,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f893,f16342,f2653])).
fof(f20601,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353,f19343])).
fof(f20600,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390,f19353])).
fof(f20599,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19363,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390])).
fof(f19363,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f4484,f16342,f2653])).
fof(f20598,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f19373,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390])).
fof(f19373,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f7681,f16342,f2653])).
fof(f20594,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410,f19390])).
fof(f20593,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19400,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410])).
fof(f19400,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f893,f16342,f2654])).
fof(f20592,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420,f19410])).
fof(f20591,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464,f19420])).
fof(f20590,plain,(
  $false | ($spl3 | $spl66)),
  inference(global_subsumption,[],[f19430,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464])).
fof(f19430,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4484,f4484,f16342,f2654])).
fof(f20589,plain,(
  $false | ($spl65 | $spl66)),
  inference(global_subsumption,[],[f19440,f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464])).
fof(f19440,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,X1)) ) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f7681,f7681,f16342,f2654])).
fof(f20588,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465,f19464])).
fof(f20587,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f303,f302,f304,f311,f313,f326,f325,f382,f390,f387,f413,f412,f541,f431,f428,f427,f426,f444,f446,f460,f459,f458,f457,f456,f455,f454,f464,f463,f462,f461,f468,f467,f466,f465,f472,f471,f470,f469,f476,f475,f474,f473,f530,f480,f479,f478,f477,f487,f486,f485,f484,f493,f490,f489,f488,f500,f499,f498,f529,f496,f495,f494,f504,f503,f502,f501,f508,f507,f506,f505,f517,f516,f515,f528,f513,f512,f511,f521,f520,f519,f518,f525,f524,f523,f522,f543,f542,f545,f544,f547,f546,f548,f549,f551,f550,f552,f553,f555,f554,f557,f556,f559,f558,f561,f560,f562,f563,f565,f564,f567,f566,f568,f569,f571,f570,f572,f581,f580,f579,f578,f577,f576,f575,f574,f573,f583,f582,f586,f606,f607,f610,f612,f615,f618,f620,f629,f634,f635,f638,f641,f647,f648,f652,f655,f657,f660,f662,f669,f670,f672,f673,f681,f683,f687,f689,f692,f694,f713,f711,f715,f718,f729,f727,f731,f741,f739,f747,f749,f752,f816,f837,f836,f845,f844,f857,f855,f866,f864,f875,f874,f873,f872,f876,f938,f994,f1002,f1016,f1024,f1029,f1036,f1048,f1053,f1052,f1065,f1073,f1078,f1106,f1134,f1133,f1145,f1153,f1158,f1184,f1213,f1212,f1228,f1236,f1241,f1274,f1300,f1298,f1297,f1296,f1293,f1291,f1290,f1308,f1350,f1349,f1346,f1345,f1338,f1335,f1400,f1393,f1392,f1387,f1374,f1414,f1415,f1429,f1428,f1427,f1426,f1858,f1867,f1863,f1873,f1887,f1895,f1894,f1893,f1977,f2001,f2009,f2008,f2036,f2046,f2045,f2052,f2071,f2081,f2129,f2213,f2276,f2585,f2589,f2592,f2596,f2599,f2602,f2605,f2608,f2611,f2614,f2617,f2620,f2623,f2626,f2629,f2632,f2635,f2638,f2640,f2641,f2642,f2643,f2644,f2645,f2646,f2647,f2648,f2649,f2650,f2651,f2652,f2653,f2654,f2655,f2656,f2657,f2658,f2659,f2660,f2661,f2662,f2663,f2664,f2364,f2680,f2682,f2684,f2687,f2689,f2691,f2693,f2695,f2697,f2699,f2701,f2703,f2705,f2707,f2709,f2711,f2713,f2715,f1657,f1710,f1544,f1606,f2675,f2673,f1697,f1695,f1621,f1416,f403,f399,f2141,f2114,f1466,f1465,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1450,f1449,f1448,f1447,f1446,f1445,f1444,f445,f2677,f2676,f2674,f2672,f2671,f2670,f2669,f2668,f2667,f2666,f1734,f1717,f1634,f1581,f1566,f406,f405,f404,f402,f401,f400,f398,f397,f396,f395,f2665,f1469,f1432,f447,f2214,f2365,f1901,f1488,f1487,f1434,f602,f540,f330,f329,f3277,f3528,f3552,f3580,f3604,f3630,f3637,f3860,f3858,f3863,f3870,f3883,f3886,f3893,f3906,f3907,f3910,f3908,f3913,f3918,f3950,f3953,f3958,f3987,f3988,f3990,f3992,f3993,f3994,f3995,f3996,f4005,f4006,f4007,f4008,f4009,f4010,f4011,f4012,f4013,f4014,f4015,f4016,f4017,f4018,f4019,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4063,f4066,f4079,f4100,f4103,f4116,f4137,f4140,f4153,f4156,f4173,f4176,f4189,f4210,f4211,f4212,f4213,f4214,f4542,f4620,f4621,f4622,f4623,f4624,f4625,f4627,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4713,f4714,f5114,f5135,f5136,f5138,f5271,f5262,f5273,f5302,f5321,f5427,f5448,f5478,f5496,f5498,f5531,f5549,f5609,f5611,f5668,f5670,f5719,f5721,f5770,f5772,f5881,f5882,f5883,f5885,f6145,f6139,f6137,f6131,f6125,f6119,f6114,f6113,f6112,f6111,f6110,f6109,f6108,f6107,f6106,f6105,f6104,f6103,f6102,f6101,f6096,f6089,f6088,f6083,f6082,f6075,f6053,f6052,f6051,f6046,f6041,f6040,f6035,f6021,f6011,f6008,f6007,f6002,f6001,f6000,f5999,f5996,f5994,f5989,f5988,f5983,f5982,f5974,f5973,f5968,f5965,f5964,f5962,f5960,f5958,f5953,f5951,f5950,f5948,f5945,f5943,f5942,f5940,f5939,f5938,f5937,f5936,f5931,f5930,f5923,f5918,f5917,f5910,f5909,f5908,f5907,f5906,f5905,f5902,f5901,f5900,f5899,f5897,f5896,f5895,f5893,f5888,f5886,f6268,f6259,f6270,f6291,f6282,f6293,f6577,f6612,f6641,f6665,f6660,f6659,f6658,f6657,f6656,f6655,f6652,f6673,f6672,f6687,f6686,f6685,f6719,f7018,f7037,f7041,f7127,f7129,f7131,f7115,f7119,f7196,f7198,f7200,f7184,f7188,f7852,f7851,f7809,f7808,f7692,f7857,f7862,f7920,f7919,f7918,f7917,f7923,f8009,f8010,f8121,f8122,f8281,f8283,f8301,f8300,f8299,f8308,f8324,f8331,f8375,f8373,f8372,f8378,f8392,f8395,f8519,f8525,f8527,f8480,f8528,f8484,f9845,f9851,f9853,f9813,f9854,f9817,f9882,f9938,f9978,f10019,f10886,f10983,f11041,f11157,f11158,f11159,f11160,f11166,f11167,f11168,f11170,f11171,f11172,f11173,f11174,f11175,f11176,f11177,f11178,f11179,f11180,f11181,f11182,f11183,f11184,f11185,f11186,f11187,f11192,f11227,f11258,f11297,f11334,f15648,f11908,f11913,f11982,f11987,f15460,f15446,f12019,f12024,f12029,f15996,f12062,f12065,f12359,f12361,f16318,f16320,f16326,f16328,f16338,f12723,f12725,f16341,f16356,f16357,f12907,f12910,f16368,f16369,f16370,f16371,f16372,f16373,f16374,f16375,f16376,f16377,f16378,f16379,f16380,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16398,f16399,f16400,f16401,f16402,f16403,f16404,f16405,f16406,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16422,f16423,f16424,f16425,f16426,f16427,f16428,f13190,f13192,f13881,f13941,f16342,f19990,f19989,f19988,f19987,f19986,f19985,f19984,f19983,f19982,f19981,f19980,f19979,f19978,f19974,f19972,f19953,f19948,f19947,f19934,f19924,f19909,f19894,f19877,f19849,f19848,f19847,f19838,f19836,f19834,f19829,f19828,f19826,f19824,f19819,f19818,f19816,f19814,f19809,f19808,f19807,f19806,f19799,f19795,f19791,f19775,f19773,f19772,f19771,f19770,f19762,f19759,f19755,f19754,f19753,f19752,f19504,f19491,f19465])).
fof(f20571,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20556,f304])).
fof(f20556,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66)),
  inference(backward_demodulation,[],[f20553,f540])).
fof(f20570,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20569,f20553])).
fof(f20569,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0)) ) | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20554,f325])).
fof(f20554,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl65 | $spl66)),
  inference(backward_demodulation,[],[f20553,f329])).
fof(f20280,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19540,f582])).
fof(f19540,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f582,f16342,f2658])).
fof(f20279,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19541,f893])).
fof(f19541,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f893,f16342,f2658])).
fof(f20278,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19542,f583])).
fof(f19542,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f583,f16342,f2658])).
fof(f20277,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19543,f583])).
fof(f19543,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f583,f16342,f2658])).
fof(f20276,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19544,f583])).
fof(f19544,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f583,f16342,f2658])).
fof(f20275,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19545,f583])).
fof(f19545,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f583,f16342,f2658])).
fof(f20274,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19546,f1873])).
fof(f19546,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f1873,f16342,f2658])).
fof(f20273,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19547,f1873])).
fof(f19547,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f1873,f16342,f2658])).
fof(f20272,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19548,f1873])).
fof(f19548,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f1873,f16342,f2658])).
fof(f20271,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19549,f1873])).
fof(f19549,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f1873,f16342,f2658])).
fof(f20270,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19550,f4484])).
fof(f19550,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f4484,f16342,f2658])).
fof(f20269,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19551,f7681])).
fof(f19551,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f7681,f16342,f2658])).
fof(f20268,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19556,f582])).
fof(f19556,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f582,f16342,f2658])).
fof(f20267,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19557,f582])).
fof(f19557,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f582,f16342,f2658])).
fof(f20266,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19558,f582])).
fof(f19558,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f582,f16342,f2658])).
fof(f20265,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19559,f582])).
fof(f19559,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f582,f16342,f2658])).
fof(f20264,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20263,f582])).
fof(f20263,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19560,f881])).
fof(f19560,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f582,f16342,f2658])).
fof(f20262,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20261,f582])).
fof(f20261,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f19561,f586])).
fof(f19561,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(unit_resulting_resolution,[],[f3630,f582,f16342,f2658])).
fof(f20260,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20259,f582])).
fof(f20259,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f19562,f5893])).
fof(f19562,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6101,f582,f16342,f2658])).
fof(f20258,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19568,f893])).
fof(f19568,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f893,f16342,f2658])).
fof(f20257,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19569,f893])).
fof(f19569,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f893,f16342,f2658])).
fof(f20256,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19570,f893])).
fof(f19570,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3604,f893,f16342,f2658])).
fof(f20255,plain,(
  $false | ($spl3 | $spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19571,f893])).
fof(f19571,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f893,f16342,f2658])).
fof(f20254,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20253,f582])).
fof(f20253,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20252,f881])).
fof(f20252,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19572,f896])).
fof(f19572,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f893,f16342,f2658])).
fof(f20251,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20250,f582])).
fof(f20250,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20249,f586])).
fof(f20249,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19573,f896])).
fof(f19573,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3630,f893,f16342,f2658])).
fof(f20248,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20247,f582])).
fof(f20247,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20246,f5893])).
fof(f20246,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19574,f896])).
fof(f19574,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f6101,f893,f16342,f2658])).
fof(f20245,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19580,f583])).
fof(f19580,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f583,f16342,f2658])).
fof(f20244,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19581,f583])).
fof(f19581,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f583,f16342,f2658])).
fof(f20243,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19582,f583])).
fof(f19582,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f583,f16342,f2658])).
fof(f20242,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19583,f583])).
fof(f19583,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f583,f16342,f2658])).
fof(f20241,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20240,f582])).
fof(f20240,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20239,f881])).
fof(f20239,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19584,f602])).
fof(f19584,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f583,f16342,f2658])).
fof(f20238,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20237,f583])).
fof(f20237,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(forward_demodulation,[],[f19585,f586])).
fof(f19585,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3630,f583,f16342,f2658])).
fof(f20236,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20235,f583])).
fof(f20235,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(forward_demodulation,[],[f19586,f5893])).
fof(f19586,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6101,f583,f16342,f2658])).
fof(f20234,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19592,f1873])).
fof(f19592,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f1873,f16342,f2658])).
fof(f20233,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19593,f1873])).
fof(f19593,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f1873,f16342,f2658])).
fof(f20232,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19594,f1873])).
fof(f19594,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3604,f1873,f16342,f2658])).
fof(f20231,plain,(
  $false | ($spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19595,f1873])).
fof(f19595,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f1873,f16342,f2658])).
fof(f20230,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20229,f582])).
fof(f20229,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20228,f881])).
fof(f20228,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19596,f1901])).
fof(f19596,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f1873,f16342,f2658])).
fof(f20227,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20226,f582])).
fof(f20226,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f20225,f586])).
fof(f20225,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(forward_demodulation,[],[f19597,f1901])).
fof(f19597,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3630,f1873,f16342,f2658])).
fof(f20224,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20223,f582])).
fof(f20223,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f20222,f5893])).
fof(f20222,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(forward_demodulation,[],[f19598,f1901])).
fof(f19598,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6101,f1873,f16342,f2658])).
fof(f20221,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19604,f4484])).
fof(f19604,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f4484,f16342,f2658])).
fof(f20220,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19605,f4484])).
fof(f19605,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f4484,f16342,f2658])).
fof(f20219,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19606,f4484])).
fof(f19606,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3604,f4484,f16342,f2658])).
fof(f20218,plain,(
  $false | ($spl3 | $spl36 | $spl66)),
  inference(subsumption_resolution,[],[f19607,f4484])).
fof(f19607,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f4484,f16342,f2658])).
fof(f20217,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20216,f582])).
fof(f20216,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20215,f881])).
fof(f20215,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19608,f4449])).
fof(f19608,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f4484,f16342,f2658])).
fof(f20214,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20213,f4484])).
fof(f20213,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19609,f586])).
fof(f19609,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3630,f4484,f16342,f2658])).
fof(f20212,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20211,f4484])).
fof(f20211,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19610,f5893])).
fof(f19610,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f6101,f4484,f16342,f2658])).
fof(f20210,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19616,f7681])).
fof(f19616,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f7681,f16342,f2658])).
fof(f20209,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19617,f7681])).
fof(f19617,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1595,f7681,f16342,f2658])).
fof(f20208,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19618,f7681])).
fof(f19618,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f3604,f7681,f16342,f2658])).
fof(f20207,plain,(
  $false | ($spl36 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19619,f7681])).
fof(f19619,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl36 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f6175,f7681,f16342,f2658])).
fof(f20206,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20205,f7681])).
fof(f20205,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65 | $spl66)),
  inference(forward_demodulation,[],[f19620,f881])).
fof(f19620,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f7681,f16342,f2658])).
fof(f20204,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20203,f7681])).
fof(f20203,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f19621,f586])).
fof(f19621,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f3630,f7681,f16342,f2658])).
fof(f20202,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20201,f7681])).
fof(f20201,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f19622,f5893])).
fof(f19622,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f6101,f7681,f16342,f2658])).
fof(f20200,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19625,f582])).
fof(f19625,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f582,f16342,f2659])).
fof(f20199,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19626,f893])).
fof(f19626,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f893,f16342,f2659])).
fof(f20198,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19627,f583])).
fof(f19627,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f583,f16342,f2659])).
fof(f20197,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19628,f583])).
fof(f19628,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f583,f16342,f2659])).
fof(f20196,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19629,f1873])).
fof(f19629,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f1873,f16342,f2659])).
fof(f20195,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19630,f1873])).
fof(f19630,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f1873,f16342,f2659])).
fof(f20194,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19631,f4484])).
fof(f19631,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f4484,f16342,f2659])).
fof(f20193,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19632,f7681])).
fof(f19632,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f7681,f16342,f2659])).
fof(f20192,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19635,f582])).
fof(f19635,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f582,f16342,f2659])).
fof(f20191,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19636,f582])).
fof(f19636,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f582,f16342,f2659])).
fof(f20190,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f20189,f582])).
fof(f20189,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl61 | $spl66)),
  inference(forward_demodulation,[],[f19639,f4983])).
fof(f19639,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f582,f16342,f2659])).
fof(f20188,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20187,f582])).
fof(f20187,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f19640,f586])).
fof(f19640,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f540,f582,f16342,f2659])).
fof(f20186,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20185,f582])).
fof(f20185,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f19641,f586])).
fof(f19641,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(unit_resulting_resolution,[],[f4156,f540,f582,f16342,f2659])).
fof(f20184,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20183,f582])).
fof(f20183,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f19642,f5893])).
fof(f19642,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(unit_resulting_resolution,[],[f6103,f540,f582,f16342,f2659])).
fof(f20182,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20181,f582])).
fof(f20181,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19643,f881])).
fof(f19643,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f582,f16342,f2659])).
fof(f20180,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20179,f582])).
fof(f20179,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19644,f881])).
fof(f19644,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f582,f16342,f2659])).
fof(f20178,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19653,f893])).
fof(f19653,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f893,f16342,f2659])).
fof(f20177,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19654,f893])).
fof(f19654,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f711,f540,f893,f16342,f2659])).
fof(f20176,plain,(
  $false | ($spl3 | $spl61 | $spl66)),
  inference(subsumption_resolution,[],[f20175,f582])).
fof(f20175,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl61 | $spl66)),
  inference(forward_demodulation,[],[f20174,f4983])).
fof(f20174,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl61 | $spl66)),
  inference(forward_demodulation,[],[f19657,f896])).
fof(f19657,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f893,f16342,f2659])).
fof(f20173,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20172,f582])).
fof(f20172,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20171,f586])).
fof(f20171,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19658,f896])).
fof(f19658,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f718,f540,f893,f16342,f2659])).
fof(f20170,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20169,f582])).
fof(f20169,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20168,f586])).
fof(f20168,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19659,f896])).
fof(f19659,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4156,f540,f893,f16342,f2659])).
fof(f20167,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20166,f582])).
fof(f20166,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20165,f5893])).
fof(f20165,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19660,f896])).
fof(f19660,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f6103,f540,f893,f16342,f2659])).
fof(f20164,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20163,f582])).
fof(f20163,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20162,f881])).
fof(f20162,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19661,f896])).
fof(f19661,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f893,f16342,f2659])).
fof(f20161,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20160,f582])).
fof(f20160,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20159,f881])).
fof(f20159,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19662,f896])).
fof(f19662,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f893,f16342,f2659])).
fof(f20157,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19671,f583])).
fof(f19671,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f583,f16342,f2659])).
fof(f20156,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19672,f583])).
fof(f19672,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f583,f16342,f2659])).
fof(f20155,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f20154,f582])).
fof(f20154,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl61 | $spl66)),
  inference(forward_demodulation,[],[f20153,f4983])).
fof(f20153,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl61 | $spl66)),
  inference(forward_demodulation,[],[f19675,f602])).
fof(f19675,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f583,f16342,f2659])).
fof(f20152,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20151,f583])).
fof(f20151,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(forward_demodulation,[],[f19676,f586])).
fof(f19676,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f540,f583,f16342,f2659])).
fof(f20150,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20149,f583])).
fof(f20149,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(forward_demodulation,[],[f19677,f586])).
fof(f19677,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12)))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f4156,f540,f583,f16342,f2659])).
fof(f20148,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20147,f583])).
fof(f20147,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl66),
  inference(forward_demodulation,[],[f19678,f5893])).
fof(f19678,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6103,f540,f583,f16342,f2659])).
fof(f20146,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20145,f582])).
fof(f20145,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20144,f881])).
fof(f20144,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19679,f602])).
fof(f19679,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f583,f16342,f2659])).
fof(f20143,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20142,f582])).
fof(f20142,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20141,f881])).
fof(f20141,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19680,f602])).
fof(f19680,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f583,f16342,f2659])).
fof(f20139,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19689,f1873])).
fof(f19689,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f1873,f16342,f2659])).
fof(f20138,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19690,f1873])).
fof(f19690,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f711,f540,f1873,f16342,f2659])).
fof(f20137,plain,(
  $false | ($spl61 | $spl66)),
  inference(subsumption_resolution,[],[f20136,f582])).
fof(f20136,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl61 | $spl66)),
  inference(forward_demodulation,[],[f20135,f4983])).
fof(f20135,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl61 | $spl66)),
  inference(forward_demodulation,[],[f19693,f1901])).
fof(f19693,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f1873,f16342,f2659])).
fof(f20134,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20133,f582])).
fof(f20133,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f20132,f586])).
fof(f20132,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(forward_demodulation,[],[f19694,f1901])).
fof(f19694,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f540,f1873,f16342,f2659])).
fof(f20131,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20130,f582])).
fof(f20130,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f20129,f586])).
fof(f20129,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | $spl66),
  inference(forward_demodulation,[],[f19695,f1901])).
fof(f19695,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f4156,f540,f1873,f16342,f2659])).
fof(f20128,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f20127,f582])).
fof(f20127,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(forward_demodulation,[],[f20126,f5893])).
fof(f20126,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | $spl66),
  inference(forward_demodulation,[],[f19696,f1901])).
fof(f19696,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f6103,f540,f1873,f16342,f2659])).
fof(f20125,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20124,f582])).
fof(f20124,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20123,f881])).
fof(f20123,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19697,f1901])).
fof(f19697,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f1873,f16342,f2659])).
fof(f20122,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20121,f582])).
fof(f20121,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20120,f881])).
fof(f20120,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19698,f1901])).
fof(f19698,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X1)))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f1873,f16342,f2659])).
fof(f20118,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19707,f4484])).
fof(f19707,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f4484,f16342,f2659])).
fof(f20117,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f19708,f4484])).
fof(f19708,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f711,f540,f4484,f16342,f2659])).
fof(f20116,plain,(
  $false | ($spl3 | $spl61 | $spl66)),
  inference(subsumption_resolution,[],[f20115,f582])).
fof(f20115,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl61 | $spl66)),
  inference(forward_demodulation,[],[f20114,f4983])).
fof(f20114,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl61 | $spl66)),
  inference(forward_demodulation,[],[f19711,f4449])).
fof(f19711,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f4484,f16342,f2659])).
fof(f20113,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20112,f4484])).
fof(f20112,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19712,f586])).
fof(f19712,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f718,f540,f4484,f16342,f2659])).
fof(f20111,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20110,f4484])).
fof(f20110,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19713,f586])).
fof(f19713,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4156,f540,f4484,f16342,f2659])).
fof(f20109,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20108,f4484])).
fof(f20108,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19714,f5893])).
fof(f19714,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f6103,f540,f4484,f16342,f2659])).
fof(f20107,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20106,f582])).
fof(f20106,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20105,f881])).
fof(f20105,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19715,f4449])).
fof(f19715,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f4484,f16342,f2659])).
fof(f20104,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f20103,f582])).
fof(f20103,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f20102,f881])).
fof(f20102,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl66)),
  inference(forward_demodulation,[],[f19716,f4449])).
fof(f19716,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f4484,f16342,f2659])).
fof(f20100,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19725,f7681])).
fof(f19725,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f7681,f16342,f2659])).
fof(f20099,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f19726,f7681])).
fof(f19726,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f711,f540,f7681,f16342,f2659])).
fof(f20098,plain,(
  $false | ($spl3 | $spl61 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20097,f582])).
fof(f20097,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl61 | $spl65 | $spl66)),
  inference(forward_demodulation,[],[f20096,f4983])).
fof(f20096,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl61 | $spl65 | $spl66)),
  inference(forward_demodulation,[],[f19729,f9023])).
fof(f19729,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) | ($spl61 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f11232,f540,f7681,f16342,f2659])).
fof(f20095,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20094,f7681])).
fof(f20094,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f19730,f586])).
fof(f19730,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f718,f540,f7681,f16342,f2659])).
fof(f20093,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20092,f7681])).
fof(f20092,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f19731,f586])).
fof(f19731,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK12))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f4156,f540,f7681,f16342,f2659])).
fof(f20091,plain,(
  $false | ($spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20090,f7681])).
fof(f20090,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl66)),
  inference(forward_demodulation,[],[f19732,f5893])).
fof(f19732,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))))) | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f6103,f540,f7681,f16342,f2659])).
fof(f20089,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20088,f7681])).
fof(f20088,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65 | $spl66)),
  inference(forward_demodulation,[],[f19733,f881])).
fof(f19733,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1200,f540,f7681,f16342,f2659])).
fof(f20087,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f20086,f7681])).
fof(f20086,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl65 | $spl66)),
  inference(forward_demodulation,[],[f19734,f881])).
fof(f19734,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1769,f540,f7681,f16342,f2659])).
fof(f20084,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19779,f304])).
fof(f19779,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1894,f16342,f1448])).
fof(f20083,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19850,f546])).
fof(f19850,plain,(
  ( ! [X0,X1] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f1867,f16342,f1449])).
fof(f20082,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19851,f546])).
fof(f19851,plain,(
  ( ! [X0,X1] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f575,f1867,f16342,f1449])).
fof(f20081,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19852,f546])).
fof(f19852,plain,(
  ( ! [X0,X1] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f1867,f16342,f1449])).
fof(f20080,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19853,f546])).
fof(f19853,plain,(
  ( ! [X0,X1] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f550,f1867,f16342,f1449])).
fof(f20079,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19854,f550])).
fof(f19854,plain,(
  ( ! [X0,X1] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f573,f1867,f16342,f1449])).
fof(f20078,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19855,f550])).
fof(f19855,plain,(
  ( ! [X0,X1] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f573,f1867,f16342,f1449])).
fof(f20077,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19856,f554])).
fof(f19856,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f575,f573,f1867,f16342,f1449])).
fof(f20076,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19858,f554])).
fof(f19858,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f550,f573,f1867,f16342,f1449])).
fof(f20075,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19860,f550])).
fof(f19860,plain,(
  ( ! [X0,X1] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f556,f546,f1867,f16342,f1449])).
fof(f20074,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19861,f550])).
fof(f19861,plain,(
  ( ! [X0,X1] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f554,f546,f1867,f16342,f1449])).
fof(f20073,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19862,f554])).
fof(f19862,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f575,f546,f1867,f16342,f1449])).
fof(f20072,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19864,f554])).
fof(f19864,plain,(
  ( ! [X0,X1] : (~sP2('const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))),'T_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f550,f546,f1867,f16342,f1449])).
fof(f20071,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19880,f16342])).
fof(f19880,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f573,f16342,f1450])).
fof(f20070,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19890,f16342])).
fof(f19890,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f574,f16342,f1450])).
fof(f20069,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19897,f16342])).
fof(f19897,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f575,f16342,f1451])).
fof(f20068,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19905,f16342])).
fof(f19905,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f576,f16342,f1451])).
fof(f20067,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19912,f16342])).
fof(f19912,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f577,f16342,f1452])).
fof(f20066,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19920,f16342])).
fof(f19920,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f578,f16342,f1452])).
fof(f20065,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19926,f16342])).
fof(f19926,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f739,f16342,f1453])).
fof(f20064,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19931,f16342])).
fof(f19931,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f741,f16342,f1453])).
fof(f20063,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19954,f16342])).
fof(f19954,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f580,f16342,f1458])).
fof(f20062,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19965,f16342])).
fof(f19965,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f581,f16342,f1458])).
fof(f20061,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f19976,f304])).
fof(f19976,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1213,f16342,f1461])).
fof(f19977,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f1213,f16342,f1461])).
fof(f19967,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f581,f16342,f1458])).
fof(f19964,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f572,f16342,f1458])).
fof(f19958,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f580,f16342,f1458])).
fof(f19956,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f304,f580,f16342,f1458])).
fof(f19951,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f1134,f16342,f1457])).
fof(f19937,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f540,f579,f16342,f1454])).
fof(f19933,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f741,f16342,f1453])).
fof(f19930,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f540,f647,f16342,f1453])).
fof(f19927,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f739,f16342,f1453])).
fof(f19922,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f578,f16342,f1452])).
fof(f19919,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f563,f16342,f1452])).
fof(f19913,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f577,f16342,f1452])).
fof(f19907,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f576,f16342,f1451])).
fof(f19904,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f553,f16342,f1451])).
fof(f19898,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f575,f16342,f1451])).
fof(f19892,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f574,f16342,f1450])).
fof(f19889,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342,f549,f16342,f1450])).
fof(f19881,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f573,f16342,f1450])).
fof(f19865,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f1867,f16342,f1449])).
fof(f19863,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f546,f1867,f16342,f1449])).
fof(f19859,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f573,f1867,f16342,f1449])).
fof(f19857,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f573,f1867,f16342,f1449])).
fof(f19780,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f540,f1894,f16342,f1448])).
fof(f19742,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f7681,f7681,f16342,f2659])).
fof(f19724,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f4484,f4484,f16342,f2659])).
fof(f19706,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f1873,f1873,f16342,f2659])).
fof(f19688,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f583,f583,f16342,f2659])).
fof(f19670,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f893,f893,f16342,f2659])).
fof(f19652,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f582,f582,f16342,f2659])).
fof(f19624,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f7681,f7681,f16342,f2658])).
fof(f19612,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f4484,f4484,f16342,f2658])).
fof(f19600,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f1873,f1873,f16342,f2658])).
fof(f19588,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f583,f583,f16342,f2658])).
fof(f19576,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f893,f893,f16342,f2658])).
fof(f19564,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f582,f582,f16342,f2658])).
fof(f19539,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f572,f540,f7681,f7681,f16342,f2656])).
fof(f19526,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f572,f540,f4484,f4484,f16342,f2656])).
fof(f19513,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f1873,f1873,f16342,f2656])).
fof(f19500,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f583,f583,f16342,f2656])).
fof(f19487,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f572,f540,f893,f893,f16342,f2656])).
fof(f19474,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f540,f582,f582,f16342,f2656])).
fof(f19441,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f7681,f7681,f16342,f2654])).
fof(f19431,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f4484,f4484,f16342,f2654])).
fof(f19421,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f1873,f1873,f16342,f2654])).
fof(f19411,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f583,f583,f16342,f2654])).
fof(f19401,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f893,f893,f16342,f2654])).
fof(f19391,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f582,f582,f16342,f2654])).
fof(f19374,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f7681,f7681,f16342,f2653])).
fof(f19364,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f4484,f4484,f16342,f2653])).
fof(f19354,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f1873,f1873,f16342,f2653])).
fof(f19344,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f583,f583,f16342,f2653])).
fof(f19334,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f893,f893,f16342,f2653])).
fof(f19324,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f582,f582,f16342,f2653])).
fof(f19307,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f647,f540,f7681,f7681,f16342,f2651])).
fof(f19295,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f647,f540,f4484,f4484,f16342,f2651])).
fof(f19283,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f1873,f1873,f16342,f2651])).
fof(f19271,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f583,f583,f16342,f2651])).
fof(f19259,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f647,f540,f893,f893,f16342,f2651])).
fof(f19247,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f582,f582,f16342,f2651])).
fof(f19215,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f563,f540,f7681,f7681,f16342,f2650])).
fof(f19204,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f563,f540,f4484,f4484,f16342,f2650])).
fof(f19193,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f1873,f1873,f16342,f2650])).
fof(f19182,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f583,f583,f16342,f2650])).
fof(f19171,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f563,f540,f893,f893,f16342,f2650])).
fof(f19160,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f582,f582,f16342,f2650])).
fof(f19129,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f553,f540,f7681,f7681,f16342,f2649])).
fof(f19107,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f553,f540,f4484,f4484,f16342,f2649])).
fof(f19085,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f1873,f1873,f16342,f2649])).
fof(f19063,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f583,f583,f16342,f2649])).
fof(f19041,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f553,f540,f893,f893,f16342,f2649])).
fof(f19019,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f582,f582,f16342,f2649])).
fof(f18967,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f549,f540,f7681,f7681,f16342,f2648])).
fof(f18951,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f549,f540,f4484,f4484,f16342,f2648])).
fof(f18935,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f1873,f1873,f16342,f2648])).
fof(f18919,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f583,f583,f16342,f2648])).
fof(f18903,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f549,f540,f893,f893,f16342,f2648])).
fof(f18887,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f582,f582,f16342,f2648])).
fof(f18848,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f837,f540,f7681,f7681,f16342,f2646])).
fof(f18820,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f837,f540,f4484,f4484,f16342,f2646])).
fof(f18792,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f1873,f1873,f16342,f2646])).
fof(f18764,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f583,f583,f16342,f2646])).
fof(f18736,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f837,f540,f893,f893,f16342,f2646])).
fof(f18708,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f582,f582,f16342,f2646])).
fof(f18669,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f582,f7681,f7681,f16342,f2641])).
fof(f18655,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f582,f4484,f4484,f16342,f2641])).
fof(f18641,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f582,f1873,f1873,f16342,f2641])).
fof(f18627,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f582,f583,f583,f16342,f2641])).
fof(f18613,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f582,f893,f893,f16342,f2641])).
fof(f18599,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f582,f582,f582,f16342,f2641])).
fof(f18563,plain,(
  $false | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f681,f540,f16342,f2633])).
fof(f18556,plain,(
  $false | ($spl34 | $spl66)),
  inference(unit_resulting_resolution,[],[f1241,f16342,f2630])).
fof(f18554,plain,(
  $false | ($spl30 | $spl66)),
  inference(unit_resulting_resolution,[],[f572,f540,f16342,f2624])).
fof(f18545,plain,(
  $false | ($spl26 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f16342,f2618])).
fof(f18543,plain,(
  $false | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f1158,f16342,f2615])).
fof(f18541,plain,(
  $false | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f647,f540,f16342,f2609])).
fof(f18533,plain,(
  $false | ($spl18 | $spl66)),
  inference(unit_resulting_resolution,[],[f563,f540,f16342,f2606])).
fof(f18526,plain,(
  $false | ($spl16 | $spl66)),
  inference(unit_resulting_resolution,[],[f553,f540,f16342,f2603])).
fof(f18516,plain,(
  $false | ($spl14 | $spl66)),
  inference(unit_resulting_resolution,[],[f549,f540,f16342,f2600])).
fof(f18507,plain,(
  $false | ($spl10 | $spl66)),
  inference(unit_resulting_resolution,[],[f837,f540,f16342,f2593])).
fof(f18491,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1213,f16342,f16342,f1461])).
fof(f18484,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f581,f16342,f16342,f1458])).
fof(f18482,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f572,f16342,f16342,f1458])).
fof(f18477,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f580,f16342,f16342,f1458])).
fof(f18469,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f741,f16342,f16342,f1453])).
fof(f18467,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f647,f16342,f16342,f1453])).
fof(f18465,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f739,f16342,f16342,f1453])).
fof(f18459,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f578,f16342,f16342,f1452])).
fof(f18457,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f563,f16342,f16342,f1452])).
fof(f18452,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f577,f16342,f16342,f1452])).
fof(f18446,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f576,f16342,f16342,f1451])).
fof(f18444,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f553,f16342,f16342,f1451])).
fof(f18439,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f575,f16342,f16342,f1451])).
fof(f18433,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f574,f16342,f16342,f1450])).
fof(f18431,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f549,f16342,f16342,f1450])).
fof(f18424,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f573,f16342,f16342,f1450])).
fof(f18414,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1894,f16342,f16342,f1448])).
fof(f18406,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f1769,f16342,f1275])).
fof(f18404,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f1200,f16342,f1275])).
fof(f18397,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f4156,f16342,f1274])).
fof(f18395,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f718,f16342,f1274])).
fof(f18390,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f581,f16342,f1237])).
fof(f18388,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f572,f16342,f1237])).
fof(f18380,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f581,f16342,f1236])).
fof(f18378,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f572,f16342,f1236])).
fof(f18372,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f741,f16342,f1107])).
fof(f18370,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f647,f16342,f1107])).
fof(f18367,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f741,f16342,f1106])).
fof(f18365,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f647,f16342,f1106])).
fof(f18362,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f578,f16342,f1074])).
fof(f18360,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f563,f16342,f1074])).
fof(f18354,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f578,f16342,f1073])).
fof(f18352,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f563,f16342,f1073])).
fof(f18346,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f576,f16342,f1025])).
fof(f18344,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f2008,f16342,f1025])).
fof(f18342,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f553,f16342,f1025])).
fof(f18336,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f576,f16342,f1024])).
fof(f18334,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f553,f16342,f1024])).
fof(f18328,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f574,f16342,f1003])).
fof(f18326,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f549,f16342,f1003])).
fof(f18320,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f574,f16342,f1002])).
fof(f18318,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f549,f16342,f1002])).
fof(f18312,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1612,f16342,f982])).
fof(f18310,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1555,f16342,f980])).
fof(f18308,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1555,f16342,f979])).
fof(f18303,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f540,f884,f16342,f978])).
fof(f18295,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f1387,f16342,f938])).
fof(f18292,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3630,f16342,f694])).
fof(f18290,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3552,f16342,f662])).
fof(f18288,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3552,f16342,f657])).
fof(f18281,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f568,f16342,f529])).
fof(f18279,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f6021,f6041,f16342,f529])).
fof(f18277,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f567,f16342,f529])).
fof(f18275,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f652,f566,f16342,f529])).
fof(f18273,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f6040,f16342,f529])).
fof(f18271,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f652,f565,f16342,f529])).
fof(f18269,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f564,f16342,f529])).
fof(f18256,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f572,f16342,f528])).
fof(f18254,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f6088,f16342,f528])).
fof(f18252,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f571,f16342,f528])).
fof(f18250,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f673,f570,f16342,f528])).
fof(f18248,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f673,f580,f16342,f528])).
fof(f18246,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f569,f16342,f528])).
fof(f18234,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f16342,f16342,f525])).
fof(f18210,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1212,f540,f304,f16342,f525])).
fof(f18184,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f16342,f16342,f525])).
fof(f18160,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f681,f540,f304,f16342,f525])).
fof(f18142,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f16342,f524])).
fof(f18140,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f673,f304,f16342,f524])).
fof(f18128,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f16342,f16342,f524])).
fof(f18126,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1241,f304,f16342,f524])).
fof(f18114,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f540,f16342,f523])).
fof(f18102,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f540,f540,f16342,f522])).
fof(f18089,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1228,f16342,f520])).
fof(f18087,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f569,f16342,f540,f16342,f518])).
fof(f18085,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f569,f304,f540,f16342,f518])).
fof(f18065,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f569,f16342,f540,f16342,f518])).
fof(f18063,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f304,f540,f16342,f518])).
fof(f18040,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f572,f540,f16342,f517])).
fof(f18037,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f569,f540,f16342,f517])).
fof(f18015,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f572,f540,f16342,f516])).
fof(f18012,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f569,f540,f16342,f516])).
fof(f17988,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f572,f16342,f16342,f515])).
fof(f17986,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f6053,f6088,f16342,f16342,f515])).
fof(f17984,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f571,f16342,f16342,f515])).
fof(f17982,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f673,f570,f16342,f16342,f515])).
fof(f17980,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f673,f580,f16342,f16342,f515])).
fof(f17978,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f669,f569,f16342,f16342,f515])).
fof(f17939,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f6053,f16342,f16342,f515])).
fof(f17937,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f673,f16342,f16342,f515])).
fof(f17935,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f669,f16342,f16342,f515])).
fof(f17920,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f6053,f304,f16342,f515])).
fof(f17918,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f572,f673,f304,f16342,f515])).
fof(f17900,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1212,f540,f16342,f512])).
fof(f17876,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1133,f540,f540,f16342,f508])).
fof(f17846,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f16342,f507])).
fof(f17844,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f652,f304,f16342,f507])).
fof(f17834,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f16342,f507])).
fof(f17832,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f304,f16342,f507])).
fof(f17822,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f16342,f506])).
fof(f17820,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f304,f16342,f506])).
fof(f17810,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f16342,f16342,f506])).
fof(f17808,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1158,f304,f16342,f506])).
fof(f17798,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1145,f16342,f503])).
fof(f17796,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1145,f16342,f502])).
fof(f17794,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f568,f540,f540,f16342,f501])).
fof(f17775,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f568,f540,f16342,f499])).
fof(f17773,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f6011,f6040,f540,f16342,f499])).
fof(f17770,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f648,f564,f540,f16342,f499])).
fof(f17743,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f568,f6021,f540,f16342,f498])).
fof(f17741,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f568,f652,f540,f16342,f498])).
fof(f17720,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1133,f540,f16342,f495])).
fof(f17692,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1133,f540,f16342,f494])).
fof(f17664,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f641,f540,f16342,f16342,f493])).
fof(f17653,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f641,f540,f304,f16342,f493])).
fof(f17641,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f641,f540,f16342,f16342,f493])).
fof(f17630,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f304,f16342,f493])).
fof(f17618,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f16342,f490])).
fof(f17616,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f16342,f16342,f490])).
fof(f17605,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f304,f16342,f490])).
fof(f17603,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1078,f304,f304,f16342,f490])).
fof(f17582,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f16342,f490])).
fof(f17580,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f16342,f490])).
fof(f17569,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f304,f16342,f490])).
fof(f17567,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f304,f16342,f490])).
fof(f17548,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f16342,f16342,f16342,f490])).
fof(f17546,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f635,f304,f16342,f16342,f490])).
fof(f17535,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f638,f16342,f304,f16342,f490])).
fof(f17533,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f638,f304,f304,f16342,f490])).
fof(f17516,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1065,f16342,f485])).
fof(f17514,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f540,f16342,f16342,f484])).
fof(f17505,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f540,f304,f16342,f484])).
fof(f17494,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f540,f16342,f16342,f484])).
fof(f17485,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f540,f304,f16342,f484])).
fof(f17474,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f5965,f16342,f16342,f480])).
fof(f17472,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f5964,f16342,f16342,f480])).
fof(f17465,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f638,f16342,f16342,f480])).
fof(f17463,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f635,f16342,f16342,f480])).
fof(f17454,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f5964,f304,f16342,f480])).
fof(f17448,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f635,f304,f16342,f480])).
fof(f17431,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f5965,f16342,f16342,f480])).
fof(f17429,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f5964,f16342,f16342,f480])).
fof(f17422,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f638,f16342,f16342,f480])).
fof(f17420,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f562,f635,f16342,f16342,f480])).
fof(f17411,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f5965,f304,f16342,f480])).
fof(f17407,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f563,f638,f304,f16342,f480])).
fof(f17390,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f647,f540,f16342,f479])).
fof(f17379,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f641,f540,f16342,f478])).
fof(f17368,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f8910,f7681,f16342,f475])).
fof(f17366,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4838,f4484,f16342,f475])).
fof(f17363,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1296,f583,f16342,f475])).
fof(f17361,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f899,f893,f16342,f475])).
fof(f17359,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f836,f582,f16342,f475])).
fof(f17357,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f8996,f7681,f16342,f475])).
fof(f17355,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4845,f4484,f16342,f475])).
fof(f17352,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1392,f583,f16342,f475])).
fof(f17350,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f902,f893,f16342,f475])).
fof(f17348,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f582,f16342,f475])).
fof(f17289,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9139,f9023,f16342,f474])).
fof(f17287,plain,(
  $false | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5325,f4983,f16342,f474])).
fof(f17285,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4656,f4449,f16342,f474])).
fof(f17282,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1895,f602,f16342,f474])).
fof(f17280,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1814,f896,f16342,f474])).
fof(f17278,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3863,f1432,f16342,f474])).
fof(f17276,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1428,f445,f16342,f474])).
fof(f17274,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f942,f881,f16342,f474])).
fof(f17272,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f6612,f5893,f16342,f474])).
fof(f17270,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f866,f586,f16342,f474])).
fof(f17268,plain,(
  $false | ($spl3 | $spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f9130,f9023,f16342,f474])).
fof(f17266,plain,(
  $false | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f5323,f4983,f16342,f474])).
fof(f17264,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f4654,f4449,f16342,f474])).
fof(f17261,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1893,f602,f16342,f474])).
fof(f17259,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1812,f896,f16342,f474])).
fof(f17257,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3918,f1432,f16342,f474])).
fof(f17255,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1426,f445,f16342,f474])).
fof(f17253,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f940,f881,f16342,f474])).
fof(f17251,plain,(
  $false | ($spl16 | $spl66)),
  inference(unit_resulting_resolution,[],[f8131,f5893,f16342,f474])).
fof(f17249,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f864,f586,f16342,f474])).
fof(f20060,plain,(
  $false | $spl66),
  inference(trivial_inequality_removal,[],[f17229])).
fof(f17229,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f1048,f16342,f474])).
fof(f20059,plain,(
  $false | $spl66),
  inference(trivial_inequality_removal,[],[f17227])).
fof(f17227,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f1029,f16342,f474])).
fof(f17203,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1036,f16342,f472])).
fof(f17201,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1036,f16342,f471])).
fof(f17199,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1036,f16342,f470])).
fof(f17197,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1016,f16342,f466])).
fof(f17195,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f552,f540,f16342,f16342,f465])).
fof(f17178,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f1799,f540,f304,f16342,f465])).
fof(f17156,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f552,f540,f16342,f16342,f465])).
fof(f17139,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f553,f540,f304,f16342,f465])).
fof(f17117,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f994,f16342,f462])).
fof(f17115,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f548,f540,f16342,f16342,f461])).
fof(f17099,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f3850,f540,f304,f16342,f461])).
fof(f17078,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f548,f540,f16342,f16342,f461])).
fof(f17062,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f549,f540,f304,f16342,f461])).
fof(f17046,plain,(
  $false | ($spl10 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f552,f548,f6158,f16342,f458])).
fof(f16994,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f5938,f552,f548,f5905,f16342,f458])).
fof(f16990,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f557,f552,f548,f1858,f16342,f458])).
fof(f16986,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f554,f552,f548,f883,f16342,f458])).
fof(f16981,plain,(
  $false | ($spl61 | $spl66)),
  inference(unit_resulting_resolution,[],[f554,f552,f548,f4973,f16342,f458])).
fof(f16972,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f8997,f16342,f458])).
fof(f16968,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f4846,f16342,f458])).
fof(f16964,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f1867,f16342,f458])).
fof(f16962,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f546,f1867,f16342,f458])).
fof(f16958,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f550,f573,f1867,f16342,f458])).
fof(f16956,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f575,f573,f1867,f16342,f458])).
fof(f16948,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f556,f550,f546,f901,f16342,f458])).
fof(f16944,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f556,f552,f548,f857,f16342,f458])).
fof(f16771,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f16342,f16342,f457])).
fof(f16712,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f1345,f540,f304,f16342,f457])).
fof(f16675,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f16342,f16342,f457])).
fof(f16616,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f837,f540,f304,f16342,f457])).
fof(f16588,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f606,f540,f16342,f431])).
fof(f16582,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f606,f540,f16342,f428])).
fof(f16576,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f610,f16342,f16342,f427])).
fof(f16574,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f610,f304,f16342,f427])).
fof(f16554,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f610,f16342,f16342,f427])).
fof(f16552,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f618,f304,f16342,f427])).
fof(f16532,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f629,f16342,f413])).
fof(f16530,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f629,f16342,f412])).
fof(f16528,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f7681,f16342,f390])).
fof(f16526,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f4484,f16342,f390])).
fof(f16524,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f1873,f16342,f390])).
fof(f16522,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f583,f16342,f390])).
fof(f16520,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f893,f16342,f390])).
fof(f16518,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f582,f16342,f390])).
fof(f16516,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f304,f7681,f16342,f390])).
fof(f16514,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f304,f4484,f16342,f390])).
fof(f16512,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f1873,f16342,f390])).
fof(f16510,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f583,f16342,f390])).
fof(f16508,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f304,f893,f16342,f390])).
fof(f16506,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f582,f16342,f390])).
fof(f16502,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f7681,f16342,f390])).
fof(f16500,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f4484,f16342,f390])).
fof(f16498,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f1873,f16342,f390])).
fof(f16496,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f583,f16342,f390])).
fof(f16494,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f16342,f893,f16342,f390])).
fof(f16492,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f16342,f582,f16342,f390])).
fof(f16490,plain,(
  $false | ($spl65 | $spl66)),
  inference(unit_resulting_resolution,[],[f304,f7681,f16342,f390])).
fof(f16488,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f304,f4484,f16342,f390])).
fof(f16486,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f1873,f16342,f390])).
fof(f16484,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f583,f16342,f390])).
fof(f16482,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f304,f893,f16342,f390])).
fof(f16480,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f304,f582,f16342,f390])).
fof(f16476,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f896,f16342,f329])).
fof(f16474,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f582,f16342,f326])).
fof(f16472,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f540,f16342])).
fof(f16343,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X6)) ) | $spl68),
  inference(cnf_transformation,[],[f16343_D])).
fof(f16343_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X6)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f16341,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f12728,f325])).
fof(f12728,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f325,f2129])).
fof(f7679,plain,(
  ( ! [X142,X141] : (s(fun(bool,bool),X141) = s(fun(bool,bool),X142)) ) | $spl62),
  inference(cnf_transformation,[],[f7679_D])).
fof(f7679_D,plain,(
  ( ! [X142,X141] : (s(fun(bool,bool),X141) = s(fun(bool,bool),X142)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f7681,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(cnf_transformation,[],[f7681_D])).
fof(f7681_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f7678,plain,(
  ( ! [X142,X141] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X141) = s(fun(bool,bool),X142)) ) | ($spl44 | $spl61)),
  inference(forward_demodulation,[],[f7641,f4983])).
fof(f7641,plain,(
  ( ! [X142,X141] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X141) = s(fun(bool,bool),X142)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f7640])).
fof(f7640,plain,(
  ( ! [X142,X141] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X141) = s(fun(bool,bool),X142) | s(fun(bool,bool),X141) = s(fun(bool,bool),X142)) ) | $spl44),
  inference(superposition,[],[f444,f4216])).
fof(f4714,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X5,X6,bool,bool)))) | s(bool,X7) = s(bool,sK15(X5,X6,bool,bool)) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f1488,f752])).
fof(f4713,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK15(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1488,f752])).
fof(f4517,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | $spl56),
  inference(cnf_transformation,[],[f4517_D])).
fof(f4517_D,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f4515,plain,(
  ( ! [X87] : (sP1('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | s(bool,'T_0') = s(bool,X87)) ) | ($spl3 | $spl8)),
  inference(subsumption_resolution,[],[f4427,f326])).
fof(f4427,plain,(
  ( ! [X87] : (p(s(bool,X87)) | sP1('const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)),'T_0') | s(bool,'T_0') = s(bool,X87)) ) | ($spl3 | $spl8)),
  inference(superposition,[],[f2590,f4298])).
fof(f4514,plain,(
  sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | $spl54),
  inference(cnf_transformation,[],[f4514_D])).
fof(f4514_D,plain,(
  sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f4512,plain,(
  ( ! [X86] : (sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,X86)) ) | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f4426,f326])).
fof(f4426,plain,(
  ( ! [X86] : (p(s(bool,X86)) | sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,X86)) ) | ($spl3 | $spl4)),
  inference(superposition,[],[f2586,f4298])).
fof(f4214,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK15(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1487,f313])).
fof(f4213,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK15(X10,X11,bool,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1487,f752])).
fof(f4212,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'T_0') = s(bool,sK15(X7,X8,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1487,f752])).
fof(f4211,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,sK15(X3,X4,bool,bool)) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1487,f752])).
fof(f4210,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool)) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1487,f752])).
fof(f2803,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f2718,f304])).
fof(f2718,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f2587,f540])).
fof(f2802,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f2801,f2587])).
fof(f2801,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0)) ) | $spl6),
  inference(subsumption_resolution,[],[f2716,f325])).
fof(f2716,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f2587,f329])).
fof(f2639,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) | $spl40),
  inference(cnf_transformation,[],[f2639_D])).
fof(f2639_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2715,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2714])).
fof(f2714,plain,(
  ( ! [X101,X99,X100,X98] : (~sP8('T_0',X99,X100) | sP9('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(subsumption_resolution,[],[f2394,f816])).
fof(f2394,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,X98)) | ~sP8('T_0',X99,X100) | sP9('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f529,f752])).
fof(f2636,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~sP10('T_0',X1,X2)) ) | $spl38),
  inference(cnf_transformation,[],[f2636_D])).
fof(f2636_D,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~sP10('T_0',X1,X2)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2713,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP10('T_0',X1,X2) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2712])).
fof(f2712,plain,(
  ( ! [X94,X97,X95,X96] : (~sP10('T_0',X95,X96) | sP11('T_0',X95,X96) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f2393,f816])).
fof(f2393,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,X94)) | ~sP10('T_0',X95,X96) | sP11('T_0',X95,X96) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f528,f752])).
fof(f2633,plain,(
  ( ! [X2,X1] : (~sP11('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl36),
  inference(cnf_transformation,[],[f2633_D])).
fof(f2633_D,plain,(
  ( ! [X2,X1] : (~sP11('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2711,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2710])).
fof(f2710,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,X91)) | p(s(bool,X92)) | ~sP11('T_0',X92,X91) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f2392,f816])).
fof(f2392,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,X90)) | ~p(s(bool,X91)) | p(s(bool,X92)) | ~sP11('T_0',X92,X91) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f525,f752])).
fof(f2630,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl34),
  inference(cnf_transformation,[],[f2630_D])).
fof(f2630_D,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2709,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2708])).
fof(f2708,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,X87)) | sP11('T_0',X87,X88) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f2391,f816])).
fof(f2391,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,X86)) | ~p(s(bool,X87)) | sP11('T_0',X87,X88) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f524,f752])).
fof(f2627,plain,(
  ( ! [X2,X1] : (sP11('T_0',X2,X1) | p(s(bool,X1))) ) | $spl32),
  inference(cnf_transformation,[],[f2627_D])).
fof(f2627_D,plain,(
  ( ! [X2,X1] : (sP11('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2707,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2706])).
fof(f2706,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,X83)) | sP11('T_0',X84,X83) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f2390,f816])).
fof(f2390,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X82)) | p(s(bool,X83)) | sP11('T_0',X84,X83) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f523,f752])).
fof(f2624,plain,(
  ( ! [X2,X1] : (~sP10(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f2624_D])).
fof(f2624_D,plain,(
  ( ! [X2,X1] : (~sP10(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2705,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP10(X2,X1,'T_0')) )),
  inference(condensation,[],[f2704])).
fof(f2704,plain,(
  ( ! [X80,X78,X81,X79] : (p(s(bool,X79)) | ~p(s(bool,X80)) | ~sP10(X80,X79,'T_0') | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f2389,f816])).
fof(f2389,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,X78)) | p(s(bool,X79)) | ~p(s(bool,X80)) | ~sP10(X80,X79,'T_0') | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f518,f752])).
fof(f2621,plain,(
  ( ! [X2,X1] : (~sP9('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl28),
  inference(cnf_transformation,[],[f2621_D])).
fof(f2621_D,plain,(
  ( ! [X2,X1] : (~sP9('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2703,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2702])).
fof(f2702,plain,(
  ( ! [X76,X74,X77,X75] : (p(s(bool,X75)) | p(s(bool,X76)) | ~sP9('T_0',X76,X75) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(subsumption_resolution,[],[f2388,f816])).
fof(f2388,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,X74)) | p(s(bool,X75)) | p(s(bool,X76)) | ~sP9('T_0',X76,X75) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f508,f752])).
fof(f2618,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl26),
  inference(cnf_transformation,[],[f2618_D])).
fof(f2618_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2701,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2700])).
fof(f2700,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X71)) | sP9('T_0',X71,X72) | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f2387,f816])).
fof(f2387,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X70)) | ~p(s(bool,X71)) | sP9('T_0',X71,X72) | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f507,f752])).
fof(f2615,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f2615_D])).
fof(f2615_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2699,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2698])).
fof(f2698,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X67)) | sP9('T_0',X68,X67) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f2386,f816])).
fof(f2386,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X66)) | ~p(s(bool,X67)) | sP9('T_0',X68,X67) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f506,f752])).
fof(f2612,plain,(
  ( ! [X2,X1] : (~sP8('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) | $spl22),
  inference(cnf_transformation,[],[f2612_D])).
fof(f2612_D,plain,(
  ( ! [X2,X1] : (~sP8('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2697,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP8('T_0',X1,X2)) )),
  inference(condensation,[],[f2696])).
fof(f2696,plain,(
  ( ! [X64,X62,X65,X63] : (p(s(bool,X63)) | p(s(bool,X64)) | ~sP8('T_0',X63,X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f2385,f816])).
fof(f2385,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X62)) | p(s(bool,X63)) | p(s(bool,X64)) | ~sP8('T_0',X63,X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f501,f752])).
fof(f2609,plain,(
  ( ! [X2,X1] : (~sP7(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl20),
  inference(cnf_transformation,[],[f2609_D])).
fof(f2609_D,plain,(
  ( ! [X2,X1] : (~sP7(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2695,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X2,X1,'T_0')) )),
  inference(condensation,[],[f2694])).
fof(f2694,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X59)) | p(s(bool,X60)) | ~sP7(X60,X59,'T_0') | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f2384,f816])).
fof(f2384,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X58)) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP7(X60,X59,'T_0') | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f493,f752])).
fof(f2606,plain,(
  ( ! [X2,X1] : (~sP6(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl18),
  inference(cnf_transformation,[],[f2606_D])).
fof(f2606_D,plain,(
  ( ! [X2,X1] : (~sP6(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2693,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP6(X1,'T_0',X2)) )),
  inference(condensation,[],[f2692])).
fof(f2692,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X55)) | p(s(bool,X56)) | ~sP6(X55,'T_0',X56) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2383,f816])).
fof(f2383,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X54)) | ~p(s(bool,X55)) | p(s(bool,X56)) | ~sP6(X55,'T_0',X56) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f484,f752])).
fof(f2603,plain,(
  ( ! [X2,X1] : (~sP3(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl16),
  inference(cnf_transformation,[],[f2603_D])).
fof(f2603_D,plain,(
  ( ! [X2,X1] : (~sP3(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2691,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP3(X1,'T_0',X2)) )),
  inference(condensation,[],[f2690])).
fof(f2690,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,X51)) | p(s(bool,X52)) | ~sP3(X51,'T_0',X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f2382,f816])).
fof(f2382,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,X50)) | ~p(s(bool,X51)) | p(s(bool,X52)) | ~sP3(X51,'T_0',X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f465,f752])).
fof(f2600,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl14),
  inference(cnf_transformation,[],[f2600_D])).
fof(f2600_D,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2689,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f2688])).
fof(f2688,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,X47)) | p(s(bool,X48)) | ~sP4(X47,'T_0',X48) | s(bool,X46) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f2381,f816])).
fof(f2381,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,X46)) | ~p(s(bool,X47)) | p(s(bool,X48)) | ~sP4(X47,'T_0',X48) | s(bool,X46) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f461,f752])).
fof(f2597,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | sP5(X1,X2,'T_0')) ) | $spl12),
  inference(cnf_transformation,[],[f2597_D])).
fof(f2597_D,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | sP5(X1,X2,'T_0')) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2687,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1)) )),
  inference(subsumption_resolution,[],[f2686,f558])).
fof(f2686,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | ~sP2('T_0',X2,X1)) )),
  inference(condensation,[],[f2685])).
fof(f2685,plain,(
  ( ! [X45,X43,X44,X42] : (sP5(X43,X44,'T_0') | ~sP4(X43,'T_0',X44) | ~sP3(X44,'T_0',X43) | ~sP2('T_0',X44,X43) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f2380,f816])).
fof(f2380,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X42)) | sP5(X43,X44,'T_0') | ~sP4(X43,'T_0',X44) | ~sP3(X44,'T_0',X43) | ~sP2('T_0',X44,X43) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f458,f752])).
fof(f2593,plain,(
  ( ! [X2,X1] : (~sP5(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl10),
  inference(cnf_transformation,[],[f2593_D])).
fof(f2593_D,plain,(
  ( ! [X2,X1] : (~sP5(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2684,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP5(X1,'T_0',X2)) )),
  inference(condensation,[],[f2683])).
fof(f2683,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X39)) | p(s(bool,X40)) | ~sP5(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f2379,f816])).
fof(f2379,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X38)) | ~p(s(bool,X39)) | p(s(bool,X40)) | ~sP5(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f457,f752])).
fof(f2590,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl8),
  inference(cnf_transformation,[],[f2590_D])).
fof(f2590_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2682,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f2681])).
fof(f2681,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,X36)) | sP1(X36,'T_0') | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f2378,f816])).
fof(f2378,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,X35)) | p(s(bool,X36)) | sP1(X36,'T_0') | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f431,f752])).
fof(f2586,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl4),
  inference(cnf_transformation,[],[f2586_D])).
fof(f2586_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f2680,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f2679])).
fof(f2679,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,X33)) | sP1('T_0',X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f2377,f816])).
fof(f2377,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | sP1('T_0',X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f428,f752])).
fof(f2638,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2637])).
fof(f2637,plain,(
  ( ! [X101,X99,X100,X98] : (~sP8('T_0',X99,X100) | sP9('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(subsumption_resolution,[],[f2303,f816])).
fof(f2303,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,X98)) | ~sP8('T_0',X99,X100) | sP9('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f529,f752])).
fof(f2635,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP10('T_0',X1,X2) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2634])).
fof(f2634,plain,(
  ( ! [X94,X97,X95,X96] : (~sP10('T_0',X95,X96) | sP11('T_0',X95,X96) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f2302,f816])).
fof(f2302,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,X94)) | ~sP10('T_0',X95,X96) | sP11('T_0',X95,X96) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f528,f752])).
fof(f2632,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2631])).
fof(f2631,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,X91)) | p(s(bool,X92)) | ~sP11('T_0',X92,X91) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f2301,f816])).
fof(f2301,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,X90)) | ~p(s(bool,X91)) | p(s(bool,X92)) | ~sP11('T_0',X92,X91) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f525,f752])).
fof(f2629,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2628])).
fof(f2628,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,X87)) | sP11('T_0',X87,X88) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f2300,f816])).
fof(f2300,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,X86)) | ~p(s(bool,X87)) | sP11('T_0',X87,X88) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f524,f752])).
fof(f2626,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2625])).
fof(f2625,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,X83)) | sP11('T_0',X84,X83) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f2299,f816])).
fof(f2299,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X82)) | p(s(bool,X83)) | sP11('T_0',X84,X83) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f523,f752])).
fof(f2623,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP10(X2,X1,'T_0')) )),
  inference(condensation,[],[f2622])).
fof(f2622,plain,(
  ( ! [X80,X78,X81,X79] : (p(s(bool,X79)) | ~p(s(bool,X80)) | ~sP10(X80,X79,'T_0') | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f2298,f816])).
fof(f2298,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,X78)) | p(s(bool,X79)) | ~p(s(bool,X80)) | ~sP10(X80,X79,'T_0') | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f518,f752])).
fof(f2620,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2619])).
fof(f2619,plain,(
  ( ! [X76,X74,X77,X75] : (p(s(bool,X75)) | p(s(bool,X76)) | ~sP9('T_0',X76,X75) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(subsumption_resolution,[],[f2297,f816])).
fof(f2297,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,X74)) | p(s(bool,X75)) | p(s(bool,X76)) | ~sP9('T_0',X76,X75) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f508,f752])).
fof(f2617,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2616])).
fof(f2616,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X71)) | sP9('T_0',X71,X72) | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f2296,f816])).
fof(f2296,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X70)) | ~p(s(bool,X71)) | sP9('T_0',X71,X72) | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f507,f752])).
fof(f2614,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2613])).
fof(f2613,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X67)) | sP9('T_0',X68,X67) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f2295,f816])).
fof(f2295,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X66)) | ~p(s(bool,X67)) | sP9('T_0',X68,X67) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f506,f752])).
fof(f2611,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP8('T_0',X1,X2)) )),
  inference(condensation,[],[f2610])).
fof(f2610,plain,(
  ( ! [X64,X62,X65,X63] : (p(s(bool,X63)) | p(s(bool,X64)) | ~sP8('T_0',X63,X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f2294,f816])).
fof(f2294,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X62)) | p(s(bool,X63)) | p(s(bool,X64)) | ~sP8('T_0',X63,X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f501,f752])).
fof(f2608,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X2,X1,'T_0')) )),
  inference(condensation,[],[f2607])).
fof(f2607,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X59)) | p(s(bool,X60)) | ~sP7(X60,X59,'T_0') | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f2293,f816])).
fof(f2293,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X58)) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP7(X60,X59,'T_0') | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f493,f752])).
fof(f2605,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP6(X1,'T_0',X2)) )),
  inference(condensation,[],[f2604])).
fof(f2604,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X55)) | p(s(bool,X56)) | ~sP6(X55,'T_0',X56) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f2292,f816])).
fof(f2292,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X54)) | ~p(s(bool,X55)) | p(s(bool,X56)) | ~sP6(X55,'T_0',X56) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f484,f752])).
fof(f2602,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP3(X1,'T_0',X2)) )),
  inference(condensation,[],[f2601])).
fof(f2601,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,X51)) | p(s(bool,X52)) | ~sP3(X51,'T_0',X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f2291,f816])).
fof(f2291,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,X50)) | ~p(s(bool,X51)) | p(s(bool,X52)) | ~sP3(X51,'T_0',X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f465,f752])).
fof(f2599,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f2598])).
fof(f2598,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,X47)) | p(s(bool,X48)) | ~sP4(X47,'T_0',X48) | s(bool,X46) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f2290,f816])).
fof(f2290,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,X46)) | ~p(s(bool,X47)) | p(s(bool,X48)) | ~sP4(X47,'T_0',X48) | s(bool,X46) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f461,f752])).
fof(f2596,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1)) )),
  inference(subsumption_resolution,[],[f2595,f558])).
fof(f2595,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | ~sP2('T_0',X2,X1)) )),
  inference(condensation,[],[f2594])).
fof(f2594,plain,(
  ( ! [X45,X43,X44,X42] : (sP5(X43,X44,'T_0') | ~sP4(X43,'T_0',X44) | ~sP3(X44,'T_0',X43) | ~sP2('T_0',X44,X43) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f2289,f816])).
fof(f2289,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X42)) | sP5(X43,X44,'T_0') | ~sP4(X43,'T_0',X44) | ~sP3(X44,'T_0',X43) | ~sP2('T_0',X44,X43) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f458,f752])).
fof(f2592,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP5(X1,'T_0',X2)) )),
  inference(condensation,[],[f2591])).
fof(f2591,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X39)) | p(s(bool,X40)) | ~sP5(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f2288,f816])).
fof(f2288,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X38)) | ~p(s(bool,X39)) | p(s(bool,X40)) | ~sP5(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f457,f752])).
fof(f2589,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f2588])).
fof(f2588,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,X36)) | sP1(X36,'T_0') | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f2287,f816])).
fof(f2287,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,X35)) | p(s(bool,X36)) | sP1(X36,'T_0') | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f431,f752])).
fof(f2585,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f2584])).
fof(f2584,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,X33)) | sP1('T_0',X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f2286,f816])).
fof(f2286,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | sP1('T_0',X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f428,f752])).
fof(f878,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) | $spl0),
  inference(cnf_transformation,[],[f878_D])).
fof(f878_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f880,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | $spl3),
  inference(cnf_transformation,[],[f880_D])).
fof(f880_D,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f876,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int',sK14))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK12),s('type.integer.int',sK14)))))),
  inference(superposition,[],[f303,f313])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1389
% Passive clauses: 4074
% Generated clauses: 63861
% Final active clauses: 903
% Final passive clauses: 1627
% Input formulas: 62
% Initial clauses: 226
% 
% Duplicate literals: 2977
% Trivial inequalities: 176
% Fw subsumption resolutions: 2570
% Fw demodulations: 10381
% Bw demodulations: 398
% Condensations: 4034
% Global subsumptions: 369
% 
% Simple tautologies: 252
% Equational tautologies: 1911
% Forward subsumptions: 35782
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 23503
% Factoring: 9
% Forward superposition: 10622
% Backward superposition: 7623
% Self superposition: 186
% Equality factoring: 146
% Equality resolution: 5
% 
% Split clauses: 116
% Split components: 253
% SAT solver clauses: 5987
% SAT solver unit clauses: 1285
% SAT solver binary clauses: 1766
% 
% Sat splits: 116
% Sat splitting refutations: 1310
% 
% Memory used [KB]: 28272
% Time elapsed: 3.693 s
% ------------------------------
% ------------------------------
% Success in time 5.008 s
