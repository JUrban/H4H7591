Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f7995,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7993,f286,f472])).
fof(f472,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f286,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESSES_WEAKEN_THM|split|1',aHL_FALSITY)).
fof(f7993,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f7992,f472])).
fof(f7992,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f7950,f953])).
fof(f953,plain,(
  s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK10,sK11),sK12),s(fun(sK11,bool),sK13)))),
  inference(resolution,[],[f279,f300])).
fof(f300,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f188])).
fof(f188,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.quantHeuristics.GUESSES_WEAKEN_THM|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f279,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK10,sK11),sK12),s(fun(sK11,bool),sK13))))),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK10,sK11),sK12),s(fun(sK11,bool),sK13)))) & ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK10,sK11),sK12),s(fun(sK11,bool),sK13))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13])],[f131])).
fof(f131,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))))),
  inference(ennf_transformation,[],[f55])).
fof(f55,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) => p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) => p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) => p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) => p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))))),
  file('thm.quantHeuristics.GUESSES_WEAKEN_THM|split|1','thm.quantHeuristics.GUESSES_WEAKEN_THM|split|1')).
fof(f7950,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK10,sK11),sK12),s(fun(sK11,bool),sK13))))),
  inference(resolution,[],[f4710,f392])).
fof(f392,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))) )),
  inference(cnf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X6] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK22(X6,X3,X2,X1,X0))))))))) & ((~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK23(X3,X2,X1,X0))))) & ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23])],[f241])).
fof(f241,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X6] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | ? [X7] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X7)))))))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(ennf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X7,X6] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) <=> ! [X18] : (~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X18)))) => ? [X19] : ~p(s(bool,happ(s(fun(X7,bool),X9),s(X7,happ(s(fun(X6,X7),X8),s(X6,X19))))))))),
  file('thm.quantHeuristics.GUESSES_WEAKEN_THM|split|1','thm.quantHeuristics.GUESS_EXISTS_FORALL_REWRITES|split|1')).
fof(f4710,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK11,bool),sK13),s(sK11,happ(s(fun(sK10,sK11),sK12),s(sK10,X0))))))) )),
  inference(resolution,[],[f393,f278])).
fof(f278,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK10,sK11),sK12),s(fun(sK11,bool),sK13))))),
  inference(cnf_transformation,[],[f183])).
fof(f393,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK24(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24])],[f244])).
fof(f244,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7,X6] : ! [X20,X21] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X6,X7),X20),s(fun(X7,bool),X21)))) <=> ! [X19] : ~p(s(bool,happ(s(fun(X7,bool),X21),s(X7,happ(s(fun(X6,X7),X20),s(X6,X19)))))))),
  file('thm.quantHeuristics.GUESSES_WEAKEN_THM|split|1','thm.quantHeuristics.GUESS_REWRITES|split|3')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 456
% Passive clauses: 3588
% Generated clauses: 7709
% Final active clauses: 454
% Final passive clauses: 2906
% Input formulas: 52
% Initial clauses: 188
% 
% Duplicate literals: 172
% Trivial inequalities: 47
% Fw subsumption resolutions: 487
% Fw demodulations: 45
% Bw demodulations: 2
% 
% Simple tautologies: 162
% Equational tautologies: 42
% Forward subsumptions: 3106
% 
% Binary resolution: 5081
% Factoring: 906
% Forward superposition: 400
% Backward superposition: 309
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 130
% Split components: 262
% SAT solver clauses: 294
% SAT solver unit clauses: 13
% SAT solver binary clauses: 58
% SAT solver learnt clauses: 1
% 
% Sat splits: 130
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 293
% TWLsolver calls for satisfiability: 220
% 
% Memory used [KB]: 4093
% Time elapsed: 0.299 s
% ------------------------------
% ------------------------------
% Success in time 0.291 s
