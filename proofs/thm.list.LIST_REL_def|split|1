Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% (95669)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 162
% Passive clauses: 3877
% Generated clauses: 27214
% Final active clauses: 154
% Final passive clauses: 3554
% Input formulas: 69
% Initial clauses: 151
% 
% Duplicate literals: 844
% Trivial inequalities: 529
% Fw subsumption resolutions: 3732
% Fw demodulations: 5071
% Bw demodulations: 7
% 
% Simple tautologies: 557
% Equational tautologies: 58
% Forward subsumptions: 12074
% 
% Binary resolution: 218
% Factoring: 1
% Forward superposition: 8357
% Backward superposition: 9055
% Self superposition: 272
% Equality factoring: 118
% Equality resolution: 41
% 
% Split clauses: 276
% Split components: 553
% SAT solver clauses: 624
% SAT solver unit clauses: 45
% SAT solver binary clauses: 288
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 276
% 
% TWLsolver clauses: 623
% TWLsolver calls for satisfiability: 83
% 
% Memory used [KB]: 16119
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f9252,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9246,f336,f456,f345,f461,f9196,f9198,f264,f425,f273,f434,f380,f493,f583,f592,f263,f423,f276,f437])).
fof(f437,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f437_D])).
fof(f437_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f276,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.list.LIST_REL_def|split|1',aHL_BOOL_CASES)).
fof(f423,plain,(
  s(bool,'F_0') != s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0'))) | $spl1),
  inference(cnf_transformation,[],[f423_D])).
fof(f423_D,plain,(
  s(bool,'F_0') != s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f263,plain,(
  s(bool,'F_0') != s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  s(bool,'F_0') != s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f171])).
fof(f171,plain,(
  ? [X0,X1,X2,X3,X4] : s(bool,'F_0') != s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.NIL_0')))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3,X4] : s(bool,'F_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.NIL_0')))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s(bool,'F_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.NIL_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s(bool,'F_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))),s('type.list.list'(X7),'const.list.NIL_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s(bool,'F_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))),s('type.list.list'(X7),'const.list.NIL_0')))),
  file('thm.list.LIST_REL_def|split|1','thm.list.LIST_REL_def|split|1')).
fof(f592,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0'))) | $spl146),
  inference(cnf_transformation,[],[f592_D])).
fof(f592_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0'))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f583,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl16)),
  inference(trivial_inequality_removal,[],[f577])).
fof(f577,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK1,fun(sK2,bool)),sK5),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))),s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl16)),
  inference(superposition,[],[f423,f437])).
fof(f493,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) ) | $spl102),
  inference(cnf_transformation,[],[f493_D])).
fof(f493_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f380,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))) )),
  inference(cnf_transformation,[],[f257])).
fof(f257,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X4))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK21(X4,X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',sK21(X4,X3,X2,X1,X0)),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',sK21(X4,X3,X2,X1,X0)),s('type.list.list'(X1),X4))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK21])],[f256])).
fof(f256,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X4))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(rectify,[],[f255])).
fof(f255,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(flattening,[],[f254])).
fof(f254,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(nnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))))),
  inference(ennf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))))),
  inference(flattening,[],[f161])).
fof(f161,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6,X7] : ! [X10,X25,X26] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X10),s('type.list.list'(X6),X25),s('type.list.list'(X7),X26)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X25))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X26))) & ! [X27] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X25)))))) => p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),X10),s(X6,'const.list.EL_2'(s('type.num.num',X27),s('type.list.list'(X6),X25))))),s(X7,'const.list.EL_2'(s('type.num.num',X27),s('type.list.list'(X7),X26)))))))))),
  file('thm.list.LIST_REL_def|split|1','thm.list.LIST_REL_EL_EQN')).
fof(f434,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl10),
  inference(cnf_transformation,[],[f434_D])).
fof(f434_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f273,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.LIST_REL_def|split|1','thm.list.LENGTH|split|0')).
fof(f425,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f425_D])).
fof(f425_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f264,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.list.LIST_REL_def|split|1',aHL_TRUTH)).
fof(f9198,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))))) | $spl1124),
  inference(cnf_transformation,[],[f9198_D])).
fof(f9198_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))))) <=> ~$spl1124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1124])])).
fof(f9196,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))))) | ($spl2 | $spl10 | $spl102 | $spl146)),
  inference(forward_demodulation,[],[f9195,f434])).
fof(f9195,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))))) | ($spl2 | $spl102 | $spl146)),
  inference(subsumption_resolution,[],[f9159,f425])).
fof(f9159,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK2),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),sK3))))) | ($spl102 | $spl146)),
  inference(superposition,[],[f493,f592])).
fof(f461,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) ) | $spl38),
  inference(cnf_transformation,[],[f461_D])).
fof(f461_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f345,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X6] : ! [X43,X15] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X43),s('type.list.list'(X6),X15)))))),
  file('thm.list.LIST_REL_def|split|1','thm.list.LENGTH|split|1')).
fof(f456,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(cnf_transformation,[],[f456_D])).
fof(f456_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f336,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X27] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X27)))),
  file('thm.list.LIST_REL_def|split|1','thm.num.NOT_SUC')).
fof(f9246,plain,(
  $false | ($spl28 | $spl38 | $spl1124)),
  inference(subsumption_resolution,[],[f9220,f456])).
fof(f9220,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))))) | ($spl38 | $spl1124)),
  inference(superposition,[],[f9198,f461])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 99
% Passive clauses: 587
% Generated clauses: 8919
% Final active clauses: 86
% Final passive clauses: 450
% Input formulas: 69
% Initial clauses: 151
% 
% Duplicate literals: 330
% Trivial inequalities: 128
% Fw subsumption resolutions: 703
% Fw demodulations: 1574
% Bw demodulations: 49
% Condensations: 439
% Global subsumptions: 17
% 
% Simple tautologies: 137
% Equational tautologies: 29
% Forward subsumptions: 4022
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 68
% Factoring: 1
% Forward superposition: 2089
% Backward superposition: 2594
% Self superposition: 105
% Equality factoring: 49
% Equality resolution: 23
% 
% Split clauses: 67
% Split components: 136
% SAT solver clauses: 1123
% SAT solver unit clauses: 176
% SAT solver binary clauses: 49
% SAT solver learnt clauses: 35
% 
% Sat splits: 67
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1053
% TWLsolver calls for satisfiability: 755
% 
% Memory used [KB]: 7419
% Time elapsed: 0.319 s
% ------------------------------
% ------------------------------
% Success in time 0.931 s
