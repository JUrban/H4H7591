Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f516,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f515,f486,f482])).
fof(f482,plain,(
  s(bool,'T_0') = s(bool,sK3) | $spl4),
  inference(cnf_transformation,[],[f482_D])).
fof(f482_D,plain,(
  s(bool,'T_0') = s(bool,sK3) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f486,plain,(
  s(bool,'T_0') = s(bool,sK3)),
  inference(trivial_inequality_removal,[],[f485])).
fof(f485,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5))) | s(bool,'T_0') = s(bool,sK3)),
  inference(forward_demodulation,[],[f484,f38])).
fof(f38,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X7] : ! [X14,X15] : s(X7,X15) = s(X7,'const.bool.COND_3'(s(bool,'F_0'),s(X7,X14),s(X7,X15)))),
  file('thm.rich_list.rich_list_228_prove_ltb','thm.bool.COND_CLAUSES|split|1')).
fof(f484,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))))) | s(bool,'T_0') = s(bool,sK3)),
  inference(forward_demodulation,[],[f473,f38])).
fof(f473,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))))) != s('type.list.list'(sK0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5))))) | s(bool,'T_0') = s(bool,sK3)),
  inference(superposition,[],[f29,f33])).
fof(f33,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) | s(bool,'F_0') = s(bool,X12))),
  file('thm.rich_list.rich_list_228_prove_ltb','thm.bool.BOOL_CASES_AX')).
fof(f29,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.bool.COND_3'(s(bool,sK3),s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))))) != s('type.list.list'(sK0),'const.bool.COND_3'(s(bool,sK3),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5)))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.bool.COND_3'(s(bool,sK3),s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))))) != s('type.list.list'(sK0),'const.bool.COND_3'(s(bool,sK3),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5))))) != s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X5)))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X5)))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),'const.bool.COND_3'(s(bool,X9),s('type.list.list'(X7),X10),s('type.list.list'(X7),X11))))) = s('type.list.list'(X6),'const.bool.COND_3'(s(bool,X9),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),X10))),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),'const.bool.COND_3'(s(bool,X9),s('type.list.list'(X7),X10),s('type.list.list'(X7),X11))))) = s('type.list.list'(X6),'const.bool.COND_3'(s(bool,X9),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),X10))),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),X11)))))),
  file('thm.rich_list.rich_list_228_prove_ltb','thm.rich_list.rich_list_228_prove_ltb')).
fof(f515,plain,(
  $false | $spl4),
  inference(trivial_inequality_removal,[],[f514])).
fof(f514,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))) != s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))) | $spl4),
  inference(forward_demodulation,[],[f513,f37])).
fof(f37,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7] : ! [X14,X15] : s(X7,X14) = s(X7,'const.bool.COND_3'(s(bool,'T_0'),s(X7,X14),s(X7,X15)))),
  file('thm.rich_list.rich_list_228_prove_ltb','thm.bool.COND_CLAUSES|split|0')).
fof(f513,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))) != s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))))) | $spl4),
  inference(forward_demodulation,[],[f489,f37])).
fof(f489,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))))) != s('type.list.list'(sK0),'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK4))),s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),sK5))))) | $spl4),
  inference(backward_demodulation,[],[f482,f29])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 17
% Passive clauses: 101
% Generated clauses: 458
% Final active clauses: 14
% Final passive clauses: 71
% Input formulas: 10
% Initial clauses: 11
% 
% Duplicate literals: 56
% Trivial inequalities: 7
% Fw subsumption resolutions: 6
% Fw demodulations: 12
% Bw demodulations: 1
% 
% Simple tautologies: 16
% Equational tautologies: 15
% Forward subsumptions: 248
% 
% Binary resolution: 4
% Forward superposition: 166
% Backward superposition: 131
% Self superposition: 35
% Equality factoring: 26
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 8
% SAT solver unit clauses: 3
% SAT solver binary clauses: 4
% SAT solver learnt clauses: 1
% 
% Sat splits: 4
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 7
% TWLsolver calls for satisfiability: 3
% 
% Memory used [KB]: 895
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.021 s
