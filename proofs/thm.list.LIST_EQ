Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% (89375)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 98
% Passive clauses: 2701
% Generated clauses: 18771
% Final active clauses: 89
% Final passive clauses: 2494
% Input formulas: 6
% Initial clauses: 11
% 
% Duplicate literals: 1120
% Trivial inequalities: 283
% Fw subsumption resolutions: 2435
% Fw demodulations: 1624
% Bw demodulations: 5
% 
% Simple tautologies: 363
% Equational tautologies: 96
% Forward subsumptions: 7906
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 42
% Forward superposition: 8369
% Backward superposition: 4136
% Self superposition: 322
% Equality factoring: 242
% Equality resolution: 26
% 
% Split clauses: 929
% Split components: 1883
% SAT solver clauses: 2305
% SAT solver unit clauses: 278
% SAT solver binary clauses: 641
% 
% Sat splits: 929
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2295
% TWLsolver calls for satisfiability: 117
% 
% Memory used [KB]: 7164
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f469,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f468,f27,f37,f384,f395,f26,f38,f381,f383,f376,f377,f25,f40,f33,f47,f432,f435,f34,f46])).
fof(f46,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) ) | $spl12),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f34,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) | s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X2)))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.list.list'(X0),X2)))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X2)))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2)))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2)))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2)))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2)))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)))),
  inference(nnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) => s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) => s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X8) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) => s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X8))))))),
  file('thm.list.LIST_EQ','thm.list.LIST_EQ_REWRITE')).
fof(f435,plain,(
  ( ! [X0] : (s(sK0,'const.list.EL_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.list.list'(sK0),sK2))) != s(sK0,'const.list.EL_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.list.list'(sK0),X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) | $spl82),
  inference(cnf_transformation,[],[f435_D])).
fof(f435_D,plain,(
  ( ! [X0] : (s(sK0,'const.list.EL_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.list.list'(sK0),sK2))) != s(sK0,'const.list.EL_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.list.list'(sK0),X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f432,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s(sK0,'const.list.EL_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.list.list'(sK0),sK2))) != s(sK0,'const.list.EL_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.list.list'(sK0),X0))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) | ($spl4 | $spl12)),
  inference(superposition,[],[f46,f40])).
fof(f47,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) ) | $spl14),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f33,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f40,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl4),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f25,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) & ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK2)))) & s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f16])).
fof(f16,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2)))) & s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))) & s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) => s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0] : ! [X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) => s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X2))))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) => s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X8))))) => s('type.list.list'(X6),X7) = s('type.list.list'(X6),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) => s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X8))))) => s('type.list.list'(X6),X7) = s('type.list.list'(X6),X8))),
  file('thm.list.LIST_EQ','thm.list.LIST_EQ')).
fof(f377,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) | $spl72),
  inference(cnf_transformation,[],[f377_D])).
fof(f377_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f376,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) | ($spl4 | $spl14)),
  inference(forward_demodulation,[],[f373,f40])).
fof(f373,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(X0,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X0)) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f47,f40])).
fof(f383,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl76),
  inference(cnf_transformation,[],[f383_D])).
fof(f383_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f381,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ($spl1 | $spl72)),
  inference(subsumption_resolution,[],[f380,f37])).
fof(f380,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) | $spl72),
  inference(equality_resolution,[],[f377])).
fof(f38,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK2)))) ) | $spl2),
  inference(cnf_transformation,[],[f38_D])).
fof(f38_D,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f26,plain,(
  ( ! [X3] : (s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f395,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK2))) | $spl78),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK2))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f384,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK1))) = s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK2))) | ($spl2 | $spl76)),
  inference(resolution,[],[f383,f38])).
fof(f37,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) | $spl1),
  inference(cnf_transformation,[],[f37_D])).
fof(f37_D,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f27,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f468,plain,(
  $false | ($spl1 | $spl78 | $spl82)),
  inference(subsumption_resolution,[],[f467,f37])).
fof(f467,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) | ($spl78 | $spl82)),
  inference(trivial_inequality_removal,[],[f465])).
fof(f465,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK1))) != s(sK0,'const.list.EL_2'(s('type.num.num',sK3(sK1,sK2,sK0)),s('type.list.list'(sK0),sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) | ($spl78 | $spl82)),
  inference(superposition,[],[f435,f395])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 29
% Passive clauses: 48
% Generated clauses: 429
% Final active clauses: 21
% Final passive clauses: 15
% Input formulas: 6
% Initial clauses: 11
% 
% Duplicate literals: 58
% Trivial inequalities: 4
% Fw subsumption resolutions: 24
% Fw demodulations: 7
% Bw demodulations: 6
% Condensations: 45
% 
% Simple tautologies: 16
% Equational tautologies: 21
% Forward subsumptions: 129
% 
% Binary resolution: 6
% Forward superposition: 80
% Backward superposition: 67
% Self superposition: 28
% Equality factoring: 28
% Equality resolution: 9
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 87
% SAT solver unit clauses: 15
% SAT solver binary clauses: 15
% SAT solver learnt clauses: 1
% 
% Sat splits: 8
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 86
% TWLsolver calls for satisfiability: 81
% 
% Memory used [KB]: 1023
% Time elapsed: 0.014 s
% ------------------------------
% ------------------------------
% Success in time 0.63 s
