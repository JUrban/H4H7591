Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (77082)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 433
% Passive clauses: 4569
% Generated clauses: 31322
% Final active clauses: 302
% Final passive clauses: 3694
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 445
% Trivial inequalities: 210
% Fw subsumption resolutions: 1480
% Fw demodulations: 5444
% Bw demodulations: 100
% 
% Simple tautologies: 139
% Equational tautologies: 41
% Forward subsumptions: 18678
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 14
% 
% Binary resolution: 246
% Factoring: 1
% Forward superposition: 12489
% Backward superposition: 10466
% Self superposition: 135
% Equality factoring: 76
% Equality resolution: 13
% 
% Split clauses: 238
% Split components: 476
% SAT solver clauses: 550
% SAT solver unit clauses: 7
% SAT solver binary clauses: 60
% 
% Sat splits: 238
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 550
% TWLsolver calls for satisfiability: 98
% 
% Memory used [KB]: 22771
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (77120)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 191
% Passive clauses: 996
% Generated clauses: 21320
% Final active clauses: 154
% Final passive clauses: 706
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 1040
% Trivial inequalities: 277
% Fw subsumption resolutions: 1472
% Fw demodulations: 4086
% Bw demodulations: 130
% Condensations: 1569
% 
% Simple tautologies: 262
% Equational tautologies: 46
% Forward subsumptions: 9445
% 
% Binary resolution: 57
% Factoring: 1
% Forward superposition: 5864
% Backward superposition: 5475
% Self superposition: 173
% Equality factoring: 114
% Equality resolution: 25
% 
% Split clauses: 163
% Split components: 331
% SAT solver clauses: 2205
% SAT solver unit clauses: 143
% SAT solver binary clauses: 72
% 
% Sat splits: 163
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 2205
% TWLsolver calls for satisfiability: 600
% 
% Memory used [KB]: 14456
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f35401,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f207,f315,f314,f206,f317,f205,f319,f313,f463,f470,f468,f504,f506,f557,f877,f887,f878,f890,f881,f894,f892,f882,f895,f883,f896,f884,f889,f898,f885,f902,f900,f1675,f1700,f1698,f1936,f1941,f1939,f2313,f2348,f2346,f2558,f2519,f2560,f2562,f2606,f2608,f3593,f3597,f3595,f3643,f3672,f3850,f3880,f3903,f3904,f3905,f4047,f4048,f4049,f4050,f4051,f4052,f4053,f4054,f4030,f4032,f4034,f5355,f5360,f5345,f5346,f5367,f5368,f5359,f5357,f5660,f5665,f5650,f5651,f5672,f5673,f5664,f5662,f5852,f5856,f5854,f5858,f5855,f5853,f6290,f6341,f6339,f6866,f6917,f6918,f7148,f7152,f7153,f7164,f7165,f7166,f7167,f7168,f7204,f7205,f7206,f7211,f7214,f7216,f7218,f7222,f7226,f7228,f7229,f7231,f7233,f7235,f7238,f7240,f7241,f7242,f7244,f7246,f7247,f7248,f7249,f7250,f7251,f7252,f7253,f7254,f7255,f7256,f7257,f7258,f7259,f7260,f7261,f7262,f7263,f7264,f7265,f7266,f7267,f7268,f7269,f7270,f7271,f7272,f7273,f7274,f7275,f7276,f7277,f7278,f7279,f7280,f7281,f7282,f7283,f7284,f7285,f7286,f7287,f7288,f7289,f7290,f7291,f7292,f7293,f7294,f7295,f7296,f7297,f7298,f7299,f7300,f7301,f7302,f7303,f7304,f7305,f7307,f7308,f7309,f7310,f7311,f7312,f7313,f7314,f7315,f7316,f7317,f7318,f7319,f7320,f7321,f7322,f7323,f7324,f7325,f7326,f7327,f7328,f7329,f7330,f7331,f7332,f7333,f7334,f7335,f7337,f7339,f7341,f7343,f7345,f7347,f7349,f7351,f7353,f7355,f7357,f7359,f7361,f7363,f7365,f7367,f7369,f7371,f7373,f7375,f7377,f7379,f7381,f7383,f7406,f7415,f7421,f7423,f7440,f7442,f7444,f7446,f7448,f7450,f7452,f7454,f7459,f7461,f7463,f7465,f7479,f7481,f7483,f7496,f7498,f7499,f7500,f7501,f7503,f7504,f7508,f7510,f7511,f7512,f7513,f7514,f7519,f7524,f7525,f7533,f7534,f7535,f7536,f7537,f7538,f7625,f7626,f7633,f7634,f7635,f7636,f7637,f7638,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7668,f7670,f7673,f7674,f7676,f7677,f7680,f7681,f7687,f7669,f7688,f7671,f7695,f7696,f7697,f7698,f7699,f7702,f7704,f7700,f7627,f7715,f7716,f7717,f7718,f7719,f7720,f7722,f7723,f7724,f7725,f7746,f7747,f7748,f7749,f7751,f7752,f7754,f7755,f7756,f7628,f7757,f7899,f12921,f13020,f13018,f12923,f13024,f12924,f13026,f12925,f13028,f13022,f12972,f13040,f13034,f13036,f15021,f15035,f15033,f15027,f15044,f15042,f16408,f16487,f16485,f17233,f17365,f17363,f17238,f17370,f17368,f24492,f24495,f24524,f24493,f24526,f505,f24496,f28054,f28047,f28056,f28058,f29148,f29151,f29149,f30178,f30242,f30240,f32444,f35103,f35105,f35106,f35109,f35107,f35144,f35395])).
fof(f35395,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl16)),
  inference(subsumption_resolution,[],[f35394,f208])).
fof(f208,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9',aHL_TRUTH)).
fof(f35394,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl4 | $spl6 | $spl16)),
  inference(forward_demodulation,[],[f35363,f464])).
fof(f464,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1))) | $spl6),
  inference(subsumption_resolution,[],[f456,f213])).
fof(f213,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9',aHL_FALSITY)).
fof(f456,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1))) | $spl6),
  inference(superposition,[],[f350,f238])).
fof(f238,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9',aHL_BOOL_CASES)).
fof(f350,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f319,f295])).
fof(f295,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X16,X20] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num',X20))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.GREATER_EQ')).
fof(f35363,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1)))) | ($spl1 | $spl4 | $spl16)),
  inference(unit_resulting_resolution,[],[f317,f35145,f7936])).
fof(f7936,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) ) | $spl16),
  inference(forward_demodulation,[],[f345,f7858])).
fof(f7858,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f7849,f228])).
fof(f228,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_suc|split|1')).
fof(f7849,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(backward_demodulation,[],[f211,f7763])).
fof(f7763,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f1171,f7539])).
fof(f7539,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl16),
  inference(backward_demodulation,[],[f887,f221])).
fof(f221,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X21] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num',X21)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f1171,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f1148,f228])).
fof(f1148,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f231,f212])).
fof(f212,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f27])).
fof(f27,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|13')).
fof(f231,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|14')).
fof(f211,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f57])).
fof(f57,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_suc|split|0')).
fof(f345,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) )),
  inference(forward_demodulation,[],[f332,f295])).
fof(f332,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) )),
  inference(backward_demodulation,[],[f295,f274])).
fof(f274,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0)))))))) & (! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15,sK16])],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X6,X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X6))))))) & (! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))) & (! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(flattening,[],[f125])).
fof(f125,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_2|split|8')).
fof(f35145,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f314,f7858])).
fof(f35144,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl16)),
  inference(subsumption_resolution,[],[f317,f32991])).
fof(f32991,plain,(
  ( ! [X12,X13] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK3)))))) ) | ($spl2 | $spl6 | $spl16)),
  inference(subsumption_resolution,[],[f32990,f27742])).
fof(f27742,plain,(
  ( ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1))))),s('type.num.num',sK1))))) ) | ($spl6 | $spl16)),
  inference(backward_demodulation,[],[f27741,f27666])).
fof(f27666,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK7(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0)),s('type.list.list'(sK0),X1))))),s('type.num.num',sK1))))) ) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f27511,f23035])).
fof(f23035,plain,(
  ( ! [X2,X3] : (s('type.list.list'(X2),X3) = s('type.list.list'(X2),sK9(X3,'const.num.|48|_0',X2))) ) | $spl16),
  inference(superposition,[],[f19042,f245])).
fof(f245,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X8] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X8)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.APPEND|split|0')).
fof(f19042,plain,(
  ( ! [X35,X36] : (s('type.list.list'(X35),X36) = s('type.list.list'(X35),'const.list.APPEND_2'(s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X35),sK9(X36,'const.num.|48|_0',X35))))) ) | $spl16),
  inference(backward_demodulation,[],[f18795,f14989])).
fof(f14989,plain,(
  ( ! [X35,X36] : (s('type.list.list'(X35),X36) = s('type.list.list'(X35),'const.list.APPEND_2'(s('type.list.list'(X35),sK8(X36,'const.num.|48|_0',X35)),s('type.list.list'(X35),sK9(X36,'const.num.|48|_0',X35))))) ) | $spl16),
  inference(subsumption_resolution,[],[f14988,f208])).
fof(f14988,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | s('type.list.list'(X35),X36) = s('type.list.list'(X35),'const.list.APPEND_2'(s('type.list.list'(X35),sK8(X36,'const.num.|48|_0',X35)),s('type.list.list'(X35),sK9(X36,'const.num.|48|_0',X35))))) ) | $spl16),
  inference(forward_demodulation,[],[f14951,f6864])).
fof(f6864,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f6818,f220])).
fof(f220,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X16] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|26')).
fof(f6818,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f348,f920])).
fof(f920,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f905,f219])).
fof(f219,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X16] : s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|1')).
fof(f905,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f219,f240])).
fof(f240,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X16))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|17')).
fof(f348,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f300,f295])).
fof(f300,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X16,X20] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X20))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|28')).
fof(f14951,plain,(
  ( ! [X35,X36] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),X36))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X35),X36) = s('type.list.list'(X35),'const.list.APPEND_2'(s('type.list.list'(X35),sK8(X36,'const.num.|48|_0',X35)),s('type.list.list'(X35),sK9(X36,'const.num.|48|_0',X35))))) ) | $spl16),
  inference(superposition,[],[f334,f7539])).
fof(f334,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f295,f264])).
fof(f264,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X16,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X14,X15] : (s('type.num.num',X16) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X14))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X14),s('type.list.list'(X6),X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LENGTH_LE_NUM')).
fof(f18795,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK8(X1,'const.num.|48|_0',X0))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f12877,f7551])).
fof(f7551,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl16),
  inference(backward_demodulation,[],[f7539,f246])).
fof(f246,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.LENGTH_NIL_SYM')).
fof(f12877,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),sK8(X26,'const.num.|48|_0',X25))))) ) | $spl16),
  inference(forward_demodulation,[],[f12876,f7539])).
fof(f12876,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),sK8(X26,'const.num.|48|_0',X25))))) ) | $spl16),
  inference(subsumption_resolution,[],[f12875,f208])).
fof(f12875,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),sK8(X26,'const.num.|48|_0',X25))))) ) | $spl16),
  inference(forward_demodulation,[],[f12837,f6864])).
fof(f12837,plain,(
  ( ! [X26,X25] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X26))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),sK8(X26,'const.num.|48|_0',X25))))) ) | $spl16),
  inference(superposition,[],[f333,f7539])).
fof(f333,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f295,f263])).
fof(f263,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f27511,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.APPEND_2'(s('type.list.list'(sK0),sK7(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0)),s('type.list.list'(sK0),X1)),'const.num.|48|_0',sK0)))),s('type.num.num',sK1))))) ) | ($spl6 | $spl16)),
  inference(unit_resulting_resolution,[],[f23035,f17214,f335])).
fof(f335,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f295,f265])).
fof(f265,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f177])).
fof(f17214,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK1,'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f16054,f260])).
fof(f260,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X2,X1,X0)),s('type.list.list'(X0),sK7(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X8,X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> ? [X17,X9] : (s('type.num.num',X16) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.LENGTH_CONS')).
fof(f16054,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))))))) ) | $spl6),
  inference(forward_demodulation,[],[f15949,f245])).
fof(f15949,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f12915,f245,f262])).
fof(f262,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f12915,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) | $spl6),
  inference(subsumption_resolution,[],[f12857,f208])).
fof(f12857,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) | $spl6),
  inference(superposition,[],[f333,f464])).
fof(f27741,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK7(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0)),s('type.list.list'(sK0),X0)))))) ) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f27740,f7545])).
fof(f7545,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f7539,f219])).
fof(f27740,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK7(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0)),s('type.list.list'(sK0),X0)))))) ) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f27473,f23035])).
fof(f27473,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9('const.list.APPEND_2'(s('type.list.list'(sK0),sK7(sK1,'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0)),s('type.list.list'(sK0),X0)),'const.num.|48|_0',sK0))))) ) | ($spl6 | $spl16)),
  inference(unit_resulting_resolution,[],[f7545,f23035,f17214,f289])).
fof(f289,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK23(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK24(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK23(X3,X2,X1,X0)),s('type.list.list'(X0),sK24(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK23,sK24])],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X8,X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))) <=> ? [X14,X15] : (s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X14))) & s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X14),s('type.list.list'(X6),X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.LENGTH_EQ_SUM')).
fof(f32990,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))))),s('type.num.num',sK1)))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK3)))))) ) | ($spl2 | $spl6 | $spl16)),
  inference(forward_demodulation,[],[f32978,f17729])).
fof(f17729,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),X0)))))) ) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f17728,f7545])).
fof(f17728,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl6 | $spl16)),
  inference(forward_demodulation,[],[f17676,f245])).
fof(f17676,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),X0)))))))) ) | ($spl6 | $spl16)),
  inference(unit_resulting_resolution,[],[f12915,f7545,f245,f289])).
fof(f32978,plain,(
  ( ! [X12,X13] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK3))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))))),s('type.num.num',sK1))))) ) | ($spl2 | $spl6)),
  inference(superposition,[],[f2609,f15008])).
fof(f15008,plain,(
  s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))) | $spl6),
  inference(subsumption_resolution,[],[f14971,f208])).
fof(f14971,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))) | $spl6),
  inference(superposition,[],[f334,f464])).
fof(f2609,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f315,f295])).
fof(f35107,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) | $spl178),
  inference(cnf_transformation,[],[f35107_D])).
fof(f35107_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f35109,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))))),s('type.num.num',sK1)))) | $spl181),
  inference(cnf_transformation,[],[f35109_D])).
fof(f35109_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))))),s('type.num.num',sK1)))) <=> ~$spl181),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl181])])).
fof(f35106,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))))),s('type.num.num',sK1)))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) | ($spl0 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f35043,f15998])).
fof(f15998,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))))) ) | $spl16),
  inference(forward_demodulation,[],[f15997,f7545])).
fof(f15997,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f15954,f245])).
fof(f15954,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f7545,f245,f262])).
fof(f35043,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16(sK2,sK1,sK0)),s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))))),s('type.num.num',sK1))))) ) | ($spl0 | $spl2 | $spl16)),
  inference(superposition,[],[f2609,f32533])).
fof(f32533,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16(sK2,sK1,sK0)),s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f7900,f7931])).
fof(f7931,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0))))))) ) | $spl16),
  inference(forward_demodulation,[],[f341,f7858])).
fof(f341,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0))))))) )),
  inference(backward_demodulation,[],[f295,f273])).
fof(f273,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f7900,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f313,f7858])).
fof(f35105,plain,(
  $false | ($spl0 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f35104,f208])).
fof(f35104,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f35089,f32811])).
fof(f32811,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))),s('type.num.num',sK1))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f32534,f454])).
fof(f454,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f213,f238])).
fof(f32534,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f7900,f7934])).
fof(f7934,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X2,X1,X0)))),s('type.num.num',X1))))) ) | $spl16),
  inference(forward_demodulation,[],[f346,f7858])).
fof(f346,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f336,f295])).
fof(f336,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f295,f272])).
fof(f272,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f35089,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl2 | $spl16)),
  inference(trivial_inequality_removal,[],[f35042])).
fof(f35042,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl2 | $spl16)),
  inference(superposition,[],[f2609,f32533])).
fof(f35103,plain,(
  $false | ($spl0 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f35102,f208])).
fof(f35102,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f35036,f32811])).
fof(f35036,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl2 | $spl16)),
  inference(unit_resulting_resolution,[],[f32533,f2609])).
fof(f32444,plain,(
  $false | ($spl0 | $spl2 | $spl16 | $spl42)),
  inference(subsumption_resolution,[],[f32443,f208])).
fof(f32443,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f32442,f6864])).
fof(f32442,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl0 | $spl2 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f32441,f8799])).
fof(f8799,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl16 | $spl42)),
  inference(subsumption_resolution,[],[f8766,f208])).
fof(f8766,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl16 | $spl42)),
  inference(superposition,[],[f7667,f7982])).
fof(f7982,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl16 | $spl42)),
  inference(unit_resulting_resolution,[],[f7943,f454])).
fof(f7943,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl0 | $spl16 | $spl42)),
  inference(backward_demodulation,[],[f7942,f7900])).
fof(f7942,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl16 | $spl42)),
  inference(forward_demodulation,[],[f1940,f7539])).
fof(f1940,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl42),
  inference(cnf_transformation,[],[f1940_D])).
fof(f1940_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f7667,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl16),
  inference(forward_demodulation,[],[f7666,f7539])).
fof(f7666,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl16),
  inference(forward_demodulation,[],[f243,f7539])).
fof(f243,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X16] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X16))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|30')).
fof(f32441,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl0 | $spl2 | $spl16 | $spl42)),
  inference(unit_resulting_resolution,[],[f15782,f7931])).
fof(f15782,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK14(X2,sK1,sK0))))))) ) | ($spl0 | $spl2 | $spl16 | $spl42)),
  inference(unit_resulting_resolution,[],[f15779,f10243])).
fof(f10243,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))),s('type.num.num',sK1))))) ) | ($spl2 | $spl16 | $spl42)),
  inference(backward_demodulation,[],[f10235,f2609])).
fof(f10235,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2) | ($spl16 | $spl42)),
  inference(unit_resulting_resolution,[],[f7942,f7551])).
fof(f15779,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK14(X9,sK1,X8)))),s('type.num.num',sK1))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(subsumption_resolution,[],[f15778,f208])).
fof(f15778,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK14(X9,sK1,X8)))),s('type.num.num',sK1))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f15690,f6864])).
fof(f15690,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK14(X9,sK1,X8)))),s('type.num.num',sK1))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(superposition,[],[f7934,f8799])).
fof(f30240,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl174),
  inference(cnf_transformation,[],[f30240_D])).
fof(f30240_D,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f30242,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl177),
  inference(cnf_transformation,[],[f30242_D])).
fof(f30242_D,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl177),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl177])])).
fof(f30178,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl16),
  inference(superposition,[],[f7808,f7858])).
fof(f7808,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f2025,f7539])).
fof(f2025,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f310,f212])).
fof(f310,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X16,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) <=> s('type.num.num',X16) = s('type.num.num',X20))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|19')).
fof(f29149,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl170),
  inference(cnf_transformation,[],[f29149_D])).
fof(f29149_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f29151,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)))),s('type.num.num',sK1)))) | $spl173),
  inference(cnf_transformation,[],[f29151_D])).
fof(f29151_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)))),s('type.num.num',sK1)))) <=> ~$spl173),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl173])])).
fof(f29148,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)))),s('type.num.num',sK1)))) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | ($spl2 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f29057,f17860])).
fof(f17860,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f17859,f7545])).
fof(f17859,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f17858,f7545])).
fof(f17858,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f17625,f245])).
fof(f17625,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f7545,f7562,f245,f289])).
fof(f7562,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f7539,f1965])).
fof(f1965,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f1960,f245])).
fof(f1960,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(unit_resulting_resolution,[],[f245,f247])).
fof(f247,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f165])).
fof(f29057,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.NIL_0'))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))))),s('type.num.num',sK1))))) ) | ($spl2 | $spl16 | $spl42)),
  inference(superposition,[],[f10243,f21231])).
fof(f21231,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl16 | $spl42)),
  inference(trivial_inequality_removal,[],[f21230])).
fof(f21230,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl16 | $spl42)),
  inference(forward_demodulation,[],[f21229,f10235])).
fof(f21229,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl16 | $spl42)),
  inference(forward_demodulation,[],[f21228,f7545])).
fof(f21228,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl16 | $spl42)),
  inference(forward_demodulation,[],[f21176,f10235])).
fof(f21176,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK23('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl16 | $spl42)),
  inference(superposition,[],[f288,f20784])).
fof(f20784,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK24('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)) | ($spl16 | $spl42)),
  inference(unit_resulting_resolution,[],[f20423,f7551])).
fof(f20423,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK24('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK2,sK0)))) | ($spl16 | $spl42)),
  inference(superposition,[],[f13956,f10235])).
fof(f13956,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK24('const.arithmetic.ZERO_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f7545,f287])).
fof(f287,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK24(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f288,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK23(X3,X2,X1,X0)),s('type.list.list'(X0),sK24(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f199])).
fof(f28058,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl168),
  inference(cnf_transformation,[],[f28058_D])).
fof(f28058_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f28056,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl167),
  inference(cnf_transformation,[],[f28056_D])).
fof(f28056_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl167),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl167])])).
fof(f28047,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f7778,f7846])).
fof(f7846,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(backward_demodulation,[],[f211,f7758])).
fof(f7758,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f1089,f7539])).
fof(f1089,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f230,f212])).
fof(f230,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|16')).
fof(f7778,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl16),
  inference(forward_demodulation,[],[f7777,f7539])).
fof(f7777,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl16),
  inference(forward_demodulation,[],[f874,f7539])).
fof(f874,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f239,f218])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X16] : s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.ADD|split|0')).
fof(f239,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f162])).
fof(f28054,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f28053,f7846])).
fof(f28053,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f28016,f7846])).
fof(f28016,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(superposition,[],[f7778,f7846])).
fof(f24496,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK22('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl164),
  inference(cnf_transformation,[],[f24496_D])).
fof(f24496_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK22('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f505,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(cnf_transformation,[],[f505_D])).
fof(f505_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f24526,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK22('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f24525])).
fof(f24525,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,happ(s(fun(X26,bool),X27),s(X26,sK22('T_0',X27,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f24078,f503])).
fof(f503,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f487,f213])).
fof(f487,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f306,f238])).
fof(f306,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X18,X19] : ((p(s(bool,X18)) => p(s(bool,X19))) => ((p(s(bool,X19)) => p(s(bool,X18))) => s(bool,X18) = s(bool,X19)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.bool.IMP_ANTISYM_AX')).
fof(f24078,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~p(s(bool,X25)) | p(s(bool,happ(s(fun(X26,bool),X27),s(X26,sK22('T_0',X27,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f283,f450])).
fof(f450,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f238,f238])).
fof(f283,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK22(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK22(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK21,sK22])],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X6] : ! [X22,X23] : (? [X7] : (p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7)))) & p(s(bool,X23))) <=> (? [X7] : p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7)))) & p(s(bool,X23))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f24493,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK21('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl162),
  inference(cnf_transformation,[],[f24493_D])).
fof(f24493_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK21('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f24524,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK21('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f24523])).
fof(f24523,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,happ(s(fun(X21,bool),X22),s(X21,sK21('T_0',X22,X21))))) | ~p(s(bool,happ(s(fun(X21,bool),X22),s(X21,X23)))) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f24077,f503])).
fof(f24077,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,X20)) | p(s(bool,happ(s(fun(X21,bool),X22),s(X21,sK21('T_0',X22,X21))))) | ~p(s(bool,happ(s(fun(X21,bool),X22),s(X21,X23)))) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f281,f450])).
fof(f281,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f24495,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK22('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f24494])).
fof(f24494,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,happ(s(fun(X26,bool),X27),s(X26,sK22('T_0',X27,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f23974,f503])).
fof(f23974,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~p(s(bool,X25)) | p(s(bool,happ(s(fun(X26,bool),X27),s(X26,sK22('T_0',X27,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f283,f450])).
fof(f24492,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK21('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f24491])).
fof(f24491,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,happ(s(fun(X21,bool),X22),s(X21,sK21('T_0',X22,X21))))) | ~p(s(bool,happ(s(fun(X21,bool),X22),s(X21,X23)))) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f23973,f503])).
fof(f23973,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,X20)) | p(s(bool,happ(s(fun(X21,bool),X22),s(X21,sK21('T_0',X22,X21))))) | ~p(s(bool,happ(s(fun(X21,bool),X22),s(X21,X23)))) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f281,f450])).
fof(f17368,plain,(
  ( ! [X42] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.CONS_2'(s(sK0,X42),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0))))) ) | $spl158),
  inference(cnf_transformation,[],[f17368_D])).
fof(f17368_D,plain,(
  ( ! [X42] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.CONS_2'(s(sK0,X42),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f17370,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl161),
  inference(cnf_transformation,[],[f17370_D])).
fof(f17370_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f17238,plain,(
  ( ! [X42] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.CONS_2'(s(sK0,X42),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))),sK0))))) ) | ($spl0 | $spl6 | $spl16 | $spl42)),
  inference(superposition,[],[f12052,f16054])).
fof(f12052,plain,(
  ( ! [X24,X23] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),X24))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X24,X23))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f12051,f8799])).
fof(f12051,plain,(
  ( ! [X24,X23] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),X24))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X24,X23))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f12017,f211])).
fof(f12017,plain,(
  ( ! [X24,X23] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),X24))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X24,X23))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(superposition,[],[f260,f8799])).
fof(f17363,plain,(
  ( ! [X34] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X34),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))))) ) | $spl154),
  inference(cnf_transformation,[],[f17363_D])).
fof(f17363_D,plain,(
  ( ! [X34] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X34),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f17365,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl157),
  inference(cnf_transformation,[],[f17365_D])).
fof(f17365_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl157),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl157])])).
fof(f17233,plain,(
  ( ! [X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X34),s('type.list.list'(sK0),sK8(sK3,sK1,sK0))))) ) | ($spl6 | $spl16)),
  inference(superposition,[],[f7921,f16054])).
fof(f7921,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl16),
  inference(forward_demodulation,[],[f7920,f211])).
fof(f7920,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl16),
  inference(forward_demodulation,[],[f324,f7539])).
fof(f324,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f256,f212])).
fof(f256,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f16485,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl150),
  inference(cnf_transformation,[],[f16485_D])).
fof(f16485_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f16487,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl153),
  inference(cnf_transformation,[],[f16487_D])).
fof(f16487_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl153),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl153])])).
fof(f16408,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl133),
  inference(equality_factoring,[],[f13603])).
fof(f13603,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl133),
  inference(subsumption_resolution,[],[f13594,f213])).
fof(f13594,plain,(
  ( ! [X9] : (p(s(bool,'F_0')) | s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl133),
  inference(superposition,[],[f503,f13268])).
fof(f13268,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl133),
  inference(unit_resulting_resolution,[],[f213,f13024,f306])).
fof(f15042,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0))),sK0)))) | $spl146),
  inference(cnf_transformation,[],[f15042_D])).
fof(f15042_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0))),sK0)))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f15044,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl149),
  inference(cnf_transformation,[],[f15044_D])).
fof(f15044_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f15027,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0))),sK0)))) | ($spl0 | $spl6 | $spl16 | $spl42)),
  inference(superposition,[],[f12052,f15008])).
fof(f15033,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))) | $spl142),
  inference(cnf_transformation,[],[f15033_D])).
fof(f15033_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f15035,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl145),
  inference(cnf_transformation,[],[f15035_D])).
fof(f15035_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl145),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl145])])).
fof(f15021,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)),s('type.list.list'(sK0),sK9(sK3,sK1,sK0)))) | ($spl6 | $spl16)),
  inference(superposition,[],[f7551,f15008])).
fof(f13036,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl141),
  inference(cnf_transformation,[],[f13036_D])).
fof(f13036_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl141),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl141])])).
fof(f13034,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) | $spl138),
  inference(cnf_transformation,[],[f13034_D])).
fof(f13034_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f13040,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | ($spl0 | $spl6 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f13008,f8799])).
fof(f13008,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl6 | $spl16 | $spl42)),
  inference(superposition,[],[f9867,f12915])).
fof(f9867,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(forward_demodulation,[],[f9761,f7555])).
fof(f7555,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl16),
  inference(backward_demodulation,[],[f7539,f920])).
fof(f9761,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl16 | $spl42)),
  inference(superposition,[],[f310,f8799])).
fof(f12972,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK8(sK3,sK1,sK0)))) | ($spl6 | $spl16)),
  inference(superposition,[],[f7549,f12915])).
fof(f7549,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl16),
  inference(backward_demodulation,[],[f7539,f239])).
fof(f13022,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8(sK3,sK1,sK0)) | $spl130),
  inference(cnf_transformation,[],[f13022_D])).
fof(f13022_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8(sK3,sK1,sK0)) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f13028,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK1) | $spl137),
  inference(cnf_transformation,[],[f13028_D])).
fof(f13028_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK1) <=> ~$spl137),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl137])])).
fof(f12925,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8(sK3,sK1,sK0)) | ($spl6 | $spl16)),
  inference(superposition,[],[f7551,f12915])).
fof(f13026,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | $spl135),
  inference(cnf_transformation,[],[f13026_D])).
fof(f13026_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) <=> ~$spl135),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl135])])).
fof(f12924,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8(sK3,sK1,sK0)) | ($spl6 | $spl16)),
  inference(superposition,[],[f7928,f12915])).
fof(f7928,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl16),
  inference(forward_demodulation,[],[f250,f7539])).
fof(f250,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f13024,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl133),
  inference(cnf_transformation,[],[f13024_D])).
fof(f13024_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl133),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl133])])).
fof(f12923,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK8(sK3,sK1,sK0)) | ($spl6 | $spl16)),
  inference(superposition,[],[f7921,f12915])).
fof(f13018,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK8(sK3,sK1,sK0),sK0)))) | $spl126),
  inference(cnf_transformation,[],[f13018_D])).
fof(f13018_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK8(sK3,sK1,sK0),sK0)))) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f13020,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl129),
  inference(cnf_transformation,[],[f13020_D])).
fof(f13020_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl129])])).
fof(f12921,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK8(sK3,sK1,sK0),sK0)))) | ($spl0 | $spl6 | $spl16 | $spl42)),
  inference(superposition,[],[f12052,f12915])).
fof(f7899,plain,(
  $false | ($spl0 | $spl16 | $spl44 | $spl71)),
  inference(subsumption_resolution,[],[f7898,f7893])).
fof(f7893,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl16 | $spl44 | $spl71)),
  inference(forward_demodulation,[],[f6366,f7564])).
fof(f7564,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl16 | $spl44)),
  inference(backward_demodulation,[],[f7539,f2346])).
fof(f6366,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) | $spl71),
  inference(unit_resulting_resolution,[],[f6341,f454])).
fof(f7898,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl0 | $spl16 | $spl44)),
  inference(forward_demodulation,[],[f313,f7564])).
fof(f7757,plain,(
  ( ! [X88,X87,X86] : (s('type.list.list'(X86),X87) = s('type.list.list'(X86),sK20('const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87)),X88,'type.list.list'(X86)))) ) | $spl124),
  inference(cnf_transformation,[],[f7757_D])).
fof(f7757_D,plain,(
  ( ! [X88,X87,X86] : (s('type.list.list'(X86),X87) = s('type.list.list'(X86),sK20('const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87)),X88,'type.list.list'(X86)))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f7628,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl75),
  inference(cnf_transformation,[],[f7628_D])).
fof(f7628_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f7756,plain,(
  ( ! [X88,X87,X86] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X86),X87) = s('type.list.list'(X86),sK20('const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87)),X88,'type.list.list'(X86)))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3067,f7564])).
fof(f3067,plain,(
  ( ! [X88,X87,X86] : (s('type.list.list'(X86),X87) = s('type.list.list'(X86),sK20('const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87)),X88,'type.list.list'(X86))) | ~p(s(bool,happ(s(fun('type.list.list'(X86),bool),X88),s('type.list.list'(X86),X87))))) )),
  inference(forward_demodulation,[],[f3016,f245])).
fof(f3016,plain,(
  ( ! [X88,X87,X86] : (~p(s(bool,happ(s(fun('type.list.list'(X86),bool),X88),s('type.list.list'(X86),X87)))) | s('type.list.list'(X86),'const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87))) = s('type.list.list'(X86),sK20('const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87)),X88,'type.list.list'(X86)))) )),
  inference(superposition,[],[f279,f245])).
fof(f279,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK20(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK20(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK20(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f129])).
fof(f129,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X6] : ! [X22,X24] : (? [X7] : (s(X6,X7) = s(X6,X24) & p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7))))) <=> p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X24)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.bool.UNWIND_THM2')).
fof(f7755,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.ZERO_0')),X29,'type.num.num'))) ) | $spl122),
  inference(cnf_transformation,[],[f7755_D])).
fof(f7755_D,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.ZERO_0')),X29,'type.num.num'))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f7754,plain,(
  ( ! [X28,X29] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.ZERO_0')),X29,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f7753,f7564])).
fof(f7753,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.ZERO_0')),X29,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl16),
  inference(forward_demodulation,[],[f3034,f7539])).
fof(f3034,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2982,f320])).
fof(f320,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f229,f212])).
fof(f229,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|11')).
fof(f2982,plain,(
  ( ! [X28,X29] : (~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29,'type.num.num'))) )),
  inference(superposition,[],[f279,f320])).
fof(f7752,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) ) | $spl120),
  inference(cnf_transformation,[],[f7752_D])).
fof(f7752_D,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f7751,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f7750,f7564])).
fof(f7750,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl16),
  inference(forward_demodulation,[],[f3022,f7539])).
fof(f3022,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2968,f212])).
fof(f2968,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) )),
  inference(superposition,[],[f279,f212])).
fof(f7749,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))),X23,'type.num.num'))) ) | $spl118),
  inference(cnf_transformation,[],[f7749_D])).
fof(f7749_D,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))),X23,'type.num.num'))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f7748,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))),X23,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3031,f7564])).
fof(f3031,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))),X23,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))))))) )),
  inference(forward_demodulation,[],[f2979,f233])).
fof(f233,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X16] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_suc|split|2')).
fof(f2979,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))),X23,'type.num.num'))) )),
  inference(superposition,[],[f279,f233])).
fof(f7747,plain,(
  ( ! [X21] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X21,'type.num.num'))) ) | $spl116),
  inference(cnf_transformation,[],[f7747_D])).
fof(f7747_D,plain,(
  ( ! [X21] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X21,'type.num.num'))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f7746,plain,(
  ( ! [X21] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X21,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3030,f7564])).
fof(f3030,plain,(
  ( ! [X21] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X21,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(forward_demodulation,[],[f2978,f211])).
fof(f2978,plain,(
  ( ! [X21] : (~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X21,'type.num.num'))) )),
  inference(superposition,[],[f279,f211])).
fof(f7725,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)),X10,'type.num.num'))) ) | $spl114),
  inference(cnf_transformation,[],[f7725_D])).
fof(f7725_D,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)),X10,'type.num.num'))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f7724,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)),X10,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f2972,f7564])).
fof(f2972,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun('type.num.num',bool),X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)),X10,'type.num.num'))) )),
  inference(superposition,[],[f279,f296])).
fof(f296,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X20,X16] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.ADD_SYM')).
fof(f7723,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X28,'type.num.num'))) ) | $spl112),
  inference(cnf_transformation,[],[f7723_D])).
fof(f7723_D,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X28,'type.num.num'))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f7722,plain,(
  ( ! [X28] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X28,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f7721,f7564])).
fof(f7721,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X28,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f5957,f7539])).
fof(f5957,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X28,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(forward_demodulation,[],[f5896,f1171])).
fof(f5896,plain,(
  ( ! [X28] : (~p(s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X28,'type.num.num'))) )),
  inference(superposition,[],[f279,f1171])).
fof(f7720,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40))))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X41,'type.num.num'))) ) | $spl110),
  inference(cnf_transformation,[],[f7720_D])).
fof(f7720_D,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40))))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X41,'type.num.num'))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f7719,plain,(
  ( ! [X41,X40] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40))))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X41,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3041,f7564])).
fof(f3041,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40))))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X41,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X41),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40))))))))) )),
  inference(forward_demodulation,[],[f2989,f230])).
fof(f2989,plain,(
  ( ! [X41,X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X41),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X41,'type.num.num'))) )),
  inference(superposition,[],[f279,f230])).
fof(f7718,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,'type.num.num'))) ) | $spl108),
  inference(cnf_transformation,[],[f7718_D])).
fof(f7718_D,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,'type.num.num'))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f7717,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3032,f7564])).
fof(f3032,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))))))) )),
  inference(forward_demodulation,[],[f2980,f231])).
fof(f2980,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,'type.num.num'))) )),
  inference(superposition,[],[f279,f231])).
fof(f7716,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))),X27,'type.num.num'))) ) | $spl106),
  inference(cnf_transformation,[],[f7716_D])).
fof(f7716_D,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))),X27,'type.num.num'))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f7715,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))),X27,'type.num.num'))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3033,f7564])).
fof(f3033,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))),X27,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f2981,f228])).
fof(f2981,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))),X27,'type.num.num'))) )),
  inference(superposition,[],[f279,f228])).
fof(f7627,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl74),
  inference(cnf_transformation,[],[f7627_D])).
fof(f7627_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f7700,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | $spl104),
  inference(cnf_transformation,[],[f7700_D])).
fof(f7700_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f7704,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl16 | $spl44)),
  inference(condensation,[],[f7703])).
fof(f7703,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f281,f7564])).
fof(f7702,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl16 | $spl44)),
  inference(condensation,[],[f7701])).
fof(f7701,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f283,f7564])).
fof(f7699,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f280,f7564])).
fof(f280,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK20(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f192])).
fof(f7698,plain,(
  ( ! [X83,X84] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X83))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X84,bool))) ) | $spl102),
  inference(cnf_transformation,[],[f7698_D])).
fof(f7698_D,plain,(
  ( ! [X83,X84] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X83))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X84,bool))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f7697,plain,(
  ( ! [X83,X84] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X83))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X84,bool))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3065,f7564])).
fof(f3065,plain,(
  ( ! [X83,X84] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X83))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X84,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X84),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X83))))))) )),
  inference(forward_demodulation,[],[f3014,f227])).
fof(f227,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X16] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X16))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|33')).
fof(f3014,plain,(
  ( ! [X83,X84] : (~p(s(bool,happ(s(fun(bool,bool),X84),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X83)))))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83))))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X84,bool))) )),
  inference(superposition,[],[f279,f227])).
fof(f7696,plain,(
  ( ! [X74,X75] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X74))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))),X75,bool))) ) | $spl100),
  inference(cnf_transformation,[],[f7696_D])).
fof(f7696_D,plain,(
  ( ! [X74,X75] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X74))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))),X75,bool))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f7695,plain,(
  ( ! [X74,X75] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X74))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))),X75,bool))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3059,f7564])).
fof(f3059,plain,(
  ( ! [X74,X75] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X74))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))),X75,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X75),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X74))))))) )),
  inference(forward_demodulation,[],[f3008,f226])).
fof(f226,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X16] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X16))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|32')).
fof(f3008,plain,(
  ( ! [X74,X75] : (~p(s(bool,happ(s(fun(bool,bool),X75),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X74)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74))))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))),X75,bool))) )),
  inference(superposition,[],[f279,f226])).
fof(f7671,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl92),
  inference(cnf_transformation,[],[f7671_D])).
fof(f7671_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f7688,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f324,f7564])).
fof(f7669,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl90),
  inference(cnf_transformation,[],[f7669_D])).
fof(f7669_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f7687,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f323,f7564])).
fof(f323,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f257,f212])).
fof(f257,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f170])).
fof(f7681,plain,(
  ( ! [X70,X71,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X70),s('type.num.num',X69))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num',X69),s('type.num.num',X70)),X71,bool))) ) | $spl98),
  inference(cnf_transformation,[],[f7681_D])).
fof(f7681_D,plain,(
  ( ! [X70,X71,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X70),s('type.num.num',X69))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num',X69),s('type.num.num',X70)),X71,bool))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f7680,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X70),s('type.num.num',X69))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num',X69),s('type.num.num',X70)),X71,bool))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3057,f7564])).
fof(f3057,plain,(
  ( ! [X70,X71,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X70),s('type.num.num',X69))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num',X69),s('type.num.num',X70)),X71,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X71),s(bool,'const.prim_rec.<_2'(s('type.num.num',X70),s('type.num.num',X69))))))) )),
  inference(forward_demodulation,[],[f3006,f294])).
fof(f294,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X20,X16] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X20))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X20),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.GREATER_DEF')).
fof(f3006,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,happ(s(fun(bool,bool),X71),s(bool,'const.prim_rec.<_2'(s('type.num.num',X70),s('type.num.num',X69)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num',X69),s('type.num.num',X70))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num',X69),s('type.num.num',X70)),X71,bool))) )),
  inference(superposition,[],[f279,f294])).
fof(f7677,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47)))) ) | $spl96),
  inference(cnf_transformation,[],[f7677_D])).
fof(f7677_D,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47)))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f7676,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f7675,f7539])).
fof(f7675,plain,(
  ( ! [X47,X46] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47)))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f1789,f7564])).
fof(f1789,plain,(
  ( ! [X47,X46] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num',X46)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47)))) )),
  inference(superposition,[],[f244,f296])).
fof(f244,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f164])).
fof(f7674,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45)))) ) | $spl94),
  inference(cnf_transformation,[],[f7674_D])).
fof(f7674_D,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45)))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f7673,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f7672,f7539])).
fof(f7672,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45)))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f1788,f7564])).
fof(f1788,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45)))) )),
  inference(superposition,[],[f243,f296])).
fof(f7670,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f250,f7564])).
fof(f7668,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f251,f7564])).
fof(f251,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f167])).
fof(f7658,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0))))))) ) | $spl88),
  inference(cnf_transformation,[],[f7658_D])).
fof(f7658_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0))))))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f7657,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0))))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f341,f7564])).
fof(f7656,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0))))) ) | $spl86),
  inference(cnf_transformation,[],[f7656_D])).
fof(f7656_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f7655,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f343,f7564])).
fof(f343,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f295,f292])).
fof(f292,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK26(X3,X2,X1,X0))))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26])],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X6,X7] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f137])).
fof(f137,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X16,X20,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X14,X15] : (s('type.num.num',X16) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X14))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X14),s('type.list.list'(X6),X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LENGTH_LE_PLUS')).
fof(f7654,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0))))) ) | $spl84),
  inference(cnf_transformation,[],[f7654_D])).
fof(f7654_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f7653,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f342,f7564])).
fof(f342,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f295,f290])).
fof(f290,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f7652,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0))))))) ) | $spl82),
  inference(cnf_transformation,[],[f7652_D])).
fof(f7652_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0))))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f7651,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0))))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f276,f7564])).
fof(f276,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0)))))))) & (! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17,sK18,sK19])],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | ? [X6,X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X6))))))) & (! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))) & (! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))))) <=> ? [X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_2|split|7')).
fof(f7638,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) ) | $spl80),
  inference(cnf_transformation,[],[f7638_D])).
fof(f7638_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f7637,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f335,f7564])).
fof(f7636,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0))))) ) | $spl78),
  inference(cnf_transformation,[],[f7636_D])).
fof(f7636_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f7635,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f334,f7564])).
fof(f7634,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) ) | $spl76),
  inference(cnf_transformation,[],[f7634_D])).
fof(f7634_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f7633,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f333,f7564])).
fof(f7626,plain,(
  ( ! [X61,X59,X60] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X60),s('type.num.num',X59))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,bool))) ) | $spl72),
  inference(cnf_transformation,[],[f7626_D])).
fof(f7626_D,plain,(
  ( ! [X61,X59,X60] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X60),s('type.num.num',X59))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,bool))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f7625,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X60),s('type.num.num',X59))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,bool))) ) | ($spl16 | $spl44)),
  inference(forward_demodulation,[],[f3051,f7564])).
fof(f3051,plain,(
  ( ! [X61,X59,X60] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X60),s('type.num.num',X59))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X60),s('type.num.num',X59))))))) )),
  inference(forward_demodulation,[],[f3001,f295])).
fof(f3001,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X60),s('type.num.num',X59)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,bool))) )),
  inference(superposition,[],[f279,f295])).
fof(f7538,plain,(
  $false | ($spl8 | $spl16 | $spl71)),
  inference(global_subsumption,[],[f887,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f1226,plain,(
  ( ! [X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f239,f232])).
fof(f1227,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X17)))))))))) )),
  inference(superposition,[],[f240,f232])).
fof(f7518,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f7517,f1236])).
fof(f7517,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(subsumption_resolution,[],[f7516,f208])).
fof(f7516,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1303,f6864])).
fof(f1303,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f243,f1236])).
fof(f1417,plain,(
  ( ! [X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X18)))))))) )),
  inference(superposition,[],[f239,f234])).
fof(f1418,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19)))))))))) )),
  inference(superposition,[],[f240,f234])).
fof(f1447,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f239,f1398])).
fof(f1448,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f240,f1398])).
fof(f2100,plain,(
  ( ! [X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0')))) )),
  inference(superposition,[],[f239,f1965])).
fof(f7507,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f7506,f1236])).
fof(f7506,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(subsumption_resolution,[],[f7505,f208])).
fof(f7505,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f4407,f6864])).
fof(f4407,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f243,f1236])).
fof(f4449,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f239,f1398])).
fof(f4450,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f240,f1398])).
fof(f4855,plain,(
  ( ! [X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f239,f232])).
fof(f4856,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X17)))))))))) )),
  inference(superposition,[],[f240,f232])).
fof(f5076,plain,(
  ( ! [X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X18)))))))) )),
  inference(superposition,[],[f239,f234])).
fof(f5077,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19)))))))))) )),
  inference(superposition,[],[f240,f234])).
fof(f7482,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f333,f468])).
fof(f7480,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK8(X2,X1,X0)),s('type.list.list'(X0),sK9(X2,X1,X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f334,f468])).
fof(f7478,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) ) | $spl8),
  inference(forward_demodulation,[],[f335,f468])).
fof(f7464,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X2,X1,X0)),s('type.list.list'(X0),sK17(X2,X1,X0))))))) ) | $spl8),
  inference(forward_demodulation,[],[f276,f468])).
fof(f7462,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK25(X3,X2,X1,X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f342,f468])).
fof(f7460,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK25(X3,X2,X1,X0)),s('type.list.list'(X0),sK26(X3,X2,X1,X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f343,f468])).
fof(f7458,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK14(X2,X1,X0))))))) ) | $spl8),
  inference(forward_demodulation,[],[f341,f468])).
fof(f7453,plain,(
  ( ! [X17] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17)))))) ) | $spl8),
  inference(forward_demodulation,[],[f4646,f468])).
fof(f7451,plain,(
  ( ! [X16] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16)))))) ) | $spl8),
  inference(forward_demodulation,[],[f4644,f468])).
fof(f7449,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl8),
  inference(forward_demodulation,[],[f244,f468])).
fof(f7447,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl8),
  inference(forward_demodulation,[],[f243,f468])).
fof(f7445,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl8),
  inference(forward_demodulation,[],[f251,f468])).
fof(f7443,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl8),
  inference(forward_demodulation,[],[f250,f468])).
fof(f7441,plain,(
  ( ! [X45,X44] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45)))) ) | $spl8),
  inference(forward_demodulation,[],[f1788,f468])).
fof(f7439,plain,(
  ( ! [X47,X46] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47)))) ) | $spl8),
  inference(forward_demodulation,[],[f1789,f468])).
fof(f7422,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl8),
  inference(forward_demodulation,[],[f323,f468])).
fof(f7420,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl8),
  inference(forward_demodulation,[],[f324,f468])).
fof(f7405,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK20(X2,X1,X0))) ) | $spl8),
  inference(forward_demodulation,[],[f279,f468])).
fof(f7382,plain,(
  ( ! [X4,X5] : (~p(s(bool,'F_0')) | s('type.num.num',X4) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)),X5,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3024,f468])).
fof(f7380,plain,(
  ( ! [X6,X7] : (~p(s(bool,'F_0')) | s('type.num.num',X6) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3025,f468])).
fof(f7378,plain,(
  ( ! [X15,X16] : (~p(s(bool,'F_0')) | s('type.num.num',X15) = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),X16,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3027,f468])).
fof(f7376,plain,(
  ( ! [X42] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X42,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3042,f468])).
fof(f7374,plain,(
  ( ! [X26,X27] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))),X27,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3033,f468])).
fof(f7372,plain,(
  ( ! [X24,X25] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3032,f468])).
fof(f7370,plain,(
  ( ! [X41,X40] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X40))))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X41,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3041,f468])).
fof(f7368,plain,(
  ( ! [X28] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X28,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f5957,f468])).
fof(f7366,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)),X10,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2972,f468])).
fof(f7364,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),X1,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3021,f468])).
fof(f7362,plain,(
  ( ! [X3] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X3,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3023,f468])).
fof(f7360,plain,(
  ( ! [X17,X18] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X17)),X18,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3028,f468])).
fof(f7358,plain,(
  ( ! [X19,X20] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)),X20,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3029,f468])).
fof(f7356,plain,(
  ( ! [X30,X31] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30)))))),X31,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3035,f468])).
fof(f7354,plain,(
  ( ! [X33,X32] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X32)))))),X33,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3036,f468])).
fof(f7352,plain,(
  ( ! [X34] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X34,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3037,f468])).
fof(f7350,plain,(
  ( ! [X35,X36] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')),X36,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3038,f468])).
fof(f7348,plain,(
  ( ! [X37,X38] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37)),X38,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3039,f468])).
fof(f7346,plain,(
  ( ! [X39] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X39,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3040,f468])).
fof(f7344,plain,(
  ( ! [X21] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X21,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3030,f468])).
fof(f7342,plain,(
  ( ! [X23,X22] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK20('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))),X23,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3031,f468])).
fof(f7340,plain,(
  ( ! [X2] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3022,f468])).
fof(f7338,plain,(
  ( ! [X28,X29] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f3034,f468])).
fof(f7336,plain,(
  ( ! [X88,X87,X86] : (~p(s(bool,'F_0')) | s('type.list.list'(X86),X87) = s('type.list.list'(X86),sK20('const.list.APPEND_2'(s('type.list.list'(X86),'const.list.NIL_0'),s('type.list.list'(X86),X87)),X88,'type.list.list'(X86)))) ) | $spl8),
  inference(forward_demodulation,[],[f3067,f468])).
fof(f261,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X2,X1,X0)),s('type.list.list'(X0),sK7(X2,X1,X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f266,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK10(X2,X1,X0)),s('type.list.list'(X0),sK11(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X8,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))) <=> ? [X17,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.LENGTH_EQ_NUM_compute|split|2')).
fof(f267,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK10(X2,X1,X0)),s('type.list.list'(X0),sK11(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f268,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f270,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X2,X1,X0)),s('type.list.list'(X0),sK13(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X2,X1,X0)),s('type.list.list'(X0),sK13(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X8,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))))) <=> ? [X17,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.LENGTH_EQ_NUM_compute|split|1')).
fof(f286,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK23(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f325,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f271,f212])).
fof(f271,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f326,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f269,f212])).
fof(f269,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f1937,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f246,f245])).
fof(f6587,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f6540,f1171])).
fof(f6623,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f6554,f1171])).
fof(f232,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|10')).
fof(f7306,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))) )),
  inference(subsumption_resolution,[],[f880,f6554])).
fof(f2015,plain,(
  ( ! [X24,X23] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23))))) | s('type.num.num',X24) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))) )),
  inference(superposition,[],[f310,f228])).
fof(f2017,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X27)))))))) )),
  inference(superposition,[],[f310,f232])).
fof(f6586,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f6540,f228])).
fof(f302,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X16,X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',X20))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|12')).
fof(f303,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X16,X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num',X20))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|5')).
fof(f304,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X16,X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X20))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|8')).
fof(f305,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X16,X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|2')).
fof(f311,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f203])).
fof(f875,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f219])).
fof(f876,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f216])).
fof(f2005,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(superposition,[],[f310,f218])).
fof(f2006,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f310,f219])).
fof(f2007,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(superposition,[],[f310,f296])).
fof(f2009,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f310,f216])).
fof(f2010,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X14)))) )),
  inference(superposition,[],[f310,f221])).
fof(f2011,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))) )),
  inference(superposition,[],[f310,f225])).
fof(f2016,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X25),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f310,f320])).
fof(f2018,plain,(
  ( ! [X30,X29] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30))) | s('type.num.num',X30) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X29)))))))) )),
  inference(superposition,[],[f310,f234])).
fof(f2019,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f310,f1398])).
fof(f2020,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f310,f215])).
fof(f2021,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X34)))) )),
  inference(superposition,[],[f310,f217])).
fof(f2022,plain,(
  ( ! [X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) | s('type.num.num',X36) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f310,f210])).
fof(f2110,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.list.NIL_0')))) )),
  inference(superposition,[],[f310,f1965])).
fof(f2169,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f311,f296])).
fof(f6557,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f6540,f310])).
fof(f2147,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f296,f311])).
fof(f234,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|9')).
fof(f6585,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f6540,f231])).
fof(f1786,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) )),
  inference(superposition,[],[f239,f296])).
fof(f1787,plain,(
  ( ! [X43,X42] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43)))))) )),
  inference(superposition,[],[f240,f296])).
fof(f6402,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f1057,f296])).
fof(f4464,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f4458,f213])).
fof(f4458,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f503,f3215])).
fof(f6584,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f6540,f233])).
fof(f6540,plain,(
  ( ! [X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(subsumption_resolution,[],[f6538,f213])).
fof(f6538,plain,(
  ( ! [X18] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(backward_demodulation,[],[f6537,f4727])).
fof(f6620,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f6554,f233])).
fof(f6621,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f6554,f231])).
fof(f1398,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f234,f212])).
fof(f285,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X14,X15,X17] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X14),s('type.list.list'(X6),X15))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X14))),s('type.list.list'(X6),X15)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.list.APPEND|split|1')).
fof(f7245,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | ($spl8 | $spl71)),
  inference(subsumption_resolution,[],[f6376,f468])).
fof(f6376,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | $spl71),
  inference(superposition,[],[f6341,f238])).
fof(f6396,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))) | $spl71),
  inference(unit_resulting_resolution,[],[f6341,f1057])).
fof(f7234,plain,(
  ~p(s(bool,'F_0')) | ($spl8 | $spl71)),
  inference(forward_demodulation,[],[f6366,f468])).
fof(f7232,plain,(
  ~p(s(bool,'F_0')) | ($spl8 | $spl71)),
  inference(forward_demodulation,[],[f6368,f468])).
fof(f6368,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) | $spl71),
  inference(unit_resulting_resolution,[],[f208,f6341,f309])).
fof(f7230,plain,(
  ~p(s(bool,'F_0')) | ($spl8 | $spl71)),
  inference(forward_demodulation,[],[f6370,f468])).
fof(f6370,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) | $spl71),
  inference(unit_resulting_resolution,[],[f208,f6341,f309])).
fof(f6879,plain,(
  ( ! [X28,X26,X27] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num',X26))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f6863,f348])).
fof(f6863,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num',X26)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool))) )),
  inference(superposition,[],[f279,f348])).
fof(f6846,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f348,f212])).
fof(f6819,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f348,f212])).
fof(f6792,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f6786,f6537])).
fof(f6786,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool))) )),
  inference(superposition,[],[f279,f6537])).
fof(f6791,plain,(
  ( ! [X8,X9] : (s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f6781,f213])).
fof(f6781,plain,(
  ( ! [X8,X9] : (p(s(bool,'F_0')) | s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f503,f6537])).
fof(f6718,plain,(
  ( ! [X28,X26,X27] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X26))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f6717,f298])).
fof(f6717,plain,(
  ( ! [X28,X26,X27] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f6696,f294])).
fof(f6696,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X26)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool))) )),
  inference(superposition,[],[f279,f299])).
fof(f6698,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f6679,f3149])).
fof(f6679,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f299,f212])).
fof(f6652,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f299,f212])).
fof(f6622,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f6554,f228])).
fof(f6554,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f6540,f240])).
fof(f6553,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25))))))) )),
  inference(forward_demodulation,[],[f6535,f298])).
fof(f6535,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool))) )),
  inference(superposition,[],[f279,f298])).
fof(f6520,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f298,f212])).
fof(f6537,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f6519,f222])).
fof(f6519,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f298,f920])).
fof(f6536,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f6493,f3149])).
fof(f6493,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f298,f212])).
fof(f6044,plain,(
  ( ! [X7] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))) )),
  inference(superposition,[],[f297,f1171])).
fof(f5992,plain,(
  ( ! [X86] : (s(bool,'F_0') = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X86,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X86),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5931,f478])).
fof(f5931,plain,(
  ( ! [X86] : (~p(s(bool,happ(s(fun(bool,bool),X86),s(bool,'F_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X86,bool))) )),
  inference(superposition,[],[f279,f478])).
fof(f5991,plain,(
  ( ! [X85,X84] : (s(bool,'F_0') = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X85,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,X84)))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(forward_demodulation,[],[f5930,f478])).
fof(f5930,plain,(
  ( ! [X85,X84] : (~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,X84)))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X85,bool)) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f279,f4158])).
fof(f5989,plain,(
  ( ! [X81] : (s(bool,'F_0') = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X81,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X81),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5928,f3640])).
fof(f5928,plain,(
  ( ! [X81] : (~p(s(bool,happ(s(fun(bool,bool),X81),s(bool,'F_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X81,bool))) )),
  inference(superposition,[],[f279,f3640])).
fof(f5988,plain,(
  ( ! [X80,X79] : (s(bool,'F_0') = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X80,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,X79)))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(forward_demodulation,[],[f5927,f3640])).
fof(f5927,plain,(
  ( ! [X80,X79] : (~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,X79)))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK20('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X80,bool)) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f279,f4168])).
fof(f5972,plain,(
  ( ! [X56] : (s(bool,'F_0') = s(bool,sK20('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X56,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5913,f3215])).
fof(f5913,plain,(
  ( ! [X56] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'F_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,sK20('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X56,bool))) )),
  inference(superposition,[],[f279,f3215])).
fof(f4727,plain,(
  ( ! [X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f4726,f231])).
fof(f4726,plain,(
  ( ! [X18] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) )),
  inference(forward_demodulation,[],[f4725,f3134])).
fof(f4725,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) )),
  inference(forward_demodulation,[],[f4714,f3199])).
fof(f4714,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) )),
  inference(superposition,[],[f244,f231])).
fof(f4724,plain,(
  ( ! [X17] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f4723,f231])).
fof(f4723,plain,(
  ( ! [X17] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) )),
  inference(forward_demodulation,[],[f4722,f3134])).
fof(f4722,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) )),
  inference(forward_demodulation,[],[f4713,f3199])).
fof(f4713,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) )),
  inference(superposition,[],[f243,f231])).
fof(f4646,plain,(
  ( ! [X17] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))))))) )),
  inference(forward_demodulation,[],[f4645,f230])).
fof(f4645,plain,(
  ( ! [X17] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) )),
  inference(forward_demodulation,[],[f4635,f3199])).
fof(f4635,plain,(
  ( ! [X17] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) )),
  inference(superposition,[],[f244,f230])).
fof(f4644,plain,(
  ( ! [X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f4643,f230])).
fof(f4643,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) )),
  inference(forward_demodulation,[],[f4634,f3199])).
fof(f4634,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) )),
  inference(superposition,[],[f243,f230])).
fof(f4168,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f4163,f213])).
fof(f4163,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f503,f3640])).
fof(f4158,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f4153,f213])).
fof(f4153,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f503,f478])).
fof(f3040,plain,(
  ( ! [X39] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X39,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2988,f210])).
fof(f2988,plain,(
  ( ! [X39] : (~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X39,'type.num.num'))) )),
  inference(superposition,[],[f279,f210])).
fof(f3039,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37)),X38,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X38),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2987,f217])).
fof(f2987,plain,(
  ( ! [X37,X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X38),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37))) = s('type.num.num',sK20('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37)),X38,'type.num.num'))) )),
  inference(superposition,[],[f279,f217])).
fof(f3038,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')),X36,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X36),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2986,f215])).
fof(f2986,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X36),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')),X36,'type.num.num'))) )),
  inference(superposition,[],[f279,f215])).
fof(f3037,plain,(
  ( ! [X34] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X34,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2985,f1398])).
fof(f2985,plain,(
  ( ! [X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X34,'type.num.num'))) )),
  inference(superposition,[],[f279,f1398])).
fof(f3036,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X32)))))),X33,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2984,f234])).
fof(f2984,plain,(
  ( ! [X33,X32] : (~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X32))))))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X32)))))),X33,'type.num.num'))) )),
  inference(superposition,[],[f279,f234])).
fof(f3035,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30)))))),X31,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2983,f232])).
fof(f2983,plain,(
  ( ! [X30,X31] : (~p(s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30))))))) = s('type.num.num',sK20('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30)))))),X31,'type.num.num'))) )),
  inference(superposition,[],[f279,f232])).
fof(f3029,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)),X20,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2977,f225])).
fof(f2977,plain,(
  ( ! [X19,X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)),X20,'type.num.num'))) )),
  inference(superposition,[],[f279,f225])).
fof(f3028,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X17)),X18,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X18),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2976,f221])).
fof(f2976,plain,(
  ( ! [X17,X18] : (~p(s(bool,happ(s(fun('type.num.num',bool),X18),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X17))) = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X17)),X18,'type.num.num'))) )),
  inference(superposition,[],[f279,f221])).
fof(f3023,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X3,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2969,f920])).
fof(f2969,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X3,'type.num.num'))) )),
  inference(superposition,[],[f279,f920])).
fof(f3021,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),X1,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2967,f1965])).
fof(f2967,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),X1,'type.num.num'))) )),
  inference(superposition,[],[f279,f1965])).
fof(f3042,plain,(
  ( ! [X42] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X42,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X42),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f2990,f1236])).
fof(f2990,plain,(
  ( ! [X42] : (~p(s(bool,happ(s(fun('type.num.num',bool),X42),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK20('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X42,'type.num.num'))) )),
  inference(superposition,[],[f279,f1236])).
fof(f3024,plain,(
  ( ! [X4,X5] : (s('type.num.num',X4) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)),X5,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f2970,f218])).
fof(f2970,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',X4)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)),X5,'type.num.num'))) )),
  inference(superposition,[],[f279,f218])).
fof(f3025,plain,(
  ( ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f2971,f219])).
fof(f2971,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7,'type.num.num'))) )),
  inference(superposition,[],[f279,f219])).
fof(f3027,plain,(
  ( ! [X15,X16] : (s('type.num.num',X15) = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),X16,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f2975,f216])).
fof(f2975,plain,(
  ( ! [X15,X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',X15)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK20('const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),X16,'type.num.num'))) )),
  inference(superposition,[],[f279,f216])).
fof(f3243,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,sK20('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X4,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3240,f3216])).
fof(f3240,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK20('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X4,bool))) )),
  inference(superposition,[],[f279,f3216])).
fof(f3066,plain,(
  ( ! [X85] : (s(bool,'T_0') = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X85,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3015,f952])).
fof(f3015,plain,(
  ( ! [X85] : (~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X85,bool))) )),
  inference(superposition,[],[f279,f952])).
fof(f3064,plain,(
  ( ! [X82] : (s(bool,'T_0') = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X82,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X82),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3013,f466])).
fof(f3013,plain,(
  ( ! [X82] : (~p(s(bool,happ(s(fun(bool,bool),X82),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X82,bool))) )),
  inference(superposition,[],[f279,f466])).
fof(f3050,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57)),X58,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3000,f220])).
fof(f3000,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57)),X58,bool))) )),
  inference(superposition,[],[f279,f220])).
fof(f3045,plain,(
  ( ! [X52,X51] : (s(bool,'T_0') = s(bool,sK20('const.arithmetic.>=_2'(s('type.num.num',X51),s('type.num.num','const.num.|48|_0')),X52,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2995,f224])).
fof(f2995,plain,(
  ( ! [X52,X51] : (~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X51),s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.>=_2'(s('type.num.num',X51),s('type.num.num','const.num.|48|_0')),X52,bool))) )),
  inference(superposition,[],[f279,f224])).
fof(f278,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f192])).
fof(f810,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f227,f212])).
fof(f787,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f226,f212])).
fof(f2372,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f235,f212])).
fof(f2461,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f237,f212])).
fof(f3058,plain,(
  ( ! [X72,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X72))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.num.|48|_0')),X73,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X72))))))) )),
  inference(forward_demodulation,[],[f3007,f237])).
fof(f3007,plain,(
  ( ! [X72,X73] : (~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X72)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.num.|48|_0')),X73,bool))) )),
  inference(superposition,[],[f279,f237])).
fof(f3053,plain,(
  ( ! [X64,X65] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X64))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X64)))),X65,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X64))))))) )),
  inference(forward_demodulation,[],[f3003,f235])).
fof(f3003,plain,(
  ( ! [X64,X65] : (~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X64)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X64))))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X64)))),X65,bool))) )),
  inference(superposition,[],[f279,f235])).
fof(f237,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X16] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X16))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|24')).
fof(f235,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X16] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X16))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|21')).
fof(f3160,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.num.num',X25)),X26,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25))))))) )),
  inference(forward_demodulation,[],[f3148,f297])).
fof(f3148,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.num.num',X25))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.num.num',X25)),X26,bool))) )),
  inference(superposition,[],[f279,f297])).
fof(f299,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X16,X20] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X16))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|25')).
fof(f298,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X16,X20] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X20))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|22')).
fof(f297,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X20,X16] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X16))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.LESS_EQ')).
fof(f3107,plain,(
  ( ! [X2,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f297,f233])).
fof(f3106,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f297,f211])).
fof(f3108,plain,(
  ( ! [X4,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num',X4))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f297,f231])).
fof(f3227,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X14))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.num.|48|_0')),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X14))))))) )),
  inference(forward_demodulation,[],[f3213,f329])).
fof(f3213,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X14)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.num.|48|_0')),X15,bool))) )),
  inference(superposition,[],[f279,f329])).
fof(f3199,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f329,f295])).
fof(f329,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f295,f236])).
fof(f347,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK26(X3,X2,X1,X0)))),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f338,f295])).
fof(f338,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK26(X3,X2,X1,X0)))),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(backward_demodulation,[],[f295,f291])).
fof(f337,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) )),
  inference(backward_demodulation,[],[f295,f275])).
fof(f344,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f330,f295])).
fof(f330,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(backward_demodulation,[],[f295,f293])).
fof(f331,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))) )),
  inference(backward_demodulation,[],[f295,f277])).
fof(f3134,plain,(
  ( ! [X2,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f297,f295])).
fof(f3149,plain,(
  ( ! [X6,X5] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f3109,f295])).
fof(f3109,plain,(
  ( ! [X6,X5] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))),s('type.num.num',X6))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f297,f228])).
fof(f349,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f301,f295])).
fof(f301,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X16,X20] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X16))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|31')).
fof(f3640,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f934,f478])).
fof(f934,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f226,f920])).
fof(f3215,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f3214,f222])).
fof(f3214,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f3197,f297])).
fof(f3197,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f329,f212])).
fof(f3204,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f238,f329])).
fof(f3139,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f238,f297])).
fof(f3056,plain,(
  ( ! [X68,X67] : (s(bool,'F_0') = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67)),X68,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f3055,f222])).
fof(f3055,plain,(
  ( ! [X68,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67)),X68,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f3005,f294])).
fof(f3005,plain,(
  ( ! [X68,X67] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67))) = s(bool,sK20('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67)),X68,bool))) )),
  inference(superposition,[],[f279,f223])).
fof(f3054,plain,(
  ( ! [X66] : (s(bool,'F_0') = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X66,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f3004,f2388])).
fof(f3004,plain,(
  ( ! [X66] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X66,bool))) )),
  inference(superposition,[],[f279,f2388])).
fof(f3052,plain,(
  ( ! [X62,X63] : (s(bool,'F_0') = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num','const.num.|48|_0')),X63,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X63),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f3002,f222])).
fof(f3002,plain,(
  ( ! [X62,X63] : (~p(s(bool,happ(s(fun(bool,bool),X63),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num','const.num.|48|_0'))) = s(bool,sK20('const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num','const.num.|48|_0')),X63,bool))) )),
  inference(superposition,[],[f279,f222])).
fof(f2994,plain,(
  ( ! [X50,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,X49)))) | s(bool,'F_0') = s(bool,sK20('F_0',X50,bool)) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f279,f238])).
fof(f2993,plain,(
  ( ! [X47,X48] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'F_0')))) | s(bool,X47) = s(bool,sK20(X47,X48,bool)) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f279,f238])).
fof(f2469,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f238,f237])).
fof(f2388,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2373,f222])).
fof(f2373,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f235,f920])).
fof(f2378,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f238,f235])).
fof(f1606,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f295,f238])).
fof(f1509,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f294,f238])).
fof(f811,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f227,f238])).
fof(f788,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f226,f238])).
fof(f508,plain,(
  ( ! [X9] : (p(s(bool,X9)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f507,f222])).
fof(f507,plain,(
  ( ! [X8,X9] : (p(s(bool,X9)) | s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f491,f213])).
fof(f491,plain,(
  ( ! [X8,X9] : (p(s(bool,'F_0')) | p(s(bool,X9)) | s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f306,f222])).
fof(f223,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X16] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|23')).
fof(f222,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X16] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|20')).
fof(f478,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f213,f214,f306])).
fof(f880,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f239,f228])).
fof(f214,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f25])).
fof(f25,axiom,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|34')).
fof(f3216,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f3198,f220])).
fof(f3198,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f329,f920])).
fof(f2437,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f2429,f213])).
fof(f2429,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f503,f2388])).
fof(f2068,plain,(
  ( ! [X39] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))) | s('type.num.num',X39) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2024,f920])).
fof(f2024,plain,(
  ( ! [X39] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))) | s('type.num.num',X39) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f310,f1236])).
fof(f1559,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f1546,f213])).
fof(f1546,plain,(
  ( ! [X15,X16] : (p(s(bool,'F_0')) | s(bool,X16) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f503,f223])).
fof(f1558,plain,(
  ( ! [X14,X13] : (s(bool,X14) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f1545,f213])).
fof(f1545,plain,(
  ( ! [X14,X13] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f503,f222])).
fof(f1236,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f1110,f239])).
fof(f1110,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1090,f210])).
fof(f1090,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f230,f920])).
fof(f1057,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f1018,f213])).
fof(f1018,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f244,f238])).
fof(f952,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f933,f466])).
fof(f933,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f227,f920])).
fof(f466,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f461,f213])).
fof(f461,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f209,f238])).
fof(f312,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK27(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK27(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK27(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK27(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27])],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f153])).
fof(f153,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9',aHL_EXT)).
fof(f309,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f157])).
fof(f291,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK26(X3,X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f293,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f202])).
fof(f275,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f189])).
fof(f277,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f189])).
fof(f322,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f254,f212])).
fof(f254,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|1')).
fof(f321,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f255,f212])).
fof(f255,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f169])).
fof(f252,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|3')).
fof(f253,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f168])).
fof(f236,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X16] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|27')).
fof(f225,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|6')).
fof(f224,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X16] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|29')).
fof(f217,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.arithmetic.MULT|split|0')).
fof(f216,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X16] : s('type.num.num',X16) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|7')).
fof(f215,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|4')).
fof(f210,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f63])).
fof(f63,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.prim_rec.PRE|split|0')).
fof(f209,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f40])).
fof(f40,axiom,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.numeral.numeral_distrib|split|35')).
fof(f7537,plain,(
  $false | ($spl8 | $spl18 | $spl71)),
  inference(global_subsumption,[],[f888,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f888,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(cnf_transformation,[],[f888_D])).
fof(f888_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7536,plain,(
  $false | ($spl8 | $spl20 | $spl71)),
  inference(global_subsumption,[],[f890,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f7535,plain,(
  $false | ($spl8 | $spl26 | $spl71)),
  inference(global_subsumption,[],[f895,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f7534,plain,(
  $false | ($spl8 | $spl28 | $spl71)),
  inference(global_subsumption,[],[f896,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f7533,plain,(
  $false | ($spl8 | $spl30 | $spl71)),
  inference(global_subsumption,[],[f898,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f7525,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227,f1226])).
fof(f7524,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518,f1227])).
fof(f7519,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417,f7518])).
fof(f7514,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418,f1417])).
fof(f7513,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447,f1418])).
fof(f7512,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448,f1447])).
fof(f7511,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100,f1448])).
fof(f7510,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507,f2100])).
fof(f7508,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449,f7507])).
fof(f7504,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450,f4449])).
fof(f7503,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855,f4450])).
fof(f7501,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856,f4855])).
fof(f7500,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076,f4856])).
fof(f7499,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077,f5076])).
fof(f7498,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213,f5077])).
fof(f7496,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482,f213])).
fof(f7483,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480,f7482])).
fof(f7481,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478,f7480])).
fof(f7479,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464,f7478])).
fof(f7465,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462,f7464])).
fof(f7463,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460,f7462])).
fof(f7461,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458,f7460])).
fof(f7459,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453,f7458])).
fof(f7454,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451,f7453])).
fof(f7452,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449,f7451])).
fof(f7450,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447,f7449])).
fof(f7448,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445,f7447])).
fof(f7446,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443,f7445])).
fof(f7444,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441,f7443])).
fof(f7442,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439,f7441])).
fof(f7440,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422,f7439])).
fof(f7423,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420,f7422])).
fof(f7421,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405,f7420])).
fof(f7415,plain,(
  $false | ($spl8 | $spl48 | $spl71)),
  inference(global_subsumption,[],[f7414,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405])).
fof(f7414,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl48),
  inference(forward_demodulation,[],[f2372,f2560])).
fof(f7406,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382,f7405])).
fof(f7383,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380,f7382])).
fof(f7381,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378,f7380])).
fof(f7379,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376,f7378])).
fof(f7377,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374,f7376])).
fof(f7375,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372,f7374])).
fof(f7373,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370,f7372])).
fof(f7371,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368,f7370])).
fof(f7369,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366,f7368])).
fof(f7367,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364,f7366])).
fof(f7365,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362,f7364])).
fof(f7363,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360,f7362])).
fof(f7361,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358,f7360])).
fof(f7359,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356,f7358])).
fof(f7357,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354,f7356])).
fof(f7355,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352,f7354])).
fof(f7353,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350,f7352])).
fof(f7351,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348,f7350])).
fof(f7349,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346,f7348])).
fof(f7347,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344,f7346])).
fof(f7345,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342,f7344])).
fof(f7343,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340,f7342])).
fof(f7341,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338,f7340])).
fof(f7339,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336,f7338])).
fof(f7337,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089,f7336])).
fof(f7335,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230,f1089])).
fof(f7334,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f230])).
fof(f7333,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260])).
fof(f7332,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261])).
fof(f7331,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262])).
fof(f7330,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266])).
fof(f7329,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267])).
fof(f7328,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270,f268])).
fof(f7327,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286,f270])).
fof(f7326,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287,f286])).
fof(f7325,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288,f287])).
fof(f7324,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289,f288])).
fof(f7323,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325,f289])).
fof(f7322,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326,f325])).
fof(f7321,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937,f326])).
fof(f7320,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341,f1937])).
fof(f7319,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171,f6341])).
fof(f7318,plain,(
  $false | ($spl6 | $spl8 | $spl71)),
  inference(global_subsumption,[],[f464,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171])).
fof(f7317,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587,f1171])).
fof(f7316,plain,(
  $false | ($spl8 | $spl67 | $spl71)),
  inference(global_subsumption,[],[f5855,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587])).
fof(f7315,plain,(
  $false | ($spl8 | $spl67 | $spl71)),
  inference(global_subsumption,[],[f6007,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587])).
fof(f6007,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl67),
  inference(unit_resulting_resolution,[],[f5855,f310])).
fof(f7314,plain,(
  $false | ($spl8 | $spl65 | $spl71)),
  inference(global_subsumption,[],[f6119,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587])).
fof(f6119,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl65),
  inference(subsumption_resolution,[],[f6110,f213])).
fof(f6110,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl65),
  inference(superposition,[],[f503,f5871])).
fof(f5871,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl65),
  inference(unit_resulting_resolution,[],[f213,f5854,f306])).
fof(f7313,plain,(
  $false | ($spl8 | $spl67 | $spl71)),
  inference(global_subsumption,[],[f6220,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587])).
fof(f6220,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl67),
  inference(unit_resulting_resolution,[],[f6007,f310])).
fof(f7312,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623,f6587])).
fof(f7311,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228,f6623])).
fof(f7310,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232,f228])).
fof(f7309,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233,f232])).
fof(f7308,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306,f233])).
fof(f7307,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015,f7306])).
fof(f7305,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017,f2015])).
fof(f7304,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586,f2017])).
fof(f7303,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f6586])).
fof(f7302,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231])).
fof(f7301,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302])).
fof(f7300,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303])).
fof(f7299,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304])).
fof(f7298,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305])).
fof(f7297,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310])).
fof(f7296,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311])).
fof(f7295,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874])).
fof(f7294,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875])).
fof(f7293,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876])).
fof(f7292,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005])).
fof(f7291,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006])).
fof(f7290,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007])).
fof(f7289,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009])).
fof(f7288,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010])).
fof(f7287,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011])).
fof(f7286,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016])).
fof(f7285,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018])).
fof(f7284,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020,f2019])).
fof(f7283,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021,f2020])).
fof(f7282,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022,f2021])).
fof(f7281,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025,f2022])).
fof(f7280,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110,f2025])).
fof(f7279,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169,f2110])).
fof(f7278,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557,f2169])).
fof(f7277,plain,(
  $false | ($spl8 | $spl25 | $spl71)),
  inference(global_subsumption,[],[f6185,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557])).
fof(f6185,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | $spl25),
  inference(unit_resulting_resolution,[],[f1996,f310])).
fof(f1996,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl25),
  inference(unit_resulting_resolution,[],[f894,f310])).
fof(f7276,plain,(
  $false | ($spl8 | $spl35 | $spl71)),
  inference(global_subsumption,[],[f5393,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557])).
fof(f5393,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl35),
  inference(unit_resulting_resolution,[],[f2055,f310])).
fof(f2055,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl35),
  inference(forward_demodulation,[],[f1999,f320])).
fof(f1999,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) ) | $spl35),
  inference(unit_resulting_resolution,[],[f1050,f310])).
fof(f1050,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl35),
  inference(subsumption_resolution,[],[f1013,f955])).
fof(f955,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl35),
  inference(unit_resulting_resolution,[],[f902,f243])).
fof(f1013,plain,(
  ( ! [X6] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f244,f320])).
fof(f7275,plain,(
  $false | ($spl8 | $spl25 | $spl71)),
  inference(global_subsumption,[],[f1996,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557])).
fof(f7274,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147,f6557])).
fof(f7273,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212,f2147])).
fof(f7272,plain,(
  $false | ($spl8 | $spl35 | $spl71)),
  inference(global_subsumption,[],[f2055,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212])).
fof(f7271,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234,f212])).
fof(f7270,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f212,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585,f234])).
fof(f7269,plain,(
  $false | ($spl8 | $spl25 | $spl71)),
  inference(global_subsumption,[],[f6203,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585])).
fof(f6203,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl25),
  inference(subsumption_resolution,[],[f6194,f213])).
fof(f6194,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl25),
  inference(superposition,[],[f503,f1374])).
fof(f1374,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl25),
  inference(unit_resulting_resolution,[],[f213,f1067,f306])).
fof(f1067,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl25),
  inference(unit_resulting_resolution,[],[f894,f243])).
fof(f7268,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296,f6585])).
fof(f7267,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786,f296])).
fof(f7266,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787,f1786])).
fof(f7265,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402,f1787])).
fof(f7264,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211,f6402])).
fof(f7263,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464,f211])).
fof(f7262,plain,(
  $false | ($spl8 | $spl35 | $spl71)),
  inference(global_subsumption,[],[f1038,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464])).
fof(f1038,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl35),
  inference(subsumption_resolution,[],[f1004,f955])).
fof(f1004,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f244,f212])).
fof(f7261,plain,(
  $false | ($spl8 | $spl52 | $spl71)),
  inference(global_subsumption,[],[f3595,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464])).
fof(f7260,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584,f4464])).
fof(f7259,plain,(
  $false | ($spl8 | $spl56 | $spl71)),
  inference(global_subsumption,[],[f5369,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584])).
fof(f5369,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl56),
  inference(backward_demodulation,[],[f5357,f787])).
fof(f7258,plain,(
  $false | ($spl8 | $spl60 | $spl71)),
  inference(global_subsumption,[],[f5674,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584])).
fof(f5674,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl60),
  inference(backward_demodulation,[],[f5662,f810])).
fof(f7257,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540,f6584])).
fof(f7256,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620,f6540])).
fof(f7255,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621,f6620])).
fof(f7254,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320,f6621])).
fof(f7253,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398,f320])).
fof(f7252,plain,(
  $false | ($spl8 | $spl25 | $spl71)),
  inference(global_subsumption,[],[f894,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398])).
fof(f7251,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285,f1398])).
fof(f7250,plain,(
  $false | ($spl8 | $spl35 | $spl71)),
  inference(global_subsumption,[],[f1557,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285])).
fof(f1557,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X10)) ) | $spl35),
  inference(subsumption_resolution,[],[f1543,f213])).
fof(f1543,plain,(
  ( ! [X10] : (p(s(bool,'F_0')) | s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X10)) ) | $spl35),
  inference(superposition,[],[f503,f1189])).
fof(f1189,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl35),
  inference(unit_resulting_resolution,[],[f213,f955,f306])).
fof(f7249,plain,(
  $false | ($spl8 | $spl56 | $spl71)),
  inference(global_subsumption,[],[f5357,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285])).
fof(f7248,plain,(
  $false | ($spl8 | $spl60 | $spl71)),
  inference(global_subsumption,[],[f5662,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285])).
fof(f7247,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245,f285])).
fof(f7246,plain,(
  $false | ($spl8 | $spl71)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6341,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7230,f7232,f7234,f6396,f7245])).
fof(f7244,plain,(
  $false | ($spl8 | $spl39)),
  inference(subsumption_resolution,[],[f7243,f4955])).
fof(f4955,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl39),
  inference(subsumption_resolution,[],[f4920,f1700])).
fof(f4920,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl39),
  inference(superposition,[],[f1700,f4168])).
fof(f7243,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl8 | $spl39)),
  inference(subsumption_resolution,[],[f4978,f468])).
fof(f4978,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl39),
  inference(superposition,[],[f4955,f238])).
fof(f7242,plain,(
  $false | ($spl8 | $spl39)),
  inference(subsumption_resolution,[],[f4976,f468])).
fof(f4976,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl39),
  inference(superposition,[],[f4955,f3640])).
fof(f7241,plain,(
  $false | ($spl8 | $spl39)),
  inference(subsumption_resolution,[],[f4148,f468])).
fof(f4148,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl39),
  inference(superposition,[],[f1700,f478])).
fof(f7240,plain,(
  $false | ($spl8 | $spl39)),
  inference(subsumption_resolution,[],[f7239,f1700])).
fof(f7239,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | ($spl8 | $spl39)),
  inference(subsumption_resolution,[],[f4066,f468])).
fof(f4066,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl39),
  inference(superposition,[],[f1700,f238])).
fof(f7238,plain,(
  $false | ($spl0 | $spl8 | $spl71)),
  inference(global_subsumption,[],[f6396,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f7225,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl8)),
  inference(forward_demodulation,[],[f313,f468])).
fof(f7235,plain,(
  $false | ($spl0 | $spl8 | $spl71)),
  inference(global_subsumption,[],[f7234,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f7233,plain,(
  $false | ($spl0 | $spl8 | $spl71)),
  inference(global_subsumption,[],[f7232,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f7231,plain,(
  $false | ($spl0 | $spl8 | $spl71)),
  inference(global_subsumption,[],[f7230,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f7229,plain,(
  $false | ($spl0 | $spl5 | $spl8)),
  inference(global_subsumption,[],[f316,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f316,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl5),
  inference(cnf_transformation,[],[f316_D])).
fof(f316_D,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f7228,plain,(
  $false | ($spl0 | $spl2 | $spl8)),
  inference(global_subsumption,[],[f7227,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f7227,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'F_0')) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))) ) | ($spl2 | $spl8)),
  inference(forward_demodulation,[],[f2609,f468])).
fof(f7226,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1558,f1559,f1965,f2068,f2437,f3216,f214,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260,f478,f213,f222,f223,f508,f788,f811,f1509,f1606,f2378,f2388,f2469,f2993,f2994,f3052,f3054,f3056,f3139,f3204,f3215,f3640,f3051,f349,f348,f295,f3149,f3134,f331,f344,f345,f335,f334,f333,f346,f337,f347,f341,f343,f342,f276,f329,f3199,f3227,f243,f244,f250,f251,f1789,f1788,f3108,f3106,f3107,f297,f294,f298,f299,f3057,f3160,f324,f323,f235,f237,f3053,f3058,f2461,f2372,f3059,f226,f787,f3065,f227,f810,f281,f283,f278,f279,f280,f3045,f3050,f3064,f3066,f3243,f3027,f3025,f3024,f3042,f3033,f3032,f3041,f2972,f3021,f3023,f3028,f3029,f3035,f3036,f3037,f3038,f3039,f3040,f3030,f3031,f3034,f3022,f3067,f4158,f4168,f4464,f4644,f4646,f4724,f4727,f5355,f5360,f5345,f5346,f5367,f5368,f5660,f5665,f5650,f5651,f5672,f5673,f5852,f5858,f5957,f5972,f5988,f5989,f5991,f5992,f6044,f6402,f6536,f6537,f6540,f6520,f6553,f6557,f6554,f6584,f6585,f6586,f6587,f6620,f6621,f6622,f6623,f6652,f6698,f6718,f6791,f6792,f6864,f6819,f6846,f6879,f468,f7225])).
fof(f7222,plain,(
  $false | ($spl2 | $spl19)),
  inference(subsumption_resolution,[],[f7221,f7169])).
fof(f7169,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl19),
  inference(subsumption_resolution,[],[f6951,f208])).
fof(f6951,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl19),
  inference(backward_demodulation,[],[f6919,f250])).
fof(f6919,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl19),
  inference(subsumption_resolution,[],[f6884,f454])).
fof(f6884,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9) | p(s(bool,X9))) ) | $spl19),
  inference(backward_demodulation,[],[f6865,f508])).
fof(f6865,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl19),
  inference(backward_demodulation,[],[f6864,f1062])).
fof(f1062,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl19),
  inference(unit_resulting_resolution,[],[f213,f956,f306])).
fof(f956,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl19),
  inference(unit_resulting_resolution,[],[f906,f243])).
fof(f906,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | $spl19),
  inference(unit_resulting_resolution,[],[f889,f240])).
fof(f7221,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | ($spl2 | $spl19)),
  inference(forward_demodulation,[],[f7220,f7169])).
fof(f7220,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))) ) | ($spl2 | $spl19)),
  inference(subsumption_resolution,[],[f7219,f208])).
fof(f7219,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))) ) | ($spl2 | $spl19)),
  inference(forward_demodulation,[],[f2609,f6919])).
fof(f7218,plain,(
  $false | ($spl5 | $spl19)),
  inference(subsumption_resolution,[],[f7217,f7169])).
fof(f7217,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | ($spl5 | $spl19)),
  inference(forward_demodulation,[],[f316,f7169])).
fof(f7216,plain,(
  $false | ($spl19 | $spl71)),
  inference(subsumption_resolution,[],[f7215,f208])).
fof(f7215,plain,(
  ~p(s(bool,'T_0')) | ($spl19 | $spl71)),
  inference(forward_demodulation,[],[f6370,f6919])).
fof(f7214,plain,(
  $false | ($spl19 | $spl71)),
  inference(subsumption_resolution,[],[f7213,f208])).
fof(f7213,plain,(
  ~p(s(bool,'T_0')) | ($spl19 | $spl71)),
  inference(forward_demodulation,[],[f6368,f6919])).
fof(f7211,plain,(
  $false | ($spl19 | $spl71)),
  inference(subsumption_resolution,[],[f7210,f208])).
fof(f7210,plain,(
  ~p(s(bool,'T_0')) | ($spl19 | $spl71)),
  inference(forward_demodulation,[],[f6366,f6919])).
fof(f7206,plain,(
  $false | ($spl19 | $spl71)),
  inference(subsumption_resolution,[],[f6396,f7039])).
fof(f7039,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl19),
  inference(subsumption_resolution,[],[f6949,f208])).
fof(f6949,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl19),
  inference(backward_demodulation,[],[f6919,f243])).
fof(f7205,plain,(
  $false | ($spl19 | $spl39)),
  inference(subsumption_resolution,[],[f4148,f6865])).
fof(f7204,plain,(
  $false | ($spl19 | $spl39)),
  inference(subsumption_resolution,[],[f4976,f6865])).
fof(f7168,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f7121,f7163])).
fof(f7163,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl19),
  inference(subsumption_resolution,[],[f7075,f7039])).
fof(f7075,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl19),
  inference(backward_demodulation,[],[f7039,f310])).
fof(f7121,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f7039,f6620])).
fof(f7167,plain,(
  $false | ($spl19 | $spl35)),
  inference(subsumption_resolution,[],[f7104,f7039])).
fof(f7104,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl19 | $spl35)),
  inference(backward_demodulation,[],[f7039,f2055])).
fof(f7166,plain,(
  $false | ($spl19 | $spl35)),
  inference(subsumption_resolution,[],[f7099,f7039])).
fof(f7099,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl19 | $spl35)),
  inference(backward_demodulation,[],[f7039,f5393])).
fof(f7165,plain,(
  $false | ($spl19 | $spl25)),
  inference(subsumption_resolution,[],[f7097,f7039])).
fof(f7097,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl19 | $spl25)),
  inference(backward_demodulation,[],[f7039,f6185])).
fof(f7164,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f7096,f7039])).
fof(f7096,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(backward_demodulation,[],[f7039,f5392])).
fof(f5392,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl19),
  inference(unit_resulting_resolution,[],[f1995,f310])).
fof(f1995,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(unit_resulting_resolution,[],[f889,f310])).
fof(f7153,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f7061,f7039])).
fof(f7061,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(backward_demodulation,[],[f7039,f6587])).
fof(f7152,plain,(
  $false | ($spl19 | $spl67)),
  inference(subsumption_resolution,[],[f7151,f7039])).
fof(f7151,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl19 | $spl67)),
  inference(forward_demodulation,[],[f7060,f7039])).
fof(f7060,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl19 | $spl67)),
  inference(backward_demodulation,[],[f7039,f6220])).
fof(f7148,plain,(
  $false | ($spl19 | $spl71)),
  inference(subsumption_resolution,[],[f7054,f224])).
fof(f7054,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl71)),
  inference(backward_demodulation,[],[f7039,f6341])).
fof(f6918,plain,(
  $false | ($spl19 | $spl39)),
  inference(subsumption_resolution,[],[f6883,f1700])).
fof(f6883,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f6865,f478])).
fof(f6917,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f6880,f208])).
fof(f6880,plain,(
  ~p(s(bool,'T_0')) | $spl19),
  inference(backward_demodulation,[],[f6865,f213])).
fof(f6866,plain,(
  $false | ($spl11 | $spl19)),
  inference(subsumption_resolution,[],[f6865,f470])).
fof(f6339,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) ) | $spl68),
  inference(cnf_transformation,[],[f6339_D])).
fof(f6339_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f6341,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | $spl71),
  inference(cnf_transformation,[],[f6341_D])).
fof(f6341_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) <=> ~$spl71),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl71])])).
fof(f6290,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) ) | ($spl5 | $spl42)),
  inference(equality_factoring,[],[f4350])).
fof(f4350,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl5 | $spl42)),
  inference(subsumption_resolution,[],[f4344,f213])).
fof(f4344,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl5 | $spl42)),
  inference(superposition,[],[f503,f3251])).
fof(f3251,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | ($spl5 | $spl42)),
  inference(unit_resulting_resolution,[],[f213,f3072,f306])).
fof(f3072,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3)))))))))) | ($spl5 | $spl42)),
  inference(unit_resulting_resolution,[],[f2710,f243])).
fof(f2710,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))) | ($spl5 | $spl42)),
  inference(unit_resulting_resolution,[],[f2691,f246])).
fof(f2691,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | ($spl5 | $spl42)),
  inference(backward_demodulation,[],[f2645,f316])).
fof(f2645,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK2) | $spl42),
  inference(unit_resulting_resolution,[],[f1940,f246])).
fof(f5853,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl64),
  inference(cnf_transformation,[],[f5853_D])).
fof(f5853_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f5855,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl67),
  inference(cnf_transformation,[],[f5855_D])).
fof(f5855_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f5858,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(forward_demodulation,[],[f5857,f1171])).
fof(f5857,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5835,f3199])).
fof(f5835,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f244,f1171])).
fof(f5854,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl65),
  inference(cnf_transformation,[],[f5854_D])).
fof(f5854_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f5856,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl66),
  inference(cnf_transformation,[],[f5856_D])).
fof(f5856_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f5852,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(forward_demodulation,[],[f5851,f1171])).
fof(f5851,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5834,f3199])).
fof(f5834,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f243,f1171])).
fof(f5662,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl60),
  inference(cnf_transformation,[],[f5662_D])).
fof(f5662_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f5664,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl62),
  inference(cnf_transformation,[],[f5664_D])).
fof(f5664_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f5673,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5659,f3640])).
fof(f5659,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f4168,f810])).
fof(f5672,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5658,f478])).
fof(f5658,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f4158,f810])).
fof(f5651,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f238,f810])).
fof(f5650,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f810,f238])).
fof(f5665,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5649,f478])).
fof(f5649,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f810,f4158])).
fof(f5660,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5648,f3640])).
fof(f5648,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f810,f4168])).
fof(f5357,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl56),
  inference(cnf_transformation,[],[f5357_D])).
fof(f5357_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f5359,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl58),
  inference(cnf_transformation,[],[f5359_D])).
fof(f5359_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f5368,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5354,f3640])).
fof(f5354,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f4168,f787])).
fof(f5367,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5353,f478])).
fof(f5353,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f4158,f787])).
fof(f5346,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f238,f787])).
fof(f5345,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f787,f238])).
fof(f5360,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5344,f478])).
fof(f5344,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f787,f4158])).
fof(f5355,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f5343,f3640])).
fof(f5343,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f787,f4168])).
fof(f4034,plain,(
  $false | ($spl8 | $spl42)),
  inference(unit_resulting_resolution,[],[f2645,f4000,f247])).
fof(f4000,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | ($spl8 | $spl42)),
  inference(subsumption_resolution,[],[f3999,f3923])).
fof(f3923,plain,(
  ~p(s(bool,'F_0')) | ($spl8 | $spl42)),
  inference(global_subsumption,[],[f3922,f207,f206,f205,f208,f209,f210,f215,f216,f217,f218,f219,f220,f221,f224,f225,f236,f238,f240,f239,f245,f247,f246,f253,f252,f321,f322,f265,f264,f263,f274,f273,f272,f277,f275,f293,f292,f291,f290,f309,f306,f312,f450,f454,f466,f463,f503,f504,f280,f279,f278,f283,f281,f227,f226,f235,f237,f323,f324,f294,f298,f299,f297,f251,f250,f244,f243,f329,f333,f334,f335,f345,f346,f341,f344,f347,f342,f343,f276,f331,f337,f295,f348,f349,f508,f223,f222,f213,f787,f788,f810,f811,f877,f878,f881,f882,f883,f884,f885,f920,f952,f1057,f1110,f1236,f1509,f1558,f1559,f1606,f1788,f1789,f1965,f2068,f2372,f2388,f2437,f2461,f2469,f2378,f3021,f3022,f3023,f3024,f3025,f2972,f3027,f3028,f3029,f3030,f3031,f3032,f3033,f3034,f3035,f3036,f3037,f3038,f3039,f3040,f3041,f3042,f2994,f3045,f3050,f3051,f3052,f3053,f3054,f3056,f3057,f3058,f3059,f3064,f3065,f3066,f3067,f3106,f3107,f3108,f3149,f3134,f3160,f3215,f3216,f3199,f3227,f3243,f3204,f3139,f2993,f214,f478,f3640,f285,f1398,f320,f211,f1787,f1786,f296,f1089,f212,f234,f2147,f2169,f2110,f2025,f2022,f2021,f2020,f2019,f2018,f2016,f2011,f2010,f2009,f2007,f2006,f2005,f876,f875,f874,f311,f310,f305,f304,f303,f302,f231,f230,f1171,f2017,f2015,f880,f233,f232,f228,f1937,f326,f325,f289,f288,f287,f286,f270,f268,f267,f266,f262,f261,f260])).
fof(f3922,plain,(
  ( ! [X89] : (~p(s(bool,'F_0')) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK20(sK2,X89,'type.list.list'(sK0)))) ) | ($spl8 | $spl42)),
  inference(forward_demodulation,[],[f3068,f468])).
fof(f3068,plain,(
  ( ! [X89] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X89),s('type.list.list'(sK0),'const.list.NIL_0')))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK20(sK2,X89,'type.list.list'(sK0)))) ) | $spl42),
  inference(forward_demodulation,[],[f3017,f2645])).
fof(f3017,plain,(
  ( ! [X89] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X89),s('type.list.list'(sK0),'const.list.NIL_0')))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK20(sK2,X89,'type.list.list'(sK0)))) ) | $spl42),
  inference(superposition,[],[f279,f2645])).
fof(f3999,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl8),
  inference(forward_demodulation,[],[f244,f468])).
fof(f4032,plain,(
  $false | ($spl8 | $spl42)),
  inference(unit_resulting_resolution,[],[f1236,f4000,f240])).
fof(f4030,plain,(
  $false | ($spl8 | $spl42)),
  inference(unit_resulting_resolution,[],[f1965,f4000])).
fof(f4054,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4036])).
fof(f4036,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f1965])).
fof(f4053,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4037])).
fof(f4037,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f920])).
fof(f4052,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4041])).
fof(f4041,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f221])).
fof(f4051,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4042])).
fof(f4042,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f225])).
fof(f4050,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4043])).
fof(f4043,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f215])).
fof(f4049,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4044])).
fof(f4044,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f217])).
fof(f4048,plain,(
  $false | ($spl8 | $spl42)),
  inference(trivial_inequality_removal,[],[f4045])).
fof(f4045,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl8 | $spl42)),
  inference(superposition,[],[f4000,f210])).
fof(f4047,plain,(
  $false | ($spl8 | $spl42)),
  inference(equality_resolution,[],[f4000])).
fof(f3905,plain,(
  $false | ($spl2 | $spl38 | $spl42)),
  inference(subsumption_resolution,[],[f3898,f3881])).
fof(f3881,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl38),
  inference(subsumption_resolution,[],[f3699,f208])).
fof(f3699,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl38),
  inference(backward_demodulation,[],[f3673,f250])).
fof(f3673,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl38),
  inference(subsumption_resolution,[],[f3647,f454])).
fof(f3647,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9) | p(s(bool,X9))) ) | $spl38),
  inference(backward_demodulation,[],[f3642,f508])).
fof(f3642,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl38),
  inference(backward_demodulation,[],[f1699,f478])).
fof(f1699,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl38),
  inference(cnf_transformation,[],[f1699_D])).
fof(f1699_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f3898,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0')))) ) | ($spl2 | $spl38 | $spl42)),
  inference(backward_demodulation,[],[f3881,f3765])).
fof(f3765,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))) ) | ($spl2 | $spl38 | $spl42)),
  inference(subsumption_resolution,[],[f3680,f208])).
fof(f3680,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))) ) | ($spl2 | $spl38 | $spl42)),
  inference(backward_demodulation,[],[f3673,f2690])).
fof(f2690,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))),s('type.num.num',sK1))))) ) | ($spl2 | $spl42)),
  inference(backward_demodulation,[],[f2645,f2609])).
fof(f3904,plain,(
  $false | ($spl5 | $spl38 | $spl42)),
  inference(subsumption_resolution,[],[f3897,f3881])).
fof(f3897,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl5 | $spl38 | $spl42)),
  inference(backward_demodulation,[],[f3881,f2691])).
fof(f3903,plain,(
  $false | ($spl5 | $spl38 | $spl42)),
  inference(subsumption_resolution,[],[f3896,f3778])).
fof(f3778,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl38),
  inference(subsumption_resolution,[],[f3697,f208])).
fof(f3697,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl38),
  inference(backward_demodulation,[],[f3673,f243])).
fof(f3896,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl5 | $spl38 | $spl42)),
  inference(backward_demodulation,[],[f3881,f2710])).
fof(f3880,plain,(
  $false | ($spl35 | $spl38)),
  inference(subsumption_resolution,[],[f3834,f3778])).
fof(f3834,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl35 | $spl38)),
  inference(backward_demodulation,[],[f3778,f2055])).
fof(f3850,plain,(
  $false | ($spl5 | $spl38 | $spl42)),
  inference(trivial_inequality_removal,[],[f3794])).
fof(f3794,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl5 | $spl38 | $spl42)),
  inference(backward_demodulation,[],[f3778,f3074])).
fof(f3074,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))))) | ($spl5 | $spl42)),
  inference(unit_resulting_resolution,[],[f2710,f310])).
fof(f3672,plain,(
  $false | $spl38),
  inference(subsumption_resolution,[],[f3644,f208])).
fof(f3644,plain,(
  ~p(s(bool,'T_0')) | $spl38),
  inference(backward_demodulation,[],[f3642,f213])).
fof(f3643,plain,(
  $false | ($spl11 | $spl38)),
  inference(subsumption_resolution,[],[f3642,f470])).
fof(f3595,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl52),
  inference(cnf_transformation,[],[f3595_D])).
fof(f3595_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f3597,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl54),
  inference(cnf_transformation,[],[f3597_D])).
fof(f3597_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f3593,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl39),
  inference(forward_demodulation,[],[f3592,f212])).
fof(f3592,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl39),
  inference(forward_demodulation,[],[f3552,f295])).
fof(f3552,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl39),
  inference(superposition,[],[f3303,f212])).
fof(f3303,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl39),
  inference(superposition,[],[f3150,f211])).
fof(f3150,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X5))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) ) | $spl39),
  inference(forward_demodulation,[],[f3135,f1703])).
fof(f1703,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl39),
  inference(unit_resulting_resolution,[],[f213,f1700,f503])).
fof(f3135,plain,(
  ( ! [X4,X5] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X5)))) ) | $spl39),
  inference(superposition,[],[f297,f2644])).
fof(f2644,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl39),
  inference(subsumption_resolution,[],[f2638,f213])).
fof(f2638,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl39),
  inference(superposition,[],[f503,f1703])).
fof(f2608,plain,(
  $false | ($spl11 | $spl42 | $spl47)),
  inference(subsumption_resolution,[],[f2607,f470])).
fof(f2607,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl42 | $spl47)),
  inference(forward_demodulation,[],[f2605,f224])).
fof(f2605,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl42 | $spl47)),
  inference(backward_demodulation,[],[f1940,f2405])).
fof(f2405,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl47),
  inference(unit_resulting_resolution,[],[f213,f2348,f503])).
fof(f2606,plain,(
  $false | ($spl42 | $spl47)),
  inference(subsumption_resolution,[],[f2604,f224])).
fof(f2604,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl42 | $spl47)),
  inference(backward_demodulation,[],[f1940,f2348])).
fof(f2562,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl50),
  inference(cnf_transformation,[],[f2562_D])).
fof(f2562_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2560,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl48),
  inference(cnf_transformation,[],[f2560_D])).
fof(f2560_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f2519,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl43),
  inference(superposition,[],[f2389,f212])).
fof(f2389,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) ) | $spl43),
  inference(forward_demodulation,[],[f2374,f1950])).
fof(f1950,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl43),
  inference(unit_resulting_resolution,[],[f213,f1942,f306])).
fof(f1942,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1941,f243])).
fof(f2374,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl43),
  inference(superposition,[],[f235,f1984])).
fof(f1984,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl43),
  inference(subsumption_resolution,[],[f1976,f213])).
fof(f1976,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl43),
  inference(superposition,[],[f503,f1950])).
fof(f2558,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl43),
  inference(forward_demodulation,[],[f2557,f211])).
fof(f2557,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl43),
  inference(forward_demodulation,[],[f2506,f212])).
fof(f2506,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl43),
  inference(superposition,[],[f2389,f211])).
fof(f2346,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl44),
  inference(cnf_transformation,[],[f2346_D])).
fof(f2346_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2348,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl47),
  inference(cnf_transformation,[],[f2348_D])).
fof(f2348_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f2313,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl43),
  inference(equality_factoring,[],[f1984])).
fof(f1939,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl40),
  inference(cnf_transformation,[],[f1939_D])).
fof(f1939_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1941,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl43),
  inference(cnf_transformation,[],[f1941_D])).
fof(f1941_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f1936,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(superposition,[],[f246,f317])).
fof(f1698,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl36),
  inference(cnf_transformation,[],[f1698_D])).
fof(f1698_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1700,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl39),
  inference(cnf_transformation,[],[f1700_D])).
fof(f1700_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f1675,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(equality_factoring,[],[f1561])).
fof(f1561,plain,(
  ( ! [X20] : (s(bool,X20) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X20)) ) | $spl1),
  inference(subsumption_resolution,[],[f1548,f213])).
fof(f1548,plain,(
  ( ! [X20] : (p(s(bool,'F_0')) | s(bool,X20) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X20)) ) | $spl1),
  inference(superposition,[],[f503,f500])).
fof(f500,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(backward_demodulation,[],[f481,f482])).
fof(f482,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f214,f314,f306])).
fof(f481,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f213,f314,f306])).
fof(f900,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl32),
  inference(cnf_transformation,[],[f900_D])).
fof(f900_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f902,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl35),
  inference(cnf_transformation,[],[f902_D])).
fof(f902_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f885,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f239,f212])).
fof(f898,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl30),
  inference(cnf_transformation,[],[f898_D])).
fof(f898_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f889,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(cnf_transformation,[],[f889_D])).
fof(f889_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f884,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f239,f210])).
fof(f896,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) ) | $spl28),
  inference(cnf_transformation,[],[f896_D])).
fof(f896_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f883,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) )),
  inference(superposition,[],[f239,f217])).
fof(f895,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f895_D])).
fof(f895_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f882,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f215])).
fof(f892,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(cnf_transformation,[],[f892_D])).
fof(f892_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f894,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl25),
  inference(cnf_transformation,[],[f894_D])).
fof(f894_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f881,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f320])).
fof(f890,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) ) | $spl20),
  inference(cnf_transformation,[],[f890_D])).
fof(f890_D,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f878,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(superposition,[],[f239,f225])).
fof(f887,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) ) | $spl16),
  inference(cnf_transformation,[],[f887_D])).
fof(f887_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f877,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) )),
  inference(superposition,[],[f239,f221])).
fof(f557,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f515,f208])).
fof(f515,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f505,f213])).
fof(f506,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) | $spl14),
  inference(cnf_transformation,[],[f506_D])).
fof(f506_D,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f504,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f488,f454])).
fof(f488,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f306,f238])).
fof(f468,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f468_D])).
fof(f468_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f470,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f470_D])).
fof(f470_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f463,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f238])).
fof(f313,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl0),
  inference(cnf_transformation,[],[f313_D])).
fof(f313_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f319,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(cnf_transformation,[],[f319_D])).
fof(f319_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f205,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f160])).
fof(f160,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X6,X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X6))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f159])).
fof(f159,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X3,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f155])).
fof(f155,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <~> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X3)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X9)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_2|split|9','thm.quantHeuristics.LIST_LENGTH_2|split|9')).
fof(f317,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f206,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),sK3))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(cnf_transformation,[],[f161])).
fof(f314,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl1),
  inference(cnf_transformation,[],[f314_D])).
fof(f314_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f315,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))))))) ) | $spl2),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f207,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(cnf_transformation,[],[f161])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 557
% Passive clauses: 4033
% Generated clauses: 36227
% Final active clauses: 255
% Final passive clauses: 1785
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 222
% Trivial inequalities: 158
% Fw subsumption resolutions: 883
% Fw demodulations: 12653
% Bw demodulations: 1007
% Condensations: 186
% Global subsumptions: 162
% 
% Simple tautologies: 99
% Equational tautologies: 181
% Forward subsumptions: 16998
% Fw demodulations to eq. taut.: 358
% 
% Unit resulting resolution: 3667
% Factoring: 1
% Forward superposition: 7653
% Backward superposition: 8140
% Self superposition: 108
% Equality factoring: 48
% Equality resolution: 23
% 
% Split clauses: 83
% Split components: 166
% SAT solver clauses: 4574
% SAT solver unit clauses: 267
% SAT solver binary clauses: 1288
% 
% Sat splits: 83
% Sat splitting refutations: 211
% 
% Memory used [KB]: 29551
% Time elapsed: 1.405 s
% ------------------------------
% ------------------------------
% Success in time 2.73 s
