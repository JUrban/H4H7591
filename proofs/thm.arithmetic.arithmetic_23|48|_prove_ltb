Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (109906)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 540
% Passive clauses: 5411
% Generated clauses: 33612
% Final active clauses: 280
% Final passive clauses: 3617
% Input formulas: 69
% Initial clauses: 153
% 
% Duplicate literals: 496
% Trivial inequalities: 248
% Fw subsumption resolutions: 2534
% Fw demodulations: 7418
% Bw demodulations: 187
% 
% Simple tautologies: 265
% Equational tautologies: 38
% Forward subsumptions: 16625
% Fw demodulations to eq. taut.: 28
% 
% Binary resolution: 1140
% Factoring: 1
% Forward superposition: 7361
% Backward superposition: 13513
% Self superposition: 96
% Equality factoring: 60
% Equality resolution: 31
% 
% Split clauses: 383
% Split components: 777
% SAT solver clauses: 881
% SAT solver unit clauses: 13
% SAT solver binary clauses: 202
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 4
% 
% Sat splits: 383
% Sat splitting refutations: 35
% 
% TWLsolver clauses: 877
% TWLsolver calls for satisfiability: 295
% 
% Memory used [KB]: 17142
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% (109921)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 290
% Passive clauses: 2605
% Generated clauses: 23164
% Final active clauses: 136
% Final passive clauses: 1040
% Input formulas: 69
% Initial clauses: 153
% 
% Duplicate literals: 9
% Trivial inequalities: 175
% Fw subsumption resolutions: 807
% Fw demodulations: 5189
% Bw demodulations: 1307
% Condensations: 56
% Global subsumptions: 14
% 
% Simple tautologies: 159
% Equational tautologies: 10
% Forward subsumptions: 11023
% Fw demodulations to eq. taut.: 39
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 542
% Factoring: 3
% Forward superposition: 5346
% Backward superposition: 5383
% Self superposition: 61
% Equality factoring: 2
% Equality resolution: 29
% 
% Split clauses: 101
% Split components: 203
% SAT solver clauses: 2562
% SAT solver unit clauses: 181
% SAT solver binary clauses: 86
% SAT solver learnt clauses: 31
% SAT solver learnt literals: 8
% 
% Sat splits: 101
% Sat splitting refutations: 94
% 
% TWLsolver clauses: 2503
% TWLsolver calls for satisfiability: 915
% 
% Memory used [KB]: 17654
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f42080,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1139,f1146,f1155,f1153,f2331,f2388,f2387,f2456,f2457,f2458,f3774,f3775,f3780,f3781,f2497,f1151,f1150,f2310,f3796,f3794,f3876,f4020,f3777,f4021,f4240,f4333,f4334,f4340,f6903,f7092,f7091,f7904,f7906,f3783,f8214,f8218,f8216,f8228,f8232,f8230,f8421,f8425,f8423,f8536,f8540,f8544,f8547,f8550,f8551,f8546,f8632,f9022,f9157,f9158,f9159,f9156,f9584,f9656,f9655,f12782,f12786,f12823,f12783,f12825,f12784,f12787,f13290,f13292,f13293,f13294,f13295,f13296,f13297,f13302,f13305,f13308,f13311,f13313,f13319,f13322,f13323,f13324,f13327,f13330,f13334,f13335,f13336,f13340,f13343,f13346,f13349,f13352,f13355,f13356,f13358,f13360,f13364,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13390,f13392,f13394,f13396,f13398,f13400,f13402,f13404,f13406,f13408,f13410,f13414,f13416,f13420,f13422,f13427,f13430,f13433,f13436,f13439,f13442,f13445,f13448,f13452,f13454,f13456,f13458,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13504,f13506,f13508,f13510,f13512,f13515,f13518,f13521,f13524,f13527,f13530,f13533,f13536,f13539,f13542,f13545,f13548,f13551,f13554,f13557,f13560,f13562,f13564,f13566,f13568,f13570,f13572,f13574,f13576,f13578,f13580,f13582,f13584,f13586,f13588,f13590,f13592,f13594,f13596,f13598,f13600,f13602,f13604,f13606,f13608,f13610,f13612,f13614,f13616,f13618,f13620,f13623,f13626,f13629,f13632,f13635,f13638,f13641,f13644,f13646,f13648,f13650,f13652,f13654,f13656,f13658,f13659,f13661,f13663,f13665,f13667,f13669,f13673,f13675,f13677,f13679,f13681,f13683,f13685,f13687,f13689,f13691,f13693,f13695,f13697,f13699,f13701,f13702,f13705,f13706,f13707,f13708,f13709,f13712,f13713,f13715,f13717,f13720,f13723,f13724,f13726,f13729,f13730,f13731,f13732,f13733,f13736,f13737,f13740,f13743,f13744,f13746,f13747,f13750,f13753,f13756,f13759,f13761,f13763,f13765,f13767,f13768,f13769,f13771,f13773,f13775,f13777,f13780,f13783,f13785,f13787,f13789,f13791,f13793,f13795,f13797,f13799,f13801,f13803,f13805,f13807,f13809,f13811,f13813,f13815,f13817,f13819,f13821,f13823,f13825,f13828,f13831,f13834,f13837,f13839,f13841,f13843,f13845,f13847,f13849,f13851,f13853,f13855,f13857,f13859,f13861,f13863,f13865,f13867,f13869,f13872,f13875,f13877,f13879,f13881,f13883,f13885,f13887,f13890,f13895,f13898,f13901,f13903,f13905,f13910,f13912,f13914,f13915,f13918,f13920,f13923,f13928,f13931,f13934,f13936,f13938,f13943,f13945,f13947,f13948,f13951,f13953,f17810,f17949,f17946,f17950,f3782,f17948,f18511,f18513,f18516,f18524,f18528,f18532,f18536,f18540,f18544,f18548,f18570,f18571,f18573,f18575,f18577,f18593,f18597,f18619,f18644,f18662,f18670,f18663,f18672,f18673,f18677,f18579,f18678,f18680,f18681,f18683,f18684,f7090,f18736,f18740,f18741,f18743,f18738,f18895,f19273,f19274,f19289,f19290,f19291,f19292,f19299,f19300,f19301,f19302,f19303,f19304,f19305,f19306,f19307,f19308,f19309,f19310,f19311,f19312,f19313,f19314,f19315,f19316,f19318,f19319,f19322,f19324,f19326,f19327,f19328,f28787,f39686,f39692,f39696,f39699,f39704,f39707,f39710,f39714,f39718,f39723,f39727,f39731,f39735,f39739,f39742,f39745,f39748,f39751,f39753,f39755,f39757,f39759,f39634,f39687,f39688,f40045,f40049,f40047,f40170,f41245,f41265,f41267,f8538,f42076,f42079])).
fof(f42079,plain,(
  $false | ($spl6 | $spl37)),
  inference(subsumption_resolution,[],[f42078,f253])).
fof(f253,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb',aHL_TRUTH)).
fof(f42078,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl37)),
  inference(forward_demodulation,[],[f42077,f1077])).
fof(f1077,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f253,f1043,f349])).
fof(f349,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X13,X14] : ((p(s(bool,X13)) => p(s(bool,X14))) => ((p(s(bool,X14)) => p(s(bool,X13))) => s(bool,X13) = s(bool,X14)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.IMP_ANTISYM_AX')).
fof(f1043,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f1025,f329])).
fof(f329,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X9] : ! [X13,X14] : s(X9,X13) = s(X9,'const.bool.COND_3'(s(bool,'T_0'),s(X9,X13),s(X9,X14)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.COND_CLAUSES|split|0')).
fof(f1025,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f329,f352])).
fof(f352,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f229])).
fof(f229,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(flattening,[],[f228])).
fof(f228,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)))) | s('type.num.num',X10) = s('type.num.num',X11)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_OR_EQ')).
fof(f42077,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | ($spl6 | $spl37)),
  inference(forward_demodulation,[],[f8230,f1154])).
fof(f1154,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) | $spl6),
  inference(cnf_transformation,[],[f1154_D])).
fof(f1154_D,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f42076,plain,(
  $false | ($spl4 | $spl27 | $spl74)),
  inference(subsumption_resolution,[],[f42075,f7090])).
fof(f42075,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl74)),
  inference(forward_demodulation,[],[f18579,f1153])).
fof(f8538,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl45),
  inference(cnf_transformation,[],[f8538_D])).
fof(f8538_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f41267,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | $spl100),
  inference(cnf_transformation,[],[f41267_D])).
fof(f41267_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f41265,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8863,f336])).
fof(f336,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X11,X10] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f8863,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(superposition,[],[f2788,f1694])).
fof(f1694,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),
  inference(superposition,[],[f336,f252])).
fof(f252,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) & s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f152])).
fof(f152,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) => s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) => ~s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) => ~s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) => ~s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.arithmetic_23|48|_prove_ltb')).
fof(f2788,plain,(
  ( ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X7,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f2760,f252])).
fof(f2760,plain,(
  ( ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X7,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f427,f252])).
fof(f427,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f344,f425])).
fof(f425,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f336,f335])).
fof(f335,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X11,X10] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_CLAUSES|split|2')).
fof(f344,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8(X1,X0)))),s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8(X1,X0)))),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f166])).
fof(f166,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) => ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X10)))) => ? [X12] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num',X11))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_STRONG_ADD')).
fof(f41245,plain,(
  $false | $spl36),
  inference(subsumption_resolution,[],[f41244,f9017])).
fof(f9017,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f1129,f1696])).
fof(f1696,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f336,f258])).
fof(f258,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_|48|')).
fof(f1129,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f321,f345])).
fof(f345,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) => s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X10,X11] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) => s('type.num.num','const.num.|48|_0') = s('type.num.num',X11))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_INV_|48|')).
fof(f321,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X11] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.num.NOT_SUC')).
fof(f41244,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl36),
  inference(forward_demodulation,[],[f41243,f28789])).
fof(f28789,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num',X1)))) ) | $spl36),
  inference(forward_demodulation,[],[f28748,f329])).
fof(f28748,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | $spl36),
  inference(superposition,[],[f373,f19347])).
fof(f19347,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl36),
  inference(backward_demodulation,[],[f19272,f1561])).
fof(f1561,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f253,f1556,f349])).
fof(f1556,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2))))),
  inference(subsumption_resolution,[],[f1538,f253])).
fof(f1538,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2))))),
  inference(superposition,[],[f340,f439])).
fof(f439,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f251,f267])).
fof(f267,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X16] : (s(bool,'T_0') = s(bool,X16) <=> p(s(bool,X16)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.EQ_CLAUSES|split|0')).
fof(f251,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f180])).
fof(f340,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_OR')).
fof(f19272,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) | $spl36),
  inference(backward_demodulation,[],[f19269,f2125])).
fof(f2125,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f2103,f253])).
fof(f2103,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),
  inference(superposition,[],[f343,f439])).
fof(f343,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X1,X0)),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X1,X0)),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f165])).
fof(f165,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) => ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X10)))) => ? [X12] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_ADD')).
fof(f19269,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',X1)))) ) | $spl36),
  inference(forward_demodulation,[],[f19268,f17794])).
fof(f17794,plain,(
  s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(unit_resulting_resolution,[],[f2125,f378])).
fof(f378,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1,X2] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))))) & ((s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(flattening,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))))) & ((s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(nnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X10,X11,X12] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))) <=> (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X12))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12)))))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB_LEFT_EQ')).
fof(f19268,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',X1)))) ) | $spl36),
  inference(forward_demodulation,[],[f19226,f329])).
fof(f19226,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | $spl36),
  inference(superposition,[],[f373,f18823])).
fof(f18823,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl36),
  inference(unit_resulting_resolution,[],[f253,f8229,f349])).
fof(f8229,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl36),
  inference(cnf_transformation,[],[f8229_D])).
fof(f8229_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f373,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X10,X11,X12] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X12))),s('type.num.num',X11)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB_RIGHT_ADD')).
fof(f41243,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl36),
  inference(subsumption_resolution,[],[f41206,f253])).
fof(f41206,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl36),
  inference(superposition,[],[f341,f19362])).
fof(f19362,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl36),
  inference(backward_demodulation,[],[f19272,f1987])).
fof(f1987,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))),
  inference(unit_resulting_resolution,[],[f253,f1633,f349])).
fof(f1633,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),
  inference(unit_resulting_resolution,[],[f1630,f351])).
fof(f351,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f229])).
fof(f1630,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),
  inference(subsumption_resolution,[],[f1612,f253])).
fof(f1612,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),
  inference(superposition,[],[f359,f439])).
fof(f359,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f233])).
fof(f233,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) & ((s('type.num.num',X0) != s('type.num.num',X1) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(flattening,[],[f232])).
fof(f232,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))) & ((s('type.num.num',X0) != s('type.num.num',X1) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) <=> (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) <=> (s('type.num.num',X10) = s('type.num.num',X11) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.prim_rec.LESS_THM')).
fof(f341,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X10)))) => s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X11))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB_ADD')).
fof(f40170,plain,(
  $false | ($spl2 | $spl36 | $spl96)),
  inference(subsumption_resolution,[],[f40155,f1151])).
fof(f40155,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | ($spl36 | $spl96)),
  inference(backward_demodulation,[],[f40072,f28788])).
fof(f28788,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))))) ) | $spl36),
  inference(forward_demodulation,[],[f28747,f329])).
fof(f28747,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK1)))))) ) | $spl36),
  inference(superposition,[],[f372,f19347])).
fof(f372,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X10,X11,X12] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB_LEFT_ADD')).
fof(f40072,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',sK1)))) ) | $spl96),
  inference(backward_demodulation,[],[f40047,f8992])).
fof(f8992,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f1696,f378])).
fof(f40047,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl96),
  inference(cnf_transformation,[],[f40047_D])).
fof(f40047_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f40049,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | $spl98),
  inference(cnf_transformation,[],[f40049_D])).
fof(f40049_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f40045,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl48),
  inference(subsumption_resolution,[],[f40007,f253])).
fof(f40007,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl48),
  inference(superposition,[],[f350,f14634])).
fof(f14634,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl48),
  inference(unit_resulting_resolution,[],[f253,f8637,f349])).
fof(f8637,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) | $spl48),
  inference(unit_resulting_resolution,[],[f8545,f340])).
fof(f8545,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl48),
  inference(cnf_transformation,[],[f8545_D])).
fof(f8545_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f350,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f229])).
fof(f39688,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl94),
  inference(cnf_transformation,[],[f39688_D])).
fof(f39688_D,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f39687,plain,(
  ( ! [X22] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))) ) | $spl92),
  inference(cnf_transformation,[],[f39687_D])).
fof(f39687_D,plain,(
  ( ! [X22] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f39634,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) ) | $spl26),
  inference(superposition,[],[f20257,f260])).
fof(f260,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB|split|0')).
fof(f20257,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) ) | $spl26),
  inference(duplicate_literal_removal,[],[f20256])).
fof(f20256,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) ) | $spl26),
  inference(forward_demodulation,[],[f20161,f7091])).
fof(f20161,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) ) | $spl26),
  inference(backward_demodulation,[],[f7091,f3692])).
fof(f3692,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f360,f337])).
fof(f337,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X11,X10] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB_MONO_EQ')).
fof(f360,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & (((s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f234])).
fof(f234,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (((s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) <=> ((s('type.num.num',X10) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) & s('type.num.num',X11) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_EQ_|49|')).
fof(f39759,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X87))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X88)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39758,f23926])).
fof(f23926,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK1)) | $spl36),
  inference(forward_demodulation,[],[f23763,f2566])).
fof(f2566,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f257,f378])).
fof(f257,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X11] : s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD|split|0')).
fof(f23763,plain,(
  s('type.num.num',sK7(sK1,sK1)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl36),
  inference(unit_resulting_resolution,[],[f21111,f378])).
fof(f21111,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK1)),s('type.num.num',sK1))) | $spl36),
  inference(subsumption_resolution,[],[f21075,f253])).
fof(f21075,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK1)),s('type.num.num',sK1))) | $spl36),
  inference(superposition,[],[f343,f19332])).
fof(f19332,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl36),
  inference(backward_demodulation,[],[f19272,f439])).
fof(f39758,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X88))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X87)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39587,f260])).
fof(f39587,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X87))),s('type.num.num',X88))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X87)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f23926])).
fof(f39757,plain,(
  ( ! [X85,X86] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X86)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39756,f19716])).
fof(f19716,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2)) | $spl36),
  inference(forward_demodulation,[],[f19612,f2566])).
fof(f19612,plain,(
  s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl36),
  inference(backward_demodulation,[],[f19272,f17794])).
fof(f39756,plain,(
  ( ! [X85,X86] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X86))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39586,f260])).
fof(f39586,plain,(
  ( ! [X85,X86] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85))),s('type.num.num',X86))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f19716])).
fof(f39755,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X83))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X84)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39754,f26403])).
fof(f26403,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK1,sK2)) | $spl36),
  inference(forward_demodulation,[],[f26233,f2566])).
fof(f26233,plain,(
  s('type.num.num',sK6(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl36),
  inference(unit_resulting_resolution,[],[f19368,f378])).
fof(f19368,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK1,sK2)),s('type.num.num',sK1))) | $spl36),
  inference(backward_demodulation,[],[f19272,f2069])).
fof(f2069,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK1,sK2)),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f2046,f253])).
fof(f2046,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK1,sK2)),s('type.num.num',sK1)))),
  inference(superposition,[],[f342,f1282])).
fof(f1282,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f253,f1199,f349])).
fof(f1199,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(subsumption_resolution,[],[f1182,f253])).
fof(f1182,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(superposition,[],[f351,f439])).
fof(f342,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X1,X0)),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f225])).
fof(f225,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X1,X0)),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f164])).
fof(f164,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X10)))) => ? [X12] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_EQ_ADD_EXISTS')).
fof(f39754,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X84))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X83)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39585,f260])).
fof(f39585,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X83))),s('type.num.num',X84))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X83)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f26403])).
fof(f39753,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X81))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X82)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39752,f25144])).
fof(f25144,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK2,sK1)) | $spl36),
  inference(forward_demodulation,[],[f24975,f2566])).
fof(f24975,plain,(
  s('type.num.num',sK6(sK2,sK1)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl36),
  inference(unit_resulting_resolution,[],[f19623,f378])).
fof(f19623,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK2,sK1)),s('type.num.num',sK1))) | $spl36),
  inference(backward_demodulation,[],[f19272,f18818])).
fof(f18818,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK2,sK1)),s('type.num.num',sK2))) | $spl36),
  inference(unit_resulting_resolution,[],[f8229,f342])).
fof(f39752,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X82))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK2,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X81)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39584,f260])).
fof(f39584,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81))),s('type.num.num',X82))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK2,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X81)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f25144])).
fof(f39751,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X80)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39750,f23926])).
fof(f39750,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X80)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39749,f23128])).
fof(f23128,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num',sK6(sK3,X0))) ) | $spl36),
  inference(forward_demodulation,[],[f22772,f259])).
fof(f259,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.SUB_|48||split|1')).
fof(f22772,plain,(
  ( ! [X0] : (s('type.num.num',sK6(sK3,X0)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl36),
  inference(unit_resulting_resolution,[],[f20458,f378])).
fof(f20458,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num','const.num.|48|_0')))) ) | $spl36),
  inference(forward_demodulation,[],[f20457,f19741])).
fof(f19741,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | $spl36),
  inference(subsumption_resolution,[],[f7229,f19272])).
fof(f7229,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3)),
  inference(superposition,[],[f345,f252])).
fof(f20457,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num',sK3)))) ) | $spl36),
  inference(subsumption_resolution,[],[f20456,f253])).
fof(f20456,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num',sK3)))) ) | $spl36),
  inference(forward_demodulation,[],[f20355,f440])).
fof(f440,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f256,f267])).
fof(f256,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X11] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ZERO_LESS_EQ')).
fof(f20355,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num',sK3)))) ) | $spl36),
  inference(superposition,[],[f342,f19741])).
fof(f39749,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X80))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK7(sK1,sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X79)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39583,f260])).
fof(f39583,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X79))),s('type.num.num',X80))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK7(sK1,sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X79)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29076])).
fof(f29076,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK7(sK1,sK1))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f23926,f23143])).
fof(f23143,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,X10))) ) | ($spl26 | $spl36)),
  inference(duplicate_literal_removal,[],[f23142])).
fof(f23142,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,X10)) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,X10))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f22854,f7091])).
fof(f22854,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.num.num',sK6(sK3,X10)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,X10))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20136,f20458])).
fof(f20136,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl26),
  inference(backward_demodulation,[],[f7091,f360])).
fof(f39748,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X77))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39747,f19716])).
fof(f39747,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X77))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39746,f23128])).
fof(f39746,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK7(sK1,sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X77)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39582,f260])).
fof(f39582,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK7(sK1,sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X77)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29075])).
fof(f29075,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK7(sK1,sK2))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f19716,f23143])).
fof(f39745,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39744,f26403])).
fof(f39744,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39743,f23128])).
fof(f39743,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK1,sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39581,f260])).
fof(f39581,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X75))),s('type.num.num',X76))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK1,sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29073])).
fof(f29073,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK1,sK2))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f26403,f23143])).
fof(f39742,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X73))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39741,f25144])).
fof(f39741,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK2,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X73))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39740,f23128])).
fof(f39740,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK2,sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X73)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39580,f260])).
fof(f39580,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))),s('type.num.num',X74))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK2,sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X73)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29072])).
fof(f29072,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK2,sK1))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f25144,f23143])).
fof(f39739,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39738,f23926])).
fof(f39738,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39737,f23128])).
fof(f39737,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK7(sK1,sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39736,f23128])).
fof(f39736,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK7(sK1,sK1)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39579,f260])).
fof(f39579,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X71))),s('type.num.num',X72))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK7(sK1,sK1)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f31039])).
fof(f31039,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK7(sK1,sK1)))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29076,f23143])).
fof(f39735,plain,(
  ( ! [X70,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39734,f19716])).
fof(f39734,plain,(
  ( ! [X70,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39733,f23128])).
fof(f39733,plain,(
  ( ! [X70,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK7(sK1,sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39732,f23128])).
fof(f39732,plain,(
  ( ! [X70,X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK7(sK1,sK2)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39578,f260])).
fof(f39578,plain,(
  ( ! [X70,X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK7(sK1,sK2)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f30461])).
fof(f30461,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK7(sK1,sK2)))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29075,f23143])).
fof(f39731,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39730,f26403])).
fof(f39730,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK1,sK2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39729,f23128])).
fof(f39729,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK1,sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39728,f23128])).
fof(f39728,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK1,sK2)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39577,f260])).
fof(f39577,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67))),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK1,sK2)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X67)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f33090])).
fof(f33090,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK1,sK2)))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29073,f23143])).
fof(f39727,plain,(
  ( ! [X66,X65] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X65))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39726,f25144])).
fof(f39726,plain,(
  ( ! [X66,X65] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK2,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X65))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39725,f23128])).
fof(f39725,plain,(
  ( ! [X66,X65] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK2,sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X65))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39724,f23128])).
fof(f39724,plain,(
  ( ! [X66,X65] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK2,sK1)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X65)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39576,f260])).
fof(f39576,plain,(
  ( ! [X66,X65] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X65))),s('type.num.num',X66))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK2,sK1)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X65)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f31699])).
fof(f31699,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK2,sK1)))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29072,f23143])).
fof(f39723,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39722,f19741])).
fof(f39722,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39721,f23128])).
fof(f39721,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39720,f23128])).
fof(f39720,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39719,f23128])).
fof(f39719,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK3,sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39575,f260])).
fof(f39575,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X63))),s('type.num.num',X64))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK3,sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f32298])).
fof(f32298,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK3,sK3)))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29280,f23143])).
fof(f29280,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK3))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29071,f23143])).
fof(f29071,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK3)) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f19741,f23143])).
fof(f39718,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X61))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39717,f23128])).
fof(f39717,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,'const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X61))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39716,f23128])).
fof(f39716,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,'const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X61))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39715,f23128])).
fof(f39715,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK3,'const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X61)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39574,f260])).
fof(f39574,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X61))),s('type.num.num',X62))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK3,'const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X61)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29840])).
fof(f29840,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,sK6(sK3,'const.num.|48|_0')))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f29074,f23143])).
fof(f29074,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,sK6(sK3,'const.num.|48|_0'))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f23128,f23143])).
fof(f39714,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39713,f19741])).
fof(f39713,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39712,f23128])).
fof(f39712,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39711,f23128])).
fof(f39711,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39573,f260])).
fof(f39573,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X59))),s('type.num.num',X60))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29280])).
fof(f39710,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39709,f23128])).
fof(f39709,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,'const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39708,f23128])).
fof(f39708,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,'const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39572,f260])).
fof(f39572,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))),s('type.num.num',X58))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK6(sK3,'const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29074])).
fof(f39707,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39706,f19741])).
fof(f39706,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39705,f23128])).
fof(f39705,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X55)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39571,f260])).
fof(f39571,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))),s('type.num.num',X56))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X55)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29071])).
fof(f39704,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X54)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39703,f257])).
fof(f39703,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X54)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39702,f336])).
fof(f39702,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X54)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39701,f23128])).
fof(f39701,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X54))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X53)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39570,f260])).
fof(f39570,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))),s('type.num.num',X54))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X53)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f29065])).
fof(f29065,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | ($spl26 | $spl36)),
  inference(unit_resulting_resolution,[],[f258,f23143])).
fof(f39699,plain,(
  ( ! [X48,X49] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39698,f19741])).
fof(f39698,plain,(
  ( ! [X48,X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))) ) | ($spl26 | $spl36)),
  inference(forward_demodulation,[],[f39568,f260])).
fof(f39568,plain,(
  ( ! [X48,X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X48))),s('type.num.num',X49))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))) ) | ($spl26 | $spl36)),
  inference(superposition,[],[f20257,f19741])).
fof(f39696,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X45)))) ) | $spl26),
  inference(forward_demodulation,[],[f39695,f7091])).
fof(f39695,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X45))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))))) ) | $spl26),
  inference(forward_demodulation,[],[f39566,f260])).
fof(f39566,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X44))),s('type.num.num',X45))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))))) ) | $spl26),
  inference(superposition,[],[f20257,f7091])).
fof(f39692,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33)))) ) | $spl26),
  inference(forward_demodulation,[],[f39691,f260])).
fof(f39691,plain,(
  ( ! [X33,X31,X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X32)))))) ) | $spl26),
  inference(forward_demodulation,[],[f39563,f260])).
fof(f39563,plain,(
  ( ! [X33,X31,X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X33))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X32)))))) ) | $spl26),
  inference(superposition,[],[f20257,f260])).
fof(f39686,plain,(
  ( ! [X21,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))) ) | $spl26),
  inference(forward_demodulation,[],[f39685,f2566])).
fof(f39685,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X20))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl26),
  inference(forward_demodulation,[],[f39560,f260])).
fof(f39560,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21))),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X20))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl26),
  inference(superposition,[],[f20257,f2566])).
fof(f28787,plain,(
  $false | ($spl1 | $spl36 | $spl45)),
  inference(subsumption_resolution,[],[f28786,f255])).
fof(f255,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb',aHL_FALSITY)).
fof(f28786,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl36 | $spl45)),
  inference(forward_demodulation,[],[f28785,f10537])).
fof(f10537,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl1 | $spl45)),
  inference(forward_demodulation,[],[f10535,f4125])).
fof(f4125,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(unit_resulting_resolution,[],[f255,f3988,f346])).
fof(f346,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f169])).
fof(f3988,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl1),
  inference(subsumption_resolution,[],[f3902,f1149])).
fof(f1149,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | $spl1),
  inference(cnf_transformation,[],[f1149_D])).
fof(f1149_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f3902,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),
  inference(superposition,[],[f274,f252])).
fof(f274,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X11))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_EQ_|48|')).
fof(f10535,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl1 | $spl45)),
  inference(unit_resulting_resolution,[],[f4152,f8538,f643])).
fof(f643,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f635,f255])).
fof(f635,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f346,f262])).
fof(f262,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb',aHL_BOOL_CASES)).
fof(f4152,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(unit_resulting_resolution,[],[f253,f3988,f415])).
fof(f415,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1))) )),
  inference(condensation,[],[f414])).
fof(f414,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,X0) != s(bool,X2)) )),
  inference(condensation,[],[f403])).
fof(f403,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f249])).
fof(f249,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6,X20,X7,X21] : ((s(bool,X6) = s(bool,X20) & (p(s(bool,X20)) => s(bool,X7) = s(bool,X21))) => ((p(s(bool,X6)) => p(s(bool,X7))) <=> (p(s(bool,X20)) => p(s(bool,X21)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.IMP_CONG')).
fof(f28785,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl36),
  inference(subsumption_resolution,[],[f28784,f9017])).
fof(f28784,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl36),
  inference(subsumption_resolution,[],[f28745,f253])).
fof(f28745,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl36),
  inference(superposition,[],[f350,f19347])).
fof(f19328,plain,(
  $false | ($spl33 | $spl40)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f3897,f2476,f7229,f19288,f19317,f10261,f19321,f19323,f19325,f8422])).
fof(f8422,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl40),
  inference(cnf_transformation,[],[f8422_D])).
fof(f8422_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f19325,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8519,f252])).
fof(f8519,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))),
  inference(superposition,[],[f2116,f252])).
fof(f19323,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8817,f252])).
fof(f8817,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(superposition,[],[f2776,f252])).
fof(f19321,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19320,f1694])).
fof(f19320,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8862,f336])).
fof(f8862,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))),
  inference(superposition,[],[f2788,f252])).
fof(f10261,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl33),
  inference(unit_resulting_resolution,[],[f8216,f340])).
fof(f19317,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19173,f252])).
fof(f19173,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2106,f252])).
fof(f19288,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f19287,f252])).
fof(f19287,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f11036,f259])).
fof(f11036,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(superposition,[],[f7230,f259])).
fof(f2476,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3)),
  inference(superposition,[],[f345,f252])).
fof(f3897,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3)),
  inference(superposition,[],[f345,f252])).
fof(f18735,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f11274,f17794])).
fof(f11274,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f7231,f2566])).
fof(f2309,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(superposition,[],[f336,f2125])).
fof(f2336,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f353,f2125])).
fof(f2382,plain,(
  ( ! [X8] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X8))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2326,f2125])).
fof(f2326,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f342,f2125])).
fof(f2383,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X9)),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f2327,f2125])).
fof(f2327,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X9)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f342,f2125])).
fof(f2384,plain,(
  ( ! [X10] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2328,f2125])).
fof(f2328,plain,(
  ( ! [X10] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f343,f2125])).
fof(f2385,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X11)),s('type.num.num',sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2329,f2125])).
fof(f2329,plain,(
  ( ! [X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X11)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f343,f2125])).
fof(f2401,plain,(
  ( ! [X44] : (s('type.num.num',sK2) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X44,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2365,f2125])).
fof(f2365,plain,(
  ( ! [X44] : (p(s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X44,'type.num.num'))) )),
  inference(superposition,[],[f332,f2125])).
fof(f17814,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0))),s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f372,f2125])).
fof(f17815,plain,(
  ( ! [X1] : (s('type.num.num',sK2) != s('type.num.num',X1) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f378,f2125])).
fof(f18001,plain,(
  ( ! [X71] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X71,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f17881,f2125])).
fof(f17881,plain,(
  ( ! [X71] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X71,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))) )),
  inference(superposition,[],[f427,f2125])).
fof(f18003,plain,(
  ( ! [X72] : (s('type.num.num',X72) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X72)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X72))))) )),
  inference(forward_demodulation,[],[f18002,f2309])).
fof(f18002,plain,(
  ( ! [X72] : (s('type.num.num',X72) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X72)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X72))))) )),
  inference(forward_demodulation,[],[f17882,f336])).
fof(f17882,plain,(
  ( ! [X72] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X72)))) | s('type.num.num',X72) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X72)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))))))) )),
  inference(superposition,[],[f427,f2125])).
fof(f18099,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',X11))),s('type.num.num',sK1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',X11))),s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X11)))))) )),
  inference(superposition,[],[f373,f2125])).
fof(f270,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.EQ_CLAUSES|split|3')).
fof(f271,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f328,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X9] : ! [X13,X14] : s(X9,X14) = s(X9,'const.bool.COND_3'(s(bool,'F_0'),s(X9,X13),s(X9,X14)))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.COND_CLAUSES|split|1')).
fof(f455,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f322,f271])).
fof(f529,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f323,f271])).
fof(f770,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)))) )),
  inference(superposition,[],[f328,f262])).
fof(f779,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,X20)) | p(s(bool,X21)) | ~sP0(X21,X22,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X19),s(bool,X20)))) )),
  inference(superposition,[],[f386,f328])).
fof(f780,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,X24)) | p(s(bool,X25)) | ~sP0(X25,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X23),s(bool,X24)),X26)) )),
  inference(superposition,[],[f387,f328])).
fof(f859,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(superposition,[],[f329,f262])).
fof(f1144,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X11) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(superposition,[],[f345,f328])).
fof(f1268,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) | s('type.num.num',X11) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(superposition,[],[f353,f328])).
fof(f1466,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | s(X0,X3) = s(X0,sK5(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) )),
  inference(superposition,[],[f332,f328])).
fof(f1473,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'F_0')))) | s(bool,X9) = s(bool,sK5(X9,X10,bool)) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f332,f262])).
fof(f1474,plain,(
  ( ! [X12,X11] : (p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X11)))) | s(bool,'F_0') = s(bool,sK5('F_0',X12,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f332,f262])).
fof(f1488,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0')),X15,bool)) | p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f1476,f455])).
fof(f1476,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0'))) = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0')),X15,bool))) )),
  inference(superposition,[],[f332,f455])).
fof(f1490,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.num.|48|_0')),X19,bool)) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f1478,f529])).
fof(f1478,plain,(
  ( ! [X19,X18] : (p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.num.|48|_0')),X19,bool))) )),
  inference(superposition,[],[f332,f529])).
fof(f1491,plain,(
  ( ! [X23,X21,X22,X20] : (s(X20,X22) = s(X20,sK5('const.bool.COND_3'(s(bool,'F_0'),s(X20,X21),s(X20,X22)),X23,X20)) | p(s(bool,happ(s(fun(X20,bool),X23),s(X20,X22))))) )),
  inference(forward_demodulation,[],[f1479,f328])).
fof(f1479,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,happ(s(fun(X20,bool),X23),s(X20,X22)))) | s(X20,'const.bool.COND_3'(s(bool,'F_0'),s(X20,X21),s(X20,X22))) = s(X20,sK5('const.bool.COND_3'(s(bool,'F_0'),s(X20,X21),s(X20,X22)),X23,X20))) )),
  inference(superposition,[],[f332,f328])).
fof(f1702,plain,(
  ( ! [X14,X13] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f529,f336])).
fof(f1956,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f339,f262])).
fof(f2057,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17))))) )),
  inference(forward_demodulation,[],[f2031,f328])).
fof(f2031,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)))))) )),
  inference(superposition,[],[f342,f328])).
fof(f2066,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X17,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16))))) )),
  inference(forward_demodulation,[],[f2040,f328])).
fof(f2040,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X17,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17)))) )),
  inference(superposition,[],[f342,f328])).
fof(f2114,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17))))) )),
  inference(forward_demodulation,[],[f2092,f328])).
fof(f2092,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)))))) )),
  inference(superposition,[],[f343,f328])).
fof(f2123,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X17,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16))))) )),
  inference(forward_demodulation,[],[f2101,f328])).
fof(f2101,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X17,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17)))) )),
  inference(superposition,[],[f343,f328])).
fof(f2135,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK4('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2132,f328])).
fof(f2132,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num',sK4('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)))))))) )),
  inference(superposition,[],[f424,f328])).
fof(f2595,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.num.num',X28) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X29))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num',X29))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X26),s('type.num.num',X27)))) )),
  inference(superposition,[],[f378,f328])).
fof(f2657,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK5(X0,X1,bool))) )),
  inference(superposition,[],[f333,f262])).
fof(f2659,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(forward_demodulation,[],[f2655,f328])).
fof(f2655,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,X3))))) )),
  inference(superposition,[],[f333,f328])).
fof(f2783,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f2755,f328])).
fof(f2755,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X18),s('type.num.num',X19)))))))) )),
  inference(superposition,[],[f427,f328])).
fof(f2793,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X20,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X19))))) )),
  inference(forward_demodulation,[],[f2765,f328])).
fof(f2765,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X19)))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X18),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X20,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) )),
  inference(superposition,[],[f427,f328])).
fof(f3126,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,'F_0')))) | s(bool,X28) != s(bool,X30) | p(s(bool,happ(s(fun(bool,bool),X29),s(bool,X30)))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f334,f262])).
fof(f3127,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X31)))) | s(bool,'F_0') != s(bool,X33) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X33)))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f334,f262])).
fof(f3169,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK9(X0,X1,X2,bool))) )),
  inference(superposition,[],[f371,f262])).
fof(f3170,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK9(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK9(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f371,f262])).
fof(f3200,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f361,f328])).
fof(f3211,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f361,f328])).
fof(f3696,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f360,f328])).
fof(f3764,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f363,f328])).
fof(f5197,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5196,f328])).
fof(f5196,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f5193,f328])).
fof(f5193,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1))),s('type.num.num',X2))))) )),
  inference(superposition,[],[f265,f328])).
fof(f5281,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f328])).
fof(f5292,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f362,f328])).
fof(f5361,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X8))),s('type.num.num',X9))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))) )),
  inference(superposition,[],[f372,f262])).
fof(f5581,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X10))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X10))),s('type.num.num',X9))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))) )),
  inference(superposition,[],[f373,f262])).
fof(f8057,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)),'type.num.num'))) )),
  inference(superposition,[],[f1482,f328])).
fof(f8102,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f8080,f328])).
fof(f8080,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X18)))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f328])).
fof(f8235,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8204,f328])).
fof(f8204,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))))) )),
  inference(superposition,[],[f2059,f328])).
fof(f8439,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f8413,f328])).
fof(f8413,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X18)))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f328])).
fof(f8555,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8529,f328])).
fof(f8529,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))))) )),
  inference(superposition,[],[f2116,f328])).
fof(f8850,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f8827,f328])).
fof(f8827,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X18)))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f328])).
fof(f8897,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8872,f328])).
fof(f8872,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X17),s('type.num.num',X18)))))))) )),
  inference(superposition,[],[f2788,f328])).
fof(f11830,plain,(
  ( ! [X39,X41,X40] : (s('type.num.num',X40) != s('type.num.num',X41) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X39),s('type.num.num',X40)))) )),
  inference(superposition,[],[f2607,f328])).
fof(f12180,plain,(
  ( ! [X35,X36,X34] : (s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X34),s(bool,X35)))) )),
  inference(superposition,[],[f577,f328])).
fof(f12217,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X25),s(bool,X26))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f577,f328])).
fof(f12480,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,'T_0') != s(bool,f(s(X190,sK9(X191,X192,bool,X190)))) | s(fun(X190,bool),X191) = s(fun(X190,bool),X192) | s(bool,X193) = s(bool,g(s(X190,sK9(X191,X192,bool,X190)))) | s(bool,'T_0') = s(bool,X193)) )),
  inference(superposition,[],[f371,f577])).
fof(f12309,plain,(
  ( ! [X202,X200,X199,X201] : (s(bool,X202) != s(bool,f(s(X199,sK9(X200,X201,bool,X199)))) | s(fun(X199,bool),X200) = s(fun(X199,bool),X201) | s(bool,'T_0') = s(bool,X202) | s(bool,'T_0') = s(bool,g(s(X199,sK9(X200,X201,bool,X199))))) )),
  inference(superposition,[],[f371,f577])).
fof(f357,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f233])).
fof(f2107,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f2086,f257])).
fof(f2086,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f343,f257])).
fof(f2108,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f2087,f258])).
fof(f2087,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f343,f258])).
fof(f2109,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num',X5))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f2088,f259])).
fof(f2088,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f343,f259])).
fof(f2115,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num',X18))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f2093,f329])).
fof(f2093,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))))) )),
  inference(superposition,[],[f343,f329])).
fof(f2117,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f2095,f257])).
fof(f2095,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f343,f257])).
fof(f2118,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f2096,f258])).
fof(f2096,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f343,f258])).
fof(f2119,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f2097,f259])).
fof(f2097,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X5)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f343,f259])).
fof(f2124,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f2102,f329])).
fof(f2102,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X18)))) | s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20)))) )),
  inference(superposition,[],[f343,f329])).
fof(f2770,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f2769,f1696])).
fof(f2769,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f2747,f336])).
fof(f2747,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f427,f258])).
fof(f2774,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),X6)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f2773,f257])).
fof(f2773,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),X6)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f2749,f336])).
fof(f2749,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),X6)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))))))) )),
  inference(superposition,[],[f427,f257])).
fof(f2777,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f2751,f259])).
fof(f2751,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f427,f259])).
fof(f2784,plain,(
  ( ! [X23,X21,X22] : (s('type.num.num',X23) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)),X23)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X23))))) )),
  inference(forward_demodulation,[],[f2756,f329])).
fof(f2756,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X23)))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)),X23)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)))))))) )),
  inference(superposition,[],[f427,f329])).
fof(f2785,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f2757,f258])).
fof(f2757,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f427,f258])).
fof(f2787,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X6,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f2759,f257])).
fof(f2759,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X5)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X6,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f427,f257])).
fof(f2789,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X9,'const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f2761,f259])).
fof(f2761,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X9,'const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f427,f259])).
fof(f2794,plain,(
  ( ! [X23,X21,X22] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X23,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f2766,f329])).
fof(f2766,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X21)))) | s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X23,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23)))))) )),
  inference(superposition,[],[f427,f329])).
fof(f10948,plain,(
  ( ! [X59,X57,X58] : (s('type.num.num',X57) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X59,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X58)))),s('type.num.num',X59))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X59),s('type.num.num',X57))))) )),
  inference(forward_demodulation,[],[f10769,f2612])).
fof(f10769,plain,(
  ( ! [X59,X57,X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X59),s('type.num.num',X57)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X58))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X59,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X58)))),s('type.num.num',X59)))) )),
  inference(superposition,[],[f343,f2612])).
fof(f10949,plain,(
  ( ! [X61,X62,X60] : (s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num',X61)),X62)),s('type.num.num',X60))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num',X62))))) )),
  inference(forward_demodulation,[],[f10770,f2612])).
fof(f10770,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num',X62)))) | s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num',X61)),X62)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num',X61)))))) )),
  inference(superposition,[],[f343,f2612])).
fof(f10984,plain,(
  ( ! [X225,X226,X224] : (s('type.num.num',X224) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X226,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))),s('type.num.num',X225)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X226))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X226),s('type.num.num',X224))))) )),
  inference(forward_demodulation,[],[f10819,f2612])).
fof(f10819,plain,(
  ( ! [X225,X226,X224] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X226),s('type.num.num',X224)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))),s('type.num.num',X225))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X226,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))),s('type.num.num',X225)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X226)))))) )),
  inference(superposition,[],[f427,f2612])).
fof(f10985,plain,(
  ( ! [X229,X227,X228] : (s('type.num.num',X229) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num',X228)),X229)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X227))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X227),s('type.num.num',X229))))) )),
  inference(forward_demodulation,[],[f10820,f2612])).
fof(f10820,plain,(
  ( ! [X229,X227,X228] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X227),s('type.num.num',X229)))) | s('type.num.num',X229) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num',X228)),X229)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num',X228)))))))) )),
  inference(superposition,[],[f427,f2612])).
fof(f12792,plain,(
  ( ! [X52,X50,X51] : (s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X50,X51)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) | s(bool,X52) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X50),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f12430,f253])).
fof(f12430,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'T_0')) | s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X50,X51)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) | s(bool,X52) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X50),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f427,f577])).
fof(f12793,plain,(
  ( ! [X54,X55,X53] : (s('type.num.num',X54) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X53,X54)),s('type.num.num',X53))) | s(bool,X55) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num',X54))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f12431,f253])).
fof(f12431,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s('type.num.num',X54) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X53,X54)),s('type.num.num',X53))) | s(bool,X55) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num',X54))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f343,f577])).
fof(f12794,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num',X57))) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f12432,f253])).
fof(f12432,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num',X57))) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f359,f577])).
fof(f12795,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))),s('type.num.num',X60)))) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X59),s('type.num.num',X60))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f12433,f253])).
fof(f12433,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))),s('type.num.num',X60)))) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X59),s('type.num.num',X60))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f340,f577])).
fof(f12796,plain,(
  ( ! [X64,X62,X63] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num',X63)))) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f12434,f253])).
fof(f12434,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num',X63)))) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f351,f577])).
fof(f12797,plain,(
  ( ! [X66,X67,X65] : (s('type.num.num',X65) = s('type.num.num',X66) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num',X66)))) | s(bool,X67) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f12435,f253])).
fof(f12435,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,'T_0')) | s('type.num.num',X65) = s('type.num.num',X66) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num',X66)))) | s(bool,X67) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f357,f577])).
fof(f12806,plain,(
  ( ! [X103,X101,X102] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num',X102)))) | s('type.num.num',X101) = s('type.num.num',X102) | s(bool,X103) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num',X102))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(subsumption_resolution,[],[f12449,f253])).
fof(f12449,plain,(
  ( ! [X103,X101,X102] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num',X102)))) | s('type.num.num',X101) = s('type.num.num',X102) | s(bool,X103) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num',X102))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f350,f577])).
fof(f1700,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)))) )),
  inference(superposition,[],[f358,f336])).
fof(f1772,plain,(
  ( ! [X52,X50,X51] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))))))))) )),
  inference(forward_demodulation,[],[f1717,f339])).
fof(f1717,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))))))) )),
  inference(superposition,[],[f340,f336])).
fof(f2122,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))))))) )),
  inference(forward_demodulation,[],[f2100,f336])).
fof(f2100,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14)))) )),
  inference(superposition,[],[f343,f336])).
fof(f2271,plain,(
  ( ! [X52,X50,X51] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X52,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))),s('type.num.num',X51)))),s('type.num.num',X52))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))))))))) )),
  inference(forward_demodulation,[],[f2212,f425])).
fof(f2212,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))),s('type.num.num',X51))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X52,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))),s('type.num.num',X51)))),s('type.num.num',X52)))) )),
  inference(superposition,[],[f343,f425])).
fof(f2286,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X99)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.num.SUC_1'(s('type.num.num',X99))))))))) )),
  inference(forward_demodulation,[],[f2285,f425])).
fof(f2285,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X99)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.num.SUC_1'(s('type.num.num',X99))))))))) )),
  inference(forward_demodulation,[],[f2228,f336])).
fof(f2228,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.num.SUC_1'(s('type.num.num',X99)))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))),s('type.num.num',X99))))))))) )),
  inference(superposition,[],[f359,f425])).
fof(f2786,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X4,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) )),
  inference(forward_demodulation,[],[f2758,f425])).
fof(f2758,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X4,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f427,f425])).
fof(f2792,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X17,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))))))) )),
  inference(forward_demodulation,[],[f2764,f336])).
fof(f2764,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X17,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) )),
  inference(superposition,[],[f427,f336])).
fof(f3061,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f357,f336])).
fof(f3089,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))))) )),
  inference(forward_demodulation,[],[f3088,f425])).
fof(f3088,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))))))) )),
  inference(forward_demodulation,[],[f3087,f425])).
fof(f3087,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))))))) )),
  inference(forward_demodulation,[],[f3051,f336])).
fof(f3051,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f357,f425])).
fof(f5559,plain,(
  ( ! [X257,X259,X256,X258] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X256),s('type.num.num',X257))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X259,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X256))),s('type.num.num',X257)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X259))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X259),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X256),s('type.num.num',X257))))))))) )),
  inference(forward_demodulation,[],[f5465,f372])).
fof(f5465,plain,(
  ( ! [X257,X259,X256,X258] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X259),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X256),s('type.num.num',X257)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X256))),s('type.num.num',X257))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X259,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X256))),s('type.num.num',X257)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X259)))))) )),
  inference(superposition,[],[f427,f372])).
fof(f5519,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X72,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))),s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X69))),s('type.num.num',X70)))))),s('type.num.num',X72))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70))))))))) )),
  inference(forward_demodulation,[],[f5421,f372])).
fof(f5421,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))),s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X69))),s('type.num.num',X70))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X72,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))),s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X69))),s('type.num.num',X70)))))),s('type.num.num',X72)))) )),
  inference(superposition,[],[f343,f372])).
fof(f5787,plain,(
  ( ! [X273,X275,X276,X274] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X276,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X275))),s('type.num.num',X274)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X276))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275))))))) )),
  inference(forward_demodulation,[],[f5693,f373])).
fof(f5693,plain,(
  ( ! [X273,X275,X276,X274] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X275))),s('type.num.num',X274))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X276,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X275))),s('type.num.num',X274)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X276)))))) )),
  inference(superposition,[],[f427,f373])).
fof(f5747,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X74,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X73))),s('type.num.num',X72)))))),s('type.num.num',X74))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73))))))) )),
  inference(forward_demodulation,[],[f5646,f373])).
fof(f5646,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X73))),s('type.num.num',X72))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X74,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X73))),s('type.num.num',X72)))))),s('type.num.num',X74)))) )),
  inference(superposition,[],[f343,f373])).
fof(f11454,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11344,f7231])).
fof(f11344,plain,(
  ( ! [X149,X148] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) )),
  inference(superposition,[],[f427,f7231])).
fof(f11414,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11294,f7231])).
fof(f11294,plain,(
  ( ! [X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) )),
  inference(superposition,[],[f343,f7231])).
fof(f11217,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X148))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X148))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X148))))))))) )),
  inference(forward_demodulation,[],[f11107,f7230])).
fof(f11107,plain,(
  ( ! [X149,X148] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X148)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X148))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X148))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) )),
  inference(superposition,[],[f427,f7230])).
fof(f11177,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X31))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X31))))))))) )),
  inference(forward_demodulation,[],[f11057,f7230])).
fof(f11057,plain,(
  ( ! [X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X31)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X31))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X31))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) )),
  inference(superposition,[],[f343,f7230])).
fof(f358,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f233])).
fof(f9166,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X36)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))))))) )),
  inference(forward_demodulation,[],[f9165,f258])).
fof(f9165,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))))))) )),
  inference(forward_demodulation,[],[f9044,f1955])).
fof(f9044,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f340,f1696])).
fof(f9171,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X47,'const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X47))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))))) )),
  inference(forward_demodulation,[],[f9049,f1696])).
fof(f9049,plain,(
  ( ! [X47,X46] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X46)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X47,'const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X47)))) )),
  inference(superposition,[],[f343,f1696])).
fof(f9212,plain,(
  ( ! [X163,X164] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X163))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X164,'const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X164))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X164),s('type.num.num','const.num.SUC_1'(s('type.num.num',X163))))))) )),
  inference(forward_demodulation,[],[f9099,f1696])).
fof(f9099,plain,(
  ( ! [X163,X164] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X164),s('type.num.num','const.num.SUC_1'(s('type.num.num',X163)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X164,'const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X164)))))) )),
  inference(superposition,[],[f427,f1696])).
fof(f5930,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(unit_resulting_resolution,[],[f1421,f359])).
fof(f7958,plain,(
  ( ! [X82] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X82,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X82))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f7861,f1694])).
fof(f7861,plain,(
  ( ! [X82] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X82,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X82)))))) )),
  inference(superposition,[],[f427,f1694])).
fof(f7919,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X15,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f7811,f1694])).
fof(f7811,plain,(
  ( ! [X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X15,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X15)))) )),
  inference(superposition,[],[f343,f1694])).
fof(f7914,plain,(
  ( ! [X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f7913,f252])).
fof(f7913,plain,(
  ( ! [X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f7806,f1955])).
fof(f7806,plain,(
  ( ! [X10] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) )),
  inference(superposition,[],[f340,f1694])).
fof(f2791,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X14,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))))))) )),
  inference(forward_demodulation,[],[f2763,f337])).
fof(f2763,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X14,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) )),
  inference(superposition,[],[f427,f337])).
fof(f2121,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f2099,f337])).
fof(f2099,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11)))) )),
  inference(superposition,[],[f343,f337])).
fof(f2116,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f2094,f252])).
fof(f2094,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f343,f252])).
fof(f8532,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8516,f258])).
fof(f8516,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f2116,f258])).
fof(f8534,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8518,f257])).
fof(f8518,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f2116,f257])).
fof(f8542,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X6))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8522,f259])).
fof(f8522,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f2116,f259])).
fof(f8556,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X19))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8530,f329])).
fof(f8530,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))))) )),
  inference(superposition,[],[f2116,f329])).
fof(f8876,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8875,f1696])).
fof(f8875,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8859,f336])).
fof(f8859,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f2788,f258])).
fof(f8880,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8879,f257])).
fof(f8879,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8861,f336])).
fof(f8861,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f2788,f257])).
fof(f8884,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8865,f259])).
fof(f8865,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f2788,f259])).
fof(f8898,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8873,f329])).
fof(f8873,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))))))) )),
  inference(superposition,[],[f2788,f329])).
fof(f10990,plain,(
  ( ! [X300,X299] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))),s('type.num.num',X300)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X299))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f10847,f2612])).
fof(f10847,plain,(
  ( ! [X300,X299] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))),s('type.num.num',X300)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))),s('type.num.num',X300)))))) )),
  inference(superposition,[],[f2116,f2612])).
fof(f10994,plain,(
  ( ! [X310,X309] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num',X310)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X309))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X309),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f10852,f2612])).
fof(f10852,plain,(
  ( ! [X310,X309] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X309),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num',X310)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num',X310)))))))) )),
  inference(superposition,[],[f2788,f2612])).
fof(f12798,plain,(
  ( ! [X76,X75] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X75,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75))))) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X75),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f12439,f253])).
fof(f12439,plain,(
  ( ! [X76,X75] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X75,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75))))) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X75),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f2788,f577])).
fof(f12799,plain,(
  ( ! [X78,X77] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X77,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X77))) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f12440,f253])).
fof(f12440,plain,(
  ( ! [X78,X77] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X77,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X77))) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f2116,f577])).
fof(f2939,plain,(
  ( ! [X37] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X37,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2884,f2569])).
fof(f2884,plain,(
  ( ! [X37] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X37,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37)))))) )),
  inference(superposition,[],[f427,f2569])).
fof(f2919,plain,(
  ( ! [X10] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2860,f2569])).
fof(f2860,plain,(
  ( ! [X10] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f343,f2569])).
fof(f2782,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))),X17)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))),s('type.num.num',X17))))) )),
  inference(forward_demodulation,[],[f2781,f336])).
fof(f2781,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))),X17)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))),s('type.num.num',X17))))) )),
  inference(forward_demodulation,[],[f2754,f336])).
fof(f2754,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))),s('type.num.num',X17)))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))),X17)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))))))) )),
  inference(superposition,[],[f427,f336])).
fof(f2772,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f2771,f425])).
fof(f2771,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f2748,f336])).
fof(f2748,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)),X4)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f427,f425])).
fof(f2272,plain,(
  ( ! [X54,X55,X53] : (s('type.num.num',X55) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num',X54)),X55)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))),s('type.num.num',X55))))) )),
  inference(forward_demodulation,[],[f2213,f425])).
fof(f2213,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))),s('type.num.num',X55)))) | s('type.num.num',X55) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num',X54)),X55)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num',X54)))))) )),
  inference(superposition,[],[f343,f425])).
fof(f2267,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))))),s('type.num.num',X40)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f2266,f425])).
fof(f2266,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))),s('type.num.num',X40)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f2208,f336])).
fof(f2208,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))),s('type.num.num',X40)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num',X39))))),s('type.num.num',X40))))) )),
  inference(superposition,[],[f340,f425])).
fof(f2113,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f2091,f336])).
fof(f2091,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))),s('type.num.num',X14)))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) )),
  inference(superposition,[],[f343,f336])).
fof(f8883,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8882,f336])).
fof(f8882,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8864,f336])).
fof(f8864,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))))) )),
  inference(superposition,[],[f2788,f336])).
fof(f8878,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8877,f425])).
fof(f8877,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8860,f336])).
fof(f8860,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))))))) )),
  inference(superposition,[],[f2788,f425])).
fof(f8541,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8521,f336])).
fof(f8521,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) )),
  inference(superposition,[],[f2116,f336])).
fof(f8533,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8517,f425])).
fof(f8517,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f2116,f425])).
fof(f5561,plain,(
  ( ! [X261,X263,X260,X262] : (s('type.num.num',X263) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num',X261))),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))),X263)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261))))),s('type.num.num',X263))))) )),
  inference(forward_demodulation,[],[f5560,f336])).
fof(f5560,plain,(
  ( ! [X261,X263,X260,X262] : (s('type.num.num',X263) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num',X261))),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))),X263)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261))))),s('type.num.num',X263))))) )),
  inference(forward_demodulation,[],[f5466,f372])).
fof(f5466,plain,(
  ( ! [X261,X263,X260,X262] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261))))),s('type.num.num',X263)))) | s('type.num.num',X263) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num',X261))),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))),X263)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num',X261))),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))))))))) )),
  inference(superposition,[],[f427,f372])).
fof(f5520,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.num.num',X76) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X74))),s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X73))),s('type.num.num',X74)))),X76)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X73),s('type.num.num',X74))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X73),s('type.num.num',X74))))),s('type.num.num',X76))))) )),
  inference(forward_demodulation,[],[f5422,f372])).
fof(f5422,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X73),s('type.num.num',X74))))),s('type.num.num',X76)))) | s('type.num.num',X76) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X74))),s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X73))),s('type.num.num',X74)))),X76)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X74))),s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X73))),s('type.num.num',X74)))))))) )),
  inference(superposition,[],[f343,f372])).
fof(f8894,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8893,f336])).
fof(f8893,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8870,f372])).
fof(f8870,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))))))) )),
  inference(superposition,[],[f2788,f372])).
fof(f8553,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8527,f372])).
fof(f8527,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f2116,f372])).
fof(f5970,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))) )),
  inference(superposition,[],[f1421,f336])).
fof(f5720,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f5719,f373])).
fof(f5719,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f5574,f336])).
fof(f5574,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))))))) )),
  inference(unit_resulting_resolution,[],[f373,f358])).
fof(f5789,plain,(
  ( ! [X280,X277,X279,X278] : (s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))),X280)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X279))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279))),s('type.num.num',X280))))) )),
  inference(forward_demodulation,[],[f5788,f336])).
fof(f5788,plain,(
  ( ! [X280,X277,X279,X278] : (s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))),X280)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279))),s('type.num.num',X280))))) )),
  inference(forward_demodulation,[],[f5694,f373])).
fof(f5694,plain,(
  ( ! [X280,X277,X279,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279))),s('type.num.num',X280)))) | s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))),X280)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))))))))) )),
  inference(superposition,[],[f427,f373])).
fof(f5748,plain,(
  ( ! [X78,X76,X77,X75] : (s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.num.num',X76)))),X78)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77))),s('type.num.num',X78))))) )),
  inference(forward_demodulation,[],[f5647,f373])).
fof(f5647,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77))),s('type.num.num',X78)))) | s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.num.num',X76)))),X78)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.num.num',X76)))))))) )),
  inference(superposition,[],[f343,f373])).
fof(f8896,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8895,f336])).
fof(f8895,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8871,f373])).
fof(f8871,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))))))) )),
  inference(superposition,[],[f2788,f373])).
fof(f8554,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8528,f373])).
fof(f8528,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))))) )),
  inference(superposition,[],[f2116,f373])).
fof(f11456,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3))),s('type.num.num',X151))))) )),
  inference(forward_demodulation,[],[f11455,f336])).
fof(f11455,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3))),s('type.num.num',X151))))) )),
  inference(forward_demodulation,[],[f11345,f7231])).
fof(f11345,plain,(
  ( ! [X151,X150] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3))),s('type.num.num',X151)))) | s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))))))))) )),
  inference(superposition,[],[f427,f7231])).
fof(f11415,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3))),s('type.num.num',X34))))) )),
  inference(forward_demodulation,[],[f11295,f7231])).
fof(f11295,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))))))) )),
  inference(superposition,[],[f343,f7231])).
fof(f11467,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11466,f336])).
fof(f11466,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11379,f7231])).
fof(f11379,plain,(
  ( ! [X204] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))))))))) )),
  inference(superposition,[],[f2788,f7231])).
fof(f11462,plain,(
  ( ! [X195] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11372,f7231])).
fof(f11372,plain,(
  ( ! [X195] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))))))) )),
  inference(superposition,[],[f2116,f7231])).
fof(f11219,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X150))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150))))),s('type.num.num',X151))))) )),
  inference(forward_demodulation,[],[f11218,f336])).
fof(f11218,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X150))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150))))),s('type.num.num',X151))))) )),
  inference(forward_demodulation,[],[f11108,f7230])).
fof(f11108,plain,(
  ( ! [X151,X150] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150))))),s('type.num.num',X151)))) | s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X150))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X150))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))))))))) )),
  inference(superposition,[],[f427,f7230])).
fof(f11178,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X33))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X33))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X33))))),s('type.num.num',X34))))) )),
  inference(forward_demodulation,[],[f11058,f7230])).
fof(f11058,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X33))))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X33))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X33))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))))))) )),
  inference(superposition,[],[f343,f7230])).
fof(f11230,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X204))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11229,f336])).
fof(f11229,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X204))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11142,f7230])).
fof(f11142,plain,(
  ( ! [X204] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X204))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X204))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))))))))) )),
  inference(superposition,[],[f2788,f7230])).
fof(f11225,plain,(
  ( ! [X195] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X195))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X195))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X195))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11135,f7230])).
fof(f11135,plain,(
  ( ! [X195] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X195))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X195))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X195))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))))))) )),
  inference(superposition,[],[f2116,f7230])).
fof(f7960,plain,(
  ( ! [X83] : (s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X83)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X83))))) )),
  inference(forward_demodulation,[],[f7959,f7783])).
fof(f7959,plain,(
  ( ! [X83] : (s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X83)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X83))))) )),
  inference(forward_demodulation,[],[f7862,f336])).
fof(f7862,plain,(
  ( ! [X83] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X83)))) | s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X83)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) )),
  inference(superposition,[],[f427,f1694])).
fof(f7920,plain,(
  ( ! [X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X16)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X16))))) )),
  inference(forward_demodulation,[],[f7812,f1694])).
fof(f7812,plain,(
  ( ! [X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X16)))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X16)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) )),
  inference(superposition,[],[f343,f1694])).
fof(f9214,plain,(
  ( ! [X165,X166] : (s('type.num.num',X166) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X166)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))),s('type.num.num',X166))))) )),
  inference(forward_demodulation,[],[f9213,f9015])).
fof(f9213,plain,(
  ( ! [X165,X166] : (s('type.num.num',X166) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X166)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))),s('type.num.num',X166))))) )),
  inference(forward_demodulation,[],[f9100,f336])).
fof(f9100,plain,(
  ( ! [X165,X166] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165))),s('type.num.num',X166)))) | s('type.num.num',X166) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X166)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f427,f1696])).
fof(f9172,plain,(
  ( ! [X48,X49] : (s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X49)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))),s('type.num.num',X49))))) )),
  inference(forward_demodulation,[],[f9050,f1696])).
fof(f9050,plain,(
  ( ! [X48,X49] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))),s('type.num.num',X49)))) | s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X49)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f343,f1696])).
fof(f2689,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))) )),
  inference(superposition,[],[f350,f339])).
fof(f9223,plain,(
  ( ! [X214] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f9222,f9015])).
fof(f9222,plain,(
  ( ! [X214] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f9131,f336])).
fof(f9131,plain,(
  ( ! [X214] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f2788,f1696])).
fof(f9219,plain,(
  ( ! [X209] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f9126,f1696])).
fof(f9126,plain,(
  ( ! [X209] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f2116,f1696])).
fof(f2111,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f2110,f258])).
fof(f2110,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f2089,f260])).
fof(f2089,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f343,f260])).
fof(f2705,plain,(
  ( ! [X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(forward_demodulation,[],[f2704,f260])).
fof(f2704,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) )),
  inference(forward_demodulation,[],[f2703,f260])).
fof(f2703,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) )),
  inference(subsumption_resolution,[],[f2702,f253])).
fof(f2702,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) )),
  inference(forward_demodulation,[],[f2672,f440])).
fof(f2672,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) )),
  inference(superposition,[],[f350,f260])).
fof(f2779,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),X11)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2778,f1696])).
fof(f2778,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),X11)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2752,f260])).
fof(f2752,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),X11)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f427,f260])).
fof(f6199,plain,(
  ( ! [X39,X40] : (s('type.num.num',X40) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num',X39)),X40)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f6198,f258])).
fof(f6198,plain,(
  ( ! [X39,X40] : (s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num',X39)),X40)),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f6075,f2566])).
fof(f6075,plain,(
  ( ! [X39,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40)))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num',X39)),X40)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num',X39)))))) )),
  inference(superposition,[],[f343,f2566])).
fof(f6249,plain,(
  ( ! [X156,X157] : (s('type.num.num',X157) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X156)),X157)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X157))))) )),
  inference(forward_demodulation,[],[f6248,f1696])).
fof(f6248,plain,(
  ( ! [X156,X157] : (s('type.num.num',X157) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X156)),X157)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X157))))) )),
  inference(forward_demodulation,[],[f6125,f2566])).
fof(f6125,plain,(
  ( ! [X156,X157] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X157)))) | s('type.num.num',X157) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X156)),X157)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X156)))))))) )),
  inference(superposition,[],[f427,f2566])).
fof(f8906,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f1697,f2705])).
fof(f8932,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f8912,f257])).
fof(f8912,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(unit_resulting_resolution,[],[f1129,f2705])).
fof(f2780,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f2753,f337])).
fof(f2753,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14)))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))))) )),
  inference(superposition,[],[f427,f337])).
fof(f2112,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2090,f337])).
fof(f2090,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f343,f337])).
fof(f8888,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8867,f337])).
fof(f8867,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))))) )),
  inference(superposition,[],[f2788,f337])).
fof(f8548,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8524,f337])).
fof(f8524,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) )),
  inference(superposition,[],[f2116,f337])).
fof(f2106,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num',sK1)))) )),
  inference(forward_demodulation,[],[f2085,f252])).
fof(f2085,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f343,f252])).
fof(f2776,plain,(
  ( ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X7)))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X7)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(forward_demodulation,[],[f2775,f1694])).
fof(f2775,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X7)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f2750,f336])).
fof(f2750,plain,(
  ( ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X7)))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X7)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) )),
  inference(superposition,[],[f427,f252])).
fof(f8418,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f8400,f258])).
fof(f8400,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f258])).
fof(f8420,plain,(
  ( ! [X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f8402,f257])).
fof(f8402,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f257])).
fof(f8430,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f8406,f259])).
fof(f8406,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f259])).
fof(f8440,plain,(
  ( ! [X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X19))))) )),
  inference(forward_demodulation,[],[f8414,f329])).
fof(f8414,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X19)))) | s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f329])).
fof(f8833,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f8814,f258])).
fof(f8814,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f258])).
fof(f8835,plain,(
  ( ! [X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f8816,f257])).
fof(f8816,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f257])).
fof(f8841,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f8820,f259])).
fof(f8820,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f259])).
fof(f8851,plain,(
  ( ! [X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X19))))) )),
  inference(forward_demodulation,[],[f8828,f329])).
fof(f8828,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X19)))) | s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f329])).
fof(f10989,plain,(
  ( ! [X298,X297] : (s('type.num.num',X297) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num',X298)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X297))))) )),
  inference(forward_demodulation,[],[f10846,f2612])).
fof(f10846,plain,(
  ( ! [X298,X297] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X297)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num',X298))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num',X298)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f2612])).
fof(f10993,plain,(
  ( ! [X308,X307] : (s('type.num.num',X307) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num',X308))),s('type.num.num',X308)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X307))))) )),
  inference(forward_demodulation,[],[f10851,f2612])).
fof(f10851,plain,(
  ( ! [X308,X307] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X307)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num',X308))),s('type.num.num',X308))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num',X308))),s('type.num.num',X308)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f2612])).
fof(f12800,plain,(
  ( ! [X81,X82] : (s('type.num.num',X81) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X81)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,X82) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f12442,f253])).
fof(f12442,plain,(
  ( ! [X81,X82] : (~p(s(bool,'T_0')) | s('type.num.num',X81) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X81)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s(bool,X82) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f2776,f577])).
fof(f12801,plain,(
  ( ! [X83,X84] : (s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X83)),s('type.num.num',sK1))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X83))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f12443,f253])).
fof(f12443,plain,(
  ( ! [X83,X84] : (~p(s(bool,'T_0')) | s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X83)),s('type.num.num',sK1))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X83))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f2106,f577])).
fof(f8840,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f8819,f336])).
fof(f8819,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f336])).
fof(f8834,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f8815,f425])).
fof(f8815,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f425])).
fof(f8429,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f8405,f336])).
fof(f8405,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f336])).
fof(f8419,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f8401,f425])).
fof(f8401,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f425])).
fof(f8848,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))))) )),
  inference(forward_demodulation,[],[f8825,f372])).
fof(f8825,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f372])).
fof(f8437,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))))) )),
  inference(forward_demodulation,[],[f8411,f372])).
fof(f8411,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f372])).
fof(f8849,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f8826,f373])).
fof(f8826,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f373])).
fof(f8438,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f8412,f373])).
fof(f8412,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f373])).
fof(f11465,plain,(
  ( ! [X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11378,f7231])).
fof(f11378,plain,(
  ( ! [X203] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f7231])).
fof(f11461,plain,(
  ( ! [X194] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11371,f7231])).
fof(f11371,plain,(
  ( ! [X194] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f7231])).
fof(f11228,plain,(
  ( ! [X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X203))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X203))))))))) )),
  inference(forward_demodulation,[],[f11141,f7230])).
fof(f11141,plain,(
  ( ! [X203] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X203)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X203))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X203))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f7230])).
fof(f11224,plain,(
  ( ! [X194] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X194))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X194))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X194))))))))) )),
  inference(forward_demodulation,[],[f11134,f7230])).
fof(f11134,plain,(
  ( ! [X194] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X194)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X194))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X194))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f7230])).
fof(f1631,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),
  inference(unit_resulting_resolution,[],[f1630,f359])).
fof(f9221,plain,(
  ( ! [X213] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X213))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X213))))))) )),
  inference(forward_demodulation,[],[f9130,f1696])).
fof(f9130,plain,(
  ( ! [X213] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X213)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f1696])).
fof(f9218,plain,(
  ( ! [X208] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X208))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X208))))))) )),
  inference(forward_demodulation,[],[f9125,f1696])).
fof(f9125,plain,(
  ( ! [X208] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X208)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f1696])).
fof(f8843,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f8822,f337])).
fof(f8822,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) )),
  inference(superposition,[],[f2776,f337])).
fof(f8432,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f8408,f337])).
fof(f8408,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2106,f337])).
fof(f2940,plain,(
  ( ! [X38] : (s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X38)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X38))))) )),
  inference(forward_demodulation,[],[f2885,f2569])).
fof(f2885,plain,(
  ( ! [X38] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X38)))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X38)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))))) )),
  inference(superposition,[],[f427,f2569])).
fof(f2920,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X11)),s('type.num.num',sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2861,f2569])).
fof(f2861,plain,(
  ( ! [X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f343,f2569])).
fof(f339,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X11,X10] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.LESS_EQ_MONO')).
fof(f375,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f239])).
fof(f239,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | ((s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) => (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12)))) => (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) <=> s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X11)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_EQ_SUB')).
fof(f377,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f241])).
fof(f379,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f241])).
fof(f1957,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f352,f339])).
fof(f1966,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22)))) | p(s(bool,X23)) | ~sP0(X23,X24,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))) )),
  inference(superposition,[],[f386,f339])).
fof(f1967,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',X26)))) | p(s(bool,X27)) | ~sP0(X27,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26)))),X28)) )),
  inference(superposition,[],[f387,f339])).
fof(f1982,plain,(
  ( ! [X33,X34,X32] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',X33))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X34,bool)) | p(s(bool,happ(s(fun(bool,bool),X34),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',X33))))))) )),
  inference(forward_demodulation,[],[f1969,f339])).
fof(f1969,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,happ(s(fun(bool,bool),X34),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',X33)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X34,bool))) )),
  inference(superposition,[],[f332,f339])).
fof(f2044,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num',X2)),'const.num.SUC_1'(s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f342,f339])).
fof(f2049,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f2025,f257])).
fof(f2025,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f342,f257])).
fof(f2050,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f2026,f258])).
fof(f2026,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f342,f258])).
fof(f2051,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f2027,f259])).
fof(f2027,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f342,f259])).
fof(f2058,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num',X18))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f2032,f329])).
fof(f2032,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))))) )),
  inference(superposition,[],[f342,f329])).
fof(f2060,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f2034,f257])).
fof(f2034,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f342,f257])).
fof(f2061,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f2035,f258])).
fof(f2035,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f342,f258])).
fof(f2062,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f2036,f259])).
fof(f2036,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X5)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f342,f259])).
fof(f2067,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f2041,f329])).
fof(f2041,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X18)))) | s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20)))) )),
  inference(superposition,[],[f342,f329])).
fof(f2996,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f2966,f337])).
fof(f2966,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f341,f339])).
fof(f3310,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f3309,f260])).
fof(f3309,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X21)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21)))) )),
  inference(subsumption_resolution,[],[f3308,f253])).
fof(f3308,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X21)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21)))) )),
  inference(forward_demodulation,[],[f3293,f440])).
fof(f3293,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X21)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21)))) )),
  inference(superposition,[],[f379,f260])).
fof(f3499,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f3446,f337])).
fof(f3446,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f375,f339])).
fof(f3645,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f3594,f337])).
fof(f3594,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f377,f339])).
fof(f3646,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10))) | s('type.num.num',X11) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(subsumption_resolution,[],[f3597,f255])).
fof(f3597,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10))) | s('type.num.num',X11) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(superposition,[],[f377,f262])).
fof(f5424,plain,(
  ( ! [X83,X81,X84,X82] : (s('type.num.num',X84) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num',X82))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X81),s('type.num.num',X82))),s('type.num.num',X83),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X81))),s('type.num.num',X82)))))) )),
  inference(superposition,[],[f345,f372])).
fof(f5442,plain,(
  ( ! [X156,X154,X155,X153] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X154))))),s('type.num.num',X156))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X153),s('type.num.num',X154))),s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X153))),s('type.num.num',X154))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X153),s('type.num.num',X154))),s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X153))),s('type.num.num',X154)))))) )),
  inference(superposition,[],[f360,f372])).
fof(f5444,plain,(
  ( ! [X163,X161,X164,X162] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X161),s('type.num.num',X162))))),s('type.num.num',X164))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X164) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X161),s('type.num.num',X162))),s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X161))),s('type.num.num',X162)))))) )),
  inference(superposition,[],[f361,f372])).
fof(f5445,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X168),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X165),s('type.num.num',X166))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X165),s('type.num.num',X166))),s('type.num.num',X167),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X165))),s('type.num.num',X166))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X168)) )),
  inference(superposition,[],[f361,f372])).
fof(f5446,plain,(
  ( ! [X171,X169,X172,X170] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X169),s('type.num.num',X170))))),s('type.num.num',X172))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X169),s('type.num.num',X170))),s('type.num.num',X171),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X169))),s('type.num.num',X170))))) | s('type.num.num',X172) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f372])).
fof(f5447,plain,(
  ( ! [X175,X173,X176,X174] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X173),s('type.num.num',X174))))))) | s('type.num.num',X176) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X173),s('type.num.num',X174))),s('type.num.num',X175),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num',X173))),s('type.num.num',X174)))))) )),
  inference(superposition,[],[f362,f372])).
fof(f5449,plain,(
  ( ! [X182,X184,X183,X181] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X181),s('type.num.num',X182))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X181))),s('type.num.num',X182))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X181))),s('type.num.num',X182)))))) )),
  inference(superposition,[],[f363,f372])).
fof(f5459,plain,(
  ( ! [X231,X229,X230,X228,X232] : (s('type.num.num',X231) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X228),s('type.num.num',X229))))),s('type.num.num',X232))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X231),s('type.num.num',X232))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X228),s('type.num.num',X229))),s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num',X228))),s('type.num.num',X229)))))) )),
  inference(superposition,[],[f378,f372])).
fof(f5508,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f5387,f425])).
fof(f5387,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f372,f425])).
fof(f5509,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f5388,f257])).
fof(f5388,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6)))))) )),
  inference(superposition,[],[f372,f257])).
fof(f5517,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X64,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X61),s('type.num.num',X62))),s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X61))),s('type.num.num',X62)))))),s('type.num.num',X64))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62))))))))) )),
  inference(forward_demodulation,[],[f5419,f372])).
fof(f5419,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X61),s('type.num.num',X62))),s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X61))),s('type.num.num',X62))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X64,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X61),s('type.num.num',X62))),s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X61))),s('type.num.num',X62)))))),s('type.num.num',X64)))) )),
  inference(superposition,[],[f342,f372])).
fof(f5518,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.num.num',X68) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X65))),s('type.num.num',X66)))),X68)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66))))),s('type.num.num',X68))))) )),
  inference(forward_demodulation,[],[f5420,f372])).
fof(f5420,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66))))),s('type.num.num',X68)))) | s('type.num.num',X68) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X65))),s('type.num.num',X66)))),X68)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X65))),s('type.num.num',X66)))))))) )),
  inference(superposition,[],[f342,f372])).
fof(f5529,plain,(
  ( ! [X111,X109,X112,X110] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X112))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X109),s('type.num.num',X110))))))) | s('type.num.num',X112) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X109),s('type.num.num',X110))),s('type.num.num',X111),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X109))),s('type.num.num',X110)))))) )),
  inference(forward_demodulation,[],[f5431,f336])).
fof(f5431,plain,(
  ( ! [X111,X109,X112,X110] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X112))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X109),s('type.num.num',X110))))))) | s('type.num.num',X112) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X109),s('type.num.num',X110))),s('type.num.num',X111),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X109))),s('type.num.num',X110)))))) )),
  inference(superposition,[],[f353,f372])).
fof(f5563,plain,(
  ( ! [X333,X331,X332,X330] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X330),s('type.num.num',X331))))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X330),s('type.num.num',X331))),s('type.num.num',X332),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num',X330))),s('type.num.num',X331)))),X333,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X333),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X330),s('type.num.num',X331))))))))) )),
  inference(forward_demodulation,[],[f5484,f372])).
fof(f5484,plain,(
  ( ! [X333,X331,X332,X330] : (p(s(bool,happ(s(fun('type.num.num',bool),X333),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X330),s('type.num.num',X331)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X330),s('type.num.num',X331))),s('type.num.num',X332),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num',X330))),s('type.num.num',X331))))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X330),s('type.num.num',X331))),s('type.num.num',X332),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num',X330))),s('type.num.num',X331)))),X333,'type.num.num'))) )),
  inference(superposition,[],[f332,f372])).
fof(f5649,plain,(
  ( ! [X85,X83,X86,X84] : (s('type.num.num',X86) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X83),s('type.num.num',X84))),s('type.num.num',X85))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X83),s('type.num.num',X84))),s('type.num.num',X85),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X85))),s('type.num.num',X84)))))) )),
  inference(superposition,[],[f345,f373])).
fof(f5667,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157))),s('type.num.num',X158))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X157))),s('type.num.num',X156))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X157))),s('type.num.num',X156)))))) )),
  inference(superposition,[],[f360,f373])).
fof(f5669,plain,(
  ( ! [X165,X163,X166,X164] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X163),s('type.num.num',X164))),s('type.num.num',X165))),s('type.num.num',X166))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X166) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X163),s('type.num.num',X164))),s('type.num.num',X165),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X165))),s('type.num.num',X164)))))) )),
  inference(superposition,[],[f361,f373])).
fof(f5670,plain,(
  ( ! [X167,X169,X170,X168] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X170),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X167),s('type.num.num',X168))),s('type.num.num',X169))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X167),s('type.num.num',X168))),s('type.num.num',X169),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X169))),s('type.num.num',X168))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X170)) )),
  inference(superposition,[],[f361,f373])).
fof(f5671,plain,(
  ( ! [X173,X171,X174,X172] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num',X173))),s('type.num.num',X174))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num',X173),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X173))),s('type.num.num',X172))))) | s('type.num.num',X174) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f373])).
fof(f5672,plain,(
  ( ! [X177,X175,X178,X176] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X178),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X175),s('type.num.num',X176))),s('type.num.num',X177))))) | s('type.num.num',X178) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X175),s('type.num.num',X176))),s('type.num.num',X177),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num',X177))),s('type.num.num',X176)))))) )),
  inference(superposition,[],[f362,f373])).
fof(f5674,plain,(
  ( ! [X185,X186,X184,X183] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X185))),s('type.num.num',X184))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X185))),s('type.num.num',X184)))))) )),
  inference(superposition,[],[f363,f373])).
fof(f5687,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s('type.num.num',X248) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X245),s('type.num.num',X246))),s('type.num.num',X247))),s('type.num.num',X249))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X248),s('type.num.num',X249))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X245),s('type.num.num',X246))),s('type.num.num',X247),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X245),s('type.num.num',X247))),s('type.num.num',X246)))))) )),
  inference(superposition,[],[f378,f373])).
fof(f5745,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X66,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X65))),s('type.num.num',X64)))))),s('type.num.num',X66))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65))))))) )),
  inference(forward_demodulation,[],[f5644,f373])).
fof(f5644,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X65))),s('type.num.num',X64))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X66,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X65))),s('type.num.num',X64)))))),s('type.num.num',X66)))) )),
  inference(superposition,[],[f342,f373])).
fof(f5746,plain,(
  ( ! [X70,X68,X69,X67] : (s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X69))),s('type.num.num',X68)))),X70)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X70))))) )),
  inference(forward_demodulation,[],[f5645,f373])).
fof(f5645,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X70)))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X69))),s('type.num.num',X68)))),X70)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X69))),s('type.num.num',X68)))))))) )),
  inference(superposition,[],[f342,f373])).
fof(f5757,plain,(
  ( ! [X111,X114,X112,X113] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X113))))) | s('type.num.num',X114) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num',X113),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X113))),s('type.num.num',X112)))))) )),
  inference(forward_demodulation,[],[f5656,f336])).
fof(f5656,plain,(
  ( ! [X111,X114,X112,X113] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X114))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num',X113))))) | s('type.num.num',X114) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num',X113),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X113))),s('type.num.num',X112)))))) )),
  inference(superposition,[],[f353,f373])).
fof(f5791,plain,(
  ( ! [X350,X349,X347,X348] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X347),s('type.num.num',X348))),s('type.num.num',X349))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X347),s('type.num.num',X348))),s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X347),s('type.num.num',X349))),s('type.num.num',X348)))),X350,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X350),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X347),s('type.num.num',X348))),s('type.num.num',X349))))))) )),
  inference(forward_demodulation,[],[f5712,f373])).
fof(f5712,plain,(
  ( ! [X350,X349,X347,X348] : (p(s(bool,happ(s(fun('type.num.num',bool),X350),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X347),s('type.num.num',X348))),s('type.num.num',X349)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X347),s('type.num.num',X348))),s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X347),s('type.num.num',X349))),s('type.num.num',X348))))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X347),s('type.num.num',X348))),s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X347),s('type.num.num',X349))),s('type.num.num',X348)))),X350,'type.num.num'))) )),
  inference(superposition,[],[f332,f373])).
fof(f8100,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))))) )),
  inference(forward_demodulation,[],[f8078,f372])).
fof(f8078,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f372])).
fof(f8101,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f8079,f373])).
fof(f8079,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f373])).
fof(f8233,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8202,f372])).
fof(f8202,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f2059,f372])).
fof(f8234,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8203,f373])).
fof(f8203,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))))) )),
  inference(superposition,[],[f2059,f373])).
fof(f9160,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f9025,f1696])).
fof(f9025,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11)))))) )),
  inference(superposition,[],[f373,f1696])).
fof(f10746,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(superposition,[],[f373,f2612])).
fof(f10946,plain,(
  ( ! [X52,X53,X51] : (s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X53,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52)))),s('type.num.num',X53))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X51))))) )),
  inference(forward_demodulation,[],[f10767,f2612])).
fof(f10767,plain,(
  ( ! [X52,X53,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X51)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X53,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52)))),s('type.num.num',X53)))) )),
  inference(superposition,[],[f342,f2612])).
fof(f10947,plain,(
  ( ! [X54,X56,X55] : (s('type.num.num',X56) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55)),X56)),s('type.num.num',X54))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num',X56))))) )),
  inference(forward_demodulation,[],[f10768,f2612])).
fof(f10768,plain,(
  ( ! [X54,X56,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num',X56)))) | s('type.num.num',X56) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55)),X56)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55)))))) )),
  inference(superposition,[],[f342,f2612])).
fof(f11826,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X27),s('type.num.num',X28))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X30),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))),s('type.num.num',X29),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X27))),s('type.num.num',X28)))))) )),
  inference(superposition,[],[f2607,f372])).
fof(f11827,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.num.num',X34) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X31),s('type.num.num',X32))),s('type.num.num',X33))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X32))),s('type.num.num',X33),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X33))),s('type.num.num',X32)))))) )),
  inference(superposition,[],[f2607,f373])).
fof(f12174,plain,(
  ( ! [X26,X27,X25] : (s(bool,X27) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',X26))) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26)))))) )),
  inference(superposition,[],[f577,f339])).
fof(f12213,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f577,f339])).
fof(f12278,plain,(
  ( ! [X116,X114,X115,X113] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X113),s('type.num.num',X114))))) = s('type.num.num','const.bool.COND_3'(s(bool,X115),s('type.num.num',X116),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num',X113))),s('type.num.num',X114))))) | s(bool,'T_0') = s(bool,X115) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X113),s('type.num.num',X114)))) )),
  inference(superposition,[],[f372,f577])).
fof(f12279,plain,(
  ( ! [X118,X120,X119,X117] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X117),s('type.num.num',X118))),s('type.num.num',X120))) = s('type.num.num','const.bool.COND_3'(s(bool,X119),s('type.num.num',X120),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num',X120))),s('type.num.num',X118))))) | s(bool,'T_0') = s(bool,X119) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X117),s('type.num.num',X118)))) )),
  inference(superposition,[],[f373,f577])).
fof(f12802,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X90),s('type.num.num',X91)))) | s('type.num.num',X89) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X90),s('type.num.num',X91))) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X89),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f12445,f253])).
fof(f12445,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X90),s('type.num.num',X91)))) | s('type.num.num',X89) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X90),s('type.num.num',X91))) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X89),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f379,f577])).
fof(f12804,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num',X96) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X95))),s('type.num.num',X95))) | s(bool,X97) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X95),s('type.num.num',X96))) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f12447,f253])).
fof(f12447,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'T_0')) | s('type.num.num',X96) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X96),s('type.num.num',X95))),s('type.num.num',X95))) | s(bool,X97) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X95),s('type.num.num',X96))) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f341,f577])).
fof(f12805,plain,(
  ( ! [X99,X100,X98] : (s('type.num.num',X99) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X98,X99)),s('type.num.num',X98))) | s(bool,X100) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X98),s('type.num.num',X99))) | s(bool,'T_0') = s(bool,X100)) )),
  inference(subsumption_resolution,[],[f12448,f253])).
fof(f12448,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,'T_0')) | s('type.num.num',X99) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X98,X99)),s('type.num.num',X98))) | s(bool,X100) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X98),s('type.num.num',X99))) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f342,f577])).
fof(f12807,plain,(
  ( ! [X109,X107,X110,X108] : (s('type.num.num',X109) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | s(bool,X110) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X107),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X110)) )),
  inference(forward_demodulation,[],[f12451,f329])).
fof(f12451,plain,(
  ( ! [X109,X107,X110,X108] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X109),s('type.num.num',X107))),s('type.num.num',X108))))) | s(bool,X110) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X107),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X110)) )),
  inference(superposition,[],[f372,f577])).
fof(f12808,plain,(
  ( ! [X111,X114,X112,X113] : (s('type.num.num',X113) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num',X113))) | s(bool,X114) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X111),s('type.num.num',X112))) | s(bool,'T_0') = s(bool,X114)) )),
  inference(forward_demodulation,[],[f12452,f329])).
fof(f12452,plain,(
  ( ! [X111,X114,X112,X113] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num',X113))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X113),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X113))),s('type.num.num',X112))))) | s(bool,X114) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X111),s('type.num.num',X112))) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f373,f577])).
fof(f12809,plain,(
  ( ! [X121,X122,X120,X119] : (s('type.num.num',X121) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X119))) | s('type.num.num',X120) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X119))) | s(bool,X122) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X119),s('type.num.num',X120))) | s(bool,'T_0') = s(bool,X122)) )),
  inference(subsumption_resolution,[],[f12454,f253])).
fof(f12454,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,'T_0')) | s('type.num.num',X121) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X119))) | s('type.num.num',X120) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X119))) | s(bool,X122) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X119),s('type.num.num',X120))) | s(bool,'T_0') = s(bool,X122)) )),
  inference(superposition,[],[f375,f577])).
fof(f6052,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f373,f2566])).
fof(f6053,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f372,f2566])).
fof(f1955,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f339,f336])).
fof(f2269,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X46,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45)))),s('type.num.num',X46))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))))))) )),
  inference(forward_demodulation,[],[f2210,f425])).
fof(f2210,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X46,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45)))),s('type.num.num',X46)))) )),
  inference(superposition,[],[f342,f425])).
fof(f2065,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))))))) )),
  inference(forward_demodulation,[],[f2039,f336])).
fof(f2039,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14)))) )),
  inference(superposition,[],[f342,f336])).
fof(f11412,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11292,f7231])).
fof(f11292,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) )),
  inference(superposition,[],[f342,f7231])).
fof(f11175,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X27))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X27))))))))) )),
  inference(forward_demodulation,[],[f11055,f7230])).
fof(f11055,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X27)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X27))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X27))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) )),
  inference(superposition,[],[f342,f7230])).
fof(f5932,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f1421,f351])).
fof(f7917,plain,(
  ( ! [X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f7809,f1694])).
fof(f7809,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X13)))) )),
  inference(superposition,[],[f342,f1694])).
fof(f9169,plain,(
  ( ! [X43,X42] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X43,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X43))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',X42))))))) )),
  inference(forward_demodulation,[],[f9047,f1696])).
fof(f9047,plain,(
  ( ! [X43,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',X42)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X43,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X43)))) )),
  inference(superposition,[],[f342,f1696])).
fof(f275,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f376,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f241])).
fof(f2063,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),s('type.num.num',X8))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2037,f260])).
fof(f2037,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f342,f260])).
fof(f3490,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X21) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f3489,f260])).
fof(f3489,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X21) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20)))) )),
  inference(forward_demodulation,[],[f3488,f260])).
fof(f3488,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20)))) )),
  inference(forward_demodulation,[],[f3439,f260])).
fof(f3439,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20)))) )),
  inference(superposition,[],[f375,f260])).
fof(f3556,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X9))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f3523,f255])).
fof(f3523,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,'F_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X9))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f376,f262])).
fof(f5510,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f5401,f259])).
fof(f5401,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f372,f259])).
fof(f5738,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f5624,f259])).
fof(f5624,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f373,f259])).
fof(f6193,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X34,'const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X33)))),s('type.num.num',X34))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f6072,f2566])).
fof(f6072,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X33))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X34,'const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X33)))),s('type.num.num',X34)))) )),
  inference(superposition,[],[f342,f2566])).
fof(f2064,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f2038,f337])).
fof(f2038,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11)))) )),
  inference(superposition,[],[f342,f337])).
fof(f2059,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f2033,f252])).
fof(f2033,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f342,f252])).
fof(f8208,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8191,f258])).
fof(f8191,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f2059,f258])).
fof(f8210,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8193,f257])).
fof(f8193,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f2059,f257])).
fof(f8220,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X6))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8197,f259])).
fof(f8197,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f2059,f259])).
fof(f8236,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X19))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8205,f329])).
fof(f8205,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))))) )),
  inference(superposition,[],[f2059,f329])).
fof(f10988,plain,(
  ( ! [X296,X295] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))),s('type.num.num',X296)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X295))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X295),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f10845,f2612])).
fof(f10845,plain,(
  ( ! [X296,X295] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X295),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))),s('type.num.num',X296)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))),s('type.num.num',X296)))))) )),
  inference(superposition,[],[f2059,f2612])).
fof(f12810,plain,(
  ( ! [X127,X128] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X127,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X127))) | s(bool,X128) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f12456,f253])).
fof(f12456,plain,(
  ( ! [X127,X128] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X127,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X127))) | s(bool,X128) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f2059,f577])).
fof(f2917,plain,(
  ( ! [X8] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X8))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2858,f2569])).
fof(f2858,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f342,f2569])).
fof(f2270,plain,(
  ( ! [X47,X48,X49] : (s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))),s('type.num.num',X48)),X49)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.num.num',X49))))) )),
  inference(forward_demodulation,[],[f2211,f425])).
fof(f2211,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.num.num',X49)))) | s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))),s('type.num.num',X48)),X49)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))),s('type.num.num',X48)))))) )),
  inference(superposition,[],[f342,f425])).
fof(f2056,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f2030,f336])).
fof(f2030,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))),s('type.num.num',X14)))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) )),
  inference(superposition,[],[f342,f336])).
fof(f1945,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f339,f336])).
fof(f8219,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8196,f336])).
fof(f8196,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) )),
  inference(superposition,[],[f2059,f336])).
fof(f8209,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8192,f425])).
fof(f8192,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f2059,f425])).
fof(f11413,plain,(
  ( ! [X30,X29] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3))),s('type.num.num',X30))))) )),
  inference(forward_demodulation,[],[f11293,f7231])).
fof(f11293,plain,(
  ( ! [X30,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3))),s('type.num.num',X30)))) | s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))))))) )),
  inference(superposition,[],[f342,f7231])).
fof(f11460,plain,(
  ( ! [X193] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11370,f7231])).
fof(f11370,plain,(
  ( ! [X193] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))))))) )),
  inference(superposition,[],[f2059,f7231])).
fof(f11176,plain,(
  ( ! [X30,X29] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X29))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X29))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X29))))),s('type.num.num',X30))))) )),
  inference(forward_demodulation,[],[f11056,f7230])).
fof(f11056,plain,(
  ( ! [X30,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X29))))),s('type.num.num',X30)))) | s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X29))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X29))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))))))) )),
  inference(superposition,[],[f342,f7230])).
fof(f11223,plain,(
  ( ! [X193] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X193))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X193))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X193))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f11133,f7230])).
fof(f11133,plain,(
  ( ! [X193] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X193))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X193))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X193))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))))))) )),
  inference(superposition,[],[f2059,f7230])).
fof(f9170,plain,(
  ( ! [X45,X44] : (s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X45)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45))))) )),
  inference(forward_demodulation,[],[f9048,f1696])).
fof(f9048,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45)))) | s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X45)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f342,f1696])).
fof(f5609,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X4))),s('type.num.num',X3))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X4))),s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f373,f425])).
fof(f9217,plain,(
  ( ! [X207] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X207))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X207))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f9124,f1696])).
fof(f9124,plain,(
  ( ! [X207] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X207))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f2059,f1696])).
fof(f9024,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X9))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X9))),s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f372,f1696])).
fof(f7918,plain,(
  ( ! [X14] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f7810,f1694])).
fof(f7810,plain,(
  ( ! [X14] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X14)))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) )),
  inference(superposition,[],[f342,f1694])).
fof(f7789,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f372,f1694])).
fof(f2055,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2029,f337])).
fof(f2029,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f342,f337])).
fof(f8224,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8199,f337])).
fof(f8199,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) )),
  inference(superposition,[],[f2059,f337])).
fof(f2048,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num',sK1)))) )),
  inference(forward_demodulation,[],[f2024,f252])).
fof(f2024,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f342,f252])).
fof(f8084,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f8067,f258])).
fof(f8067,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f258])).
fof(f8086,plain,(
  ( ! [X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f8069,f257])).
fof(f8069,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f257])).
fof(f8093,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f8073,f259])).
fof(f8073,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f259])).
fof(f8103,plain,(
  ( ! [X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X19))))) )),
  inference(forward_demodulation,[],[f8081,f329])).
fof(f8081,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X19)))) | s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f329])).
fof(f10987,plain,(
  ( ! [X294,X293] : (s('type.num.num',X293) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X294))),s('type.num.num',X294)))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X293))))) )),
  inference(forward_demodulation,[],[f10844,f2612])).
fof(f10844,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X293)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X294))),s('type.num.num',X294))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X294))),s('type.num.num',X294)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f2612])).
fof(f12811,plain,(
  ( ! [X140,X139] : (s('type.num.num',X139) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X139)),s('type.num.num',sK1))) | s(bool,X140) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X139))) | s(bool,'T_0') = s(bool,X140)) )),
  inference(subsumption_resolution,[],[f12462,f253])).
fof(f12462,plain,(
  ( ! [X140,X139] : (~p(s(bool,'T_0')) | s('type.num.num',X139) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X139)),s('type.num.num',sK1))) | s(bool,X140) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X139))) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f2048,f577])).
fof(f8092,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f8072,f336])).
fof(f8072,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f336])).
fof(f8085,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f8068,f425])).
fof(f8068,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f425])).
fof(f11459,plain,(
  ( ! [X192] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11369,f7231])).
fof(f11369,plain,(
  ( ! [X192] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f7231])).
fof(f11222,plain,(
  ( ! [X192] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X192))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X192))))))))) )),
  inference(forward_demodulation,[],[f11132,f7230])).
fof(f11132,plain,(
  ( ! [X192] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X192)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X192))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X192))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f7230])).
fof(f9216,plain,(
  ( ! [X206] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))))))) )),
  inference(forward_demodulation,[],[f9123,f1696])).
fof(f9123,plain,(
  ( ! [X206] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X206)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f1696])).
fof(f8095,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(forward_demodulation,[],[f8075,f337])).
fof(f8075,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2048,f337])).
fof(f2918,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X9)),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f2859,f2569])).
fof(f2859,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X9)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f342,f2569])).
fof(f7231,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f373,f252])).
fof(f7790,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f373,f1694])).
fof(f11297,plain,(
  ( ! [X37,X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X37)))))) )),
  inference(superposition,[],[f345,f7231])).
fof(f11315,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3))),s('type.num.num',X74))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73)))))) )),
  inference(superposition,[],[f360,f7231])).
fof(f11317,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X77))),s('type.num.num',sK3))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X77))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X77)))))) )),
  inference(superposition,[],[f361,f7231])).
fof(f11318,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X79))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X79))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) )),
  inference(superposition,[],[f361,f7231])).
fof(f11319,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X81))),s('type.num.num',sK3))),s('type.num.num',X82))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X81))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X81))))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f7231])).
fof(f11320,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X83))),s('type.num.num',sK3))))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X83))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X83)))))) )),
  inference(superposition,[],[f362,f7231])).
fof(f11322,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87)))))) )),
  inference(superposition,[],[f363,f7231])).
fof(f11338,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num',X133) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X132))),s('type.num.num',sK3))),s('type.num.num',X134))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X133),s('type.num.num',X134))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X132))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X132)))))) )),
  inference(superposition,[],[f378,f7231])).
fof(f11400,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f11252,f328])).
fof(f11252,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) )),
  inference(superposition,[],[f7231,f262])).
fof(f11424,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X51))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | s('type.num.num',X52) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X51))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X51)))))) )),
  inference(forward_demodulation,[],[f11304,f336])).
fof(f11304,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X51))),s('type.num.num',sK3))))) | s('type.num.num',X52) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X51))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X51)))))) )),
  inference(superposition,[],[f353,f7231])).
fof(f11470,plain,(
  ( ! [X216,X215] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X215))),s('type.num.num',sK3))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X215))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X215)))),X216,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X216),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X215))),s('type.num.num',sK3))))))) )),
  inference(forward_demodulation,[],[f11386,f7231])).
fof(f11386,plain,(
  ( ! [X216,X215] : (p(s(bool,happ(s(fun('type.num.num',bool),X216),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X215))),s('type.num.num',sK3)))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X215))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X215))))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X215))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X215)))),X216,'type.num.num'))) )),
  inference(superposition,[],[f332,f7231])).
fof(f11829,plain,(
  ( ! [X37,X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X37)))))) )),
  inference(superposition,[],[f2607,f7231])).
fof(f12292,plain,(
  ( ! [X149,X150] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X149))),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,X150),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X149))))) | s(bool,'T_0') = s(bool,X150) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X149)))) )),
  inference(superposition,[],[f7231,f577])).
fof(f7230,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f372,f252])).
fof(f11060,plain,(
  ( ! [X37,X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X37))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X37))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X37)))))) )),
  inference(superposition,[],[f345,f7230])).
fof(f11078,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X73))))),s('type.num.num',X74))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X73))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X73))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73)))))) )),
  inference(superposition,[],[f360,f7230])).
fof(f11080,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X77))))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X77))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X77)))))) )),
  inference(superposition,[],[f361,f7230])).
fof(f11081,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X79))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X79))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) )),
  inference(superposition,[],[f361,f7230])).
fof(f11082,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X81))))),s('type.num.num',X82))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X81))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X81))))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f7230])).
fof(f11083,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X83))))))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X83))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X83)))))) )),
  inference(superposition,[],[f362,f7230])).
fof(f11085,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X87))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X87))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X87))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87)))))) )),
  inference(superposition,[],[f363,f7230])).
fof(f11101,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num',X133) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X132))))),s('type.num.num',X134))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X133),s('type.num.num',X134))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X132))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X132)))))) )),
  inference(superposition,[],[f378,f7230])).
fof(f11162,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f11016,f328])).
fof(f11016,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0)))) )),
  inference(superposition,[],[f7230,f262])).
fof(f11187,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X51))))))) | s('type.num.num',X52) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X51))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X51)))))) )),
  inference(forward_demodulation,[],[f11067,f336])).
fof(f11067,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X51))))))) | s('type.num.num',X52) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X51))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X51)))))) )),
  inference(superposition,[],[f353,f7230])).
fof(f11233,plain,(
  ( ! [X215,X214] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X214))))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X214))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X214)))),X215,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X214))))))))) )),
  inference(forward_demodulation,[],[f11148,f7230])).
fof(f11148,plain,(
  ( ! [X215,X214] : (p(s(bool,happ(s(fun('type.num.num',bool),X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X214)))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X214))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X214))))) = s('type.num.num',sK5('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X214))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X214)))),X215,'type.num.num'))) )),
  inference(superposition,[],[f332,f7230])).
fof(f11828,plain,(
  ( ! [X35,X36] : (s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X35))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X35))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X35)))))) )),
  inference(superposition,[],[f2607,f7230])).
fof(f12294,plain,(
  ( ! [X152,X153] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X152))))) = s('type.num.num','const.bool.COND_3'(s(bool,X153),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X152))))) | s(bool,'T_0') = s(bool,X153) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X152)))) )),
  inference(superposition,[],[f7230,f577])).
fof(f11037,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK1))),s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f7230,f2566])).
fof(f265,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X0))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK4(X0))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X0)))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f181])).
fof(f181,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f155])).
fof(f155,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : ((p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) & ! [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) => p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) => ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X17] : ((p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.num.|48|_0')))) & ! [X11] : (p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num',X11)))) => p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))))) => ! [X11] : p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num',X11)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.num.INDUCTION')).
fof(f1483,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f1469,f257])).
fof(f1469,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2,'type.num.num'))) )),
  inference(superposition,[],[f332,f257])).
fof(f1484,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f1470,f258])).
fof(f1470,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4,'type.num.num'))) )),
  inference(superposition,[],[f332,f258])).
fof(f1485,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f1471,f259])).
fof(f1471,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',X5)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6,'type.num.num'))) )),
  inference(superposition,[],[f332,f259])).
fof(f5199,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num',X5)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5198,f329])).
fof(f5198,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5194,f329])).
fof(f5194,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))))))))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4))),s('type.num.num',X5))))) )),
  inference(superposition,[],[f265,f329])).
fof(f10997,plain,(
  ( ! [X325,X327,X326] : (s('type.num.num',X325) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X325),s('type.num.num',X326))),s('type.num.num',X326)),X327,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X327),s('type.num.num',X325))))) )),
  inference(forward_demodulation,[],[f10858,f2612])).
fof(f10858,plain,(
  ( ! [X325,X327,X326] : (p(s(bool,happ(s(fun('type.num.num',bool),X327),s('type.num.num',X325)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X325),s('type.num.num',X326))),s('type.num.num',X326))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X325),s('type.num.num',X326))),s('type.num.num',X326)),X327,'type.num.num'))) )),
  inference(superposition,[],[f332,f2612])).
fof(f12816,plain,(
  ( ! [X163,X161,X162] : (~p(s(bool,happ(s(fun('type.num.num',bool),X161),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X161))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X161),s('type.num.num',X162)))) | s(bool,X163) = s(bool,happ(s(fun('type.num.num',bool),X161),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X163)) )),
  inference(subsumption_resolution,[],[f12471,f253])).
fof(f12471,plain,(
  ( ! [X163,X161,X162] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X161),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X161))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X161),s('type.num.num',X162)))) | s(bool,X163) = s(bool,happ(s(fun('type.num.num',bool),X161),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X163)) )),
  inference(superposition,[],[f265,f577])).
fof(f2287,plain,(
  ( ! [X154,X152,X153] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num','const.num.SUC_1'(s('type.num.num',X153))))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X152))),s('type.num.num',X153)),X154,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X154),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num','const.num.SUC_1'(s('type.num.num',X153))))))))) )),
  inference(forward_demodulation,[],[f2247,f425])).
fof(f2247,plain,(
  ( ! [X154,X152,X153] : (p(s(bool,happ(s(fun('type.num.num',bool),X154),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num','const.num.SUC_1'(s('type.num.num',X153)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X152))),s('type.num.num',X153))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X152))),s('type.num.num',X153)),X154,'type.num.num'))) )),
  inference(superposition,[],[f332,f425])).
fof(f1787,plain,(
  ( ! [X151,X149,X150] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))))) = s('type.num.num',sK5('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X150)))),X151,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X151),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))))))))) )),
  inference(forward_demodulation,[],[f1751,f336])).
fof(f1751,plain,(
  ( ! [X151,X149,X150] : (p(s(bool,happ(s(fun('type.num.num',bool),X151),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',X150)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X150))))) = s('type.num.num',sK5('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X150)))),X151,'type.num.num'))) )),
  inference(superposition,[],[f332,f336])).
fof(f7964,plain,(
  ( ! [X103] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X103,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X103),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f7888,f1694])).
fof(f7888,plain,(
  ( ! [X103] : (p(s(bool,happ(s(fun('type.num.num',bool),X103),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X103,'type.num.num'))) )),
  inference(superposition,[],[f332,f1694])).
fof(f9227,plain,(
  ( ! [X225,X226] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X225))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',X225),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X226,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X226),s('type.num.num','const.num.SUC_1'(s('type.num.num',X225))))))) )),
  inference(forward_demodulation,[],[f9138,f1696])).
fof(f9138,plain,(
  ( ! [X225,X226] : (p(s(bool,happ(s(fun('type.num.num',bool),X226),s('type.num.num','const.num.SUC_1'(s('type.num.num',X225)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X225),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',X225),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X226,'type.num.num'))) )),
  inference(superposition,[],[f332,f1696])).
fof(f424,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK4(X0)))))) )),
  inference(condensation,[],[f264])).
fof(f264,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK4(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f182])).
fof(f1486,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1472,f260])).
fof(f1472,plain,(
  ( ! [X8,X7] : (p(s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8,'type.num.num'))) )),
  inference(superposition,[],[f332,f260])).
fof(f2136,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK4('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2133,f329])).
fof(f2133,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3))),s('type.num.num',sK4('const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3)))))))) )),
  inference(superposition,[],[f424,f329])).
fof(f6253,plain,(
  ( ! [X196,X197] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X196)),X197,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X197),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f6147,f2566])).
fof(f6147,plain,(
  ( ! [X196,X197] : (p(s(bool,happ(s(fun('type.num.num',bool),X197),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X196))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X196)),X197,'type.num.num'))) )),
  inference(superposition,[],[f332,f2566])).
fof(f12817,plain,(
  ( ! [X165,X164] : (p(s(bool,happ(s(fun('type.num.num',bool),X164),s('type.num.num',sK4(X164))))) | s(bool,X165) = s(bool,happ(s(fun('type.num.num',bool),X164),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X165)) )),
  inference(subsumption_resolution,[],[f12472,f253])).
fof(f12472,plain,(
  ( ! [X165,X164] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.num.num',bool),X164),s('type.num.num',sK4(X164))))) | s(bool,X165) = s(bool,happ(s(fun('type.num.num',bool),X164),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X165)) )),
  inference(superposition,[],[f424,f577])).
fof(f1920,plain,(
  ( ! [X123,X124,X122] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num',X123))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X122))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X123)))),X124,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X124),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num',X123))))))) )),
  inference(forward_demodulation,[],[f1894,f337])).
fof(f1894,plain,(
  ( ! [X123,X124,X122] : (p(s(bool,happ(s(fun('type.num.num',bool),X124),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X122),s('type.num.num',X123)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X122))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X123))))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X122))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X123)))),X124,'type.num.num'))) )),
  inference(superposition,[],[f332,f337])).
fof(f8060,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) )),
  inference(subsumption_resolution,[],[f8059,f255])).
fof(f8059,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f1482,f262])).
fof(f8058,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.num.num',bool),X2),s(fun('type.num.num',bool),X3)),'type.num.num'))) )),
  inference(superposition,[],[f1482,f329])).
fof(f1482,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0,'type.num.num'))) )),
  inference(forward_demodulation,[],[f1468,f252])).
fof(f1468,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0,'type.num.num'))) )),
  inference(superposition,[],[f332,f252])).
fof(f2941,plain,(
  ( ! [X52] : (s('type.num.num',sK2) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X52,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X52),s('type.num.num',sK2))))) )),
  inference(forward_demodulation,[],[f2902,f2569])).
fof(f2902,plain,(
  ( ! [X52] : (p(s(bool,happ(s(fun('type.num.num',bool),X52),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X52,'type.num.num'))) )),
  inference(superposition,[],[f332,f2569])).
fof(f332,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  ! [X0,X1,X2] : (((s(X0,X2) = s(X0,sK5(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2] : ((? [X4] : (s(X0,X2) = s(X0,X4) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : ((? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(ennf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X9] : ! [X18,X19] : (! [X6] : (s(X9,X6) = s(X9,X19) => p(s(bool,happ(s(fun(X9,bool),X18),s(X9,X6))))) <=> p(s(bool,happ(s(fun(X9,bool),X18),s(X9,X19)))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.bool.UNWIND_FORALL_THM2')).
fof(f333,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f334,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f1467,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(X4,X7) = s(X4,sK5(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))) )),
  inference(superposition,[],[f332,f329])).
fof(f1492,plain,(
  ( ! [X26,X24,X27,X25] : (s(X24,X25) = s(X24,sK5('const.bool.COND_3'(s(bool,'T_0'),s(X24,X25),s(X24,X26)),X27,X24)) | p(s(bool,happ(s(fun(X24,bool),X27),s(X24,X25))))) )),
  inference(forward_demodulation,[],[f1480,f329])).
fof(f1480,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,happ(s(fun(X24,bool),X27),s(X24,X25)))) | s(X24,'const.bool.COND_3'(s(bool,'T_0'),s(X24,X25),s(X24,X26))) = s(X24,sK5('const.bool.COND_3'(s(bool,'T_0'),s(X24,X25),s(X24,X26)),X27,X24))) )),
  inference(superposition,[],[f332,f329])).
fof(f2660,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | ~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK5(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4)))))) )),
  inference(forward_demodulation,[],[f2656,f329])).
fof(f2656,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK5(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))))) | p(s(bool,happ(s(fun(X4,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6))),s(X4,X7))))) )),
  inference(superposition,[],[f333,f329])).
fof(f12814,plain,(
  ( ! [X152,X151,X149,X150,X148] : (s(X148,X150) != s(X148,X151) | p(s(bool,happ(s(fun(X148,bool),X149),s(X148,X151)))) | s(bool,X152) = s(bool,happ(s(fun(X148,bool),X149),s(X148,X150))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(subsumption_resolution,[],[f12468,f253])).
fof(f12468,plain,(
  ( ! [X152,X151,X149,X150,X148] : (~p(s(bool,'T_0')) | s(X148,X150) != s(X148,X151) | p(s(bool,happ(s(fun(X148,bool),X149),s(X148,X151)))) | s(bool,X152) = s(bool,happ(s(fun(X148,bool),X149),s(X148,X150))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f334,f577])).
fof(f12815,plain,(
  ( ! [X158,X159,X157,X160] : (p(s(bool,happ(s(fun(X157,bool),X158),s(X157,X159)))) | s(bool,X160) = s(bool,happ(s(fun(X157,bool),X158),s(X157,sK5(X159,X158,X157)))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(subsumption_resolution,[],[f12470,f253])).
fof(f12470,plain,(
  ( ! [X158,X159,X157,X160] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X157,bool),X158),s(X157,X159)))) | s(bool,X160) = s(bool,happ(s(fun(X157,bool),X158),s(X157,sK5(X159,X158,X157)))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f333,f577])).
fof(f12303,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,happ(s(fun(bool,bool),X178),s(bool,X177)))) | s(bool,X176) != s(bool,X179) | p(s(bool,happ(s(fun(bool,bool),X178),s(bool,X179)))) | s(bool,'T_0') = s(bool,X177) | s(bool,'T_0') = s(bool,X176)) )),
  inference(superposition,[],[f334,f577])).
fof(f12304,plain,(
  ( ! [X182,X180,X181] : (p(s(bool,happ(s(fun(bool,bool),X182),s(bool,X181)))) | s(bool,X180) = s(bool,sK5(X180,X182,bool)) | s(bool,'T_0') = s(bool,X181) | s(bool,'T_0') = s(bool,X180)) )),
  inference(superposition,[],[f332,f577])).
fof(f12312,plain,(
  ( ! [X210,X211,X209] : (~p(s(bool,happ(s(fun(bool,bool),X210),s(bool,X211)))) | p(s(bool,happ(s(fun(bool,bool),X210),s(bool,X209)))) | s(bool,'T_0') = s(bool,X211) | s(bool,'T_0') = s(bool,sK5(X209,X210,bool))) )),
  inference(superposition,[],[f333,f577])).
fof(f12405,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X48)))) | s(bool,'T_0') != s(bool,X50) | p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X50)))) | s(bool,X48) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f334,f577])).
fof(f12406,plain,(
  ( ! [X54,X52,X53] : (p(s(bool,happ(s(fun(bool,bool),X53),s(bool,X52)))) | s(bool,'T_0') = s(bool,sK5('T_0',X53,bool)) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f332,f577])).
fof(f12474,plain,(
  ( ! [X171,X169,X170,X168] : (~p(s(bool,happ(s(fun(bool,bool),X169),s(bool,'T_0')))) | s(bool,X168) != s(bool,X170) | p(s(bool,happ(s(fun(bool,bool),X169),s(bool,X170)))) | s(bool,X168) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f334,f577])).
fof(f12483,plain,(
  ( ! [X202,X200,X201] : (~p(s(bool,happ(s(fun(bool,bool),X201),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X201),s(bool,X200)))) | s(bool,X202) = s(bool,sK5(X200,X201,bool)) | s(bool,'T_0') = s(bool,X202)) )),
  inference(superposition,[],[f333,f577])).
fof(f12475,plain,(
  ( ! [X173,X174,X172] : (p(s(bool,happ(s(fun(bool,bool),X173),s(bool,'T_0')))) | s(bool,X172) = s(bool,sK5(X172,X173,bool)) | s(bool,X172) = s(bool,X174) | s(bool,'T_0') = s(bool,X174)) )),
  inference(superposition,[],[f332,f577])).
fof(f1487,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X13,bool)) | p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f1475,f439])).
fof(f1475,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))) = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X13,bool))) )),
  inference(superposition,[],[f332,f439])).
fof(f1820,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f1803,f1282])).
fof(f1803,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X8,bool))) )),
  inference(superposition,[],[f332,f1282])).
fof(f1489,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)),X17,bool)) | p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f1477,f440])).
fof(f1477,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)),X17,bool))) )),
  inference(superposition,[],[f332,f440])).
fof(f12484,plain,(
  ( ! [X206,X204,X205,X203] : (s(X205,f(s(bool,'T_0'))) != s(X205,g(s(bool,'T_0'))) | s(fun(bool,X205),X203) = s(fun(bool,X205),X204) | s(bool,X206) = s(bool,sK9(X203,X204,X205,bool)) | s(bool,'T_0') = s(bool,X206)) )),
  inference(superposition,[],[f371,f577])).
fof(f12803,plain,(
  ( ! [X94,X93] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X93) | s(bool,X94) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X93),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f12446,f253])).
fof(f12446,plain,(
  ( ! [X94,X93] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X93) | s(bool,X94) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X93),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f274,f577])).
fof(f12791,plain,(
  ( ! [X26,X24,X23,X25] : (p(s(bool,X24)) | ~sP0(X24,X23,X25) | s(bool,X23) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f12420,f253])).
fof(f12420,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | p(s(bool,X24)) | ~sP0(X24,X23,X25) | s(bool,X23) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f387,f577])).
fof(f12790,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,X20)) | ~sP0(X20,X21,X19) | s(bool,X19) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f12419,f253])).
fof(f12419,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | ~sP0(X20,X21,X19) | s(bool,X19) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f386,f577])).
fof(f12789,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f12418,f253])).
fof(f12418,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f349,f577])).
fof(f12788,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f12414,f253])).
fof(f12414,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f270,f577])).
fof(f12393,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,X7) = s(X6,'const.bool.COND_3'(s(bool,X5),s(X6,X7),s(X6,X8))) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f329,f577])).
fof(f12392,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f266,f577])).
fof(f12313,plain,(
  ( ! [X212,X215,X213,X214] : (s(X214,f(s(bool,X215))) != s(X214,g(s(bool,X215))) | s(fun(bool,X214),X212) = s(fun(bool,X214),X213) | s(bool,'T_0') = s(bool,X215) | s(bool,'T_0') = s(bool,sK9(X212,X213,X214,bool))) )),
  inference(superposition,[],[f371,f577])).
fof(f12218,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,X30) = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X28),s(bool,X29))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f577,f329])).
fof(f12201,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f577,f577])).
fof(f12181,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X37),s(bool,X38)))) )),
  inference(superposition,[],[f577,f329])).
fof(f11831,plain,(
  ( ! [X43,X44,X42] : (s('type.num.num',X42) != s('type.num.num',X44) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(superposition,[],[f2607,f329])).
fof(f11823,plain,(
  ( ! [X23,X21,X22] : (s('type.num.num',X23) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num',X22))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))) )),
  inference(superposition,[],[f2607,f337])).
fof(f11822,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X18) != s('type.num.num',X20) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X19)))) )),
  inference(superposition,[],[f2607,f2612])).
fof(f11820,plain,(
  ( ! [X14,X15] : (s('type.num.num',X14) != s('type.num.num',X15) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2607,f259])).
fof(f11819,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12)))))) )),
  inference(superposition,[],[f2607,f336])).
fof(f11816,plain,(
  ( ! [X8,X7] : (s('type.num.num',X7) != s('type.num.num',X8) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2607,f257])).
fof(f11815,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f2607,f425])).
fof(f11814,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f2607,f1696])).
fof(f11813,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2607,f258])).
fof(f10813,plain,(
  ( ! [X204,X202,X205,X203] : (s('type.num.num',X204) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X202),s('type.num.num',X205))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X204),s('type.num.num',X205))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X202),s('type.num.num',X203))),s('type.num.num',X203)))) )),
  inference(superposition,[],[f378,f2612])).
fof(f10797,plain,(
  ( ! [X142,X143,X141] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X141))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X141),s('type.num.num',X142))),s('type.num.num',X142))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X141),s('type.num.num',X142))),s('type.num.num',X142)))) )),
  inference(superposition,[],[f363,f2612])).
fof(f10795,plain,(
  ( ! [X136,X135,X137] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num',X135))) | s('type.num.num',X137) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num',X136))),s('type.num.num',X136)))) )),
  inference(superposition,[],[f362,f2612])).
fof(f10794,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num',X134))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num',X133))),s('type.num.num',X133))) | s('type.num.num',X134) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f2612])).
fof(f10793,plain,(
  ( ! [X130,X131,X129] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X129))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num',X130))),s('type.num.num',X130))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X131)) )),
  inference(superposition,[],[f361,f2612])).
fof(f10792,plain,(
  ( ! [X127,X128,X126] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X128))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X128) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X127))),s('type.num.num',X127)))) )),
  inference(superposition,[],[f361,f2612])).
fof(f10790,plain,(
  ( ! [X121,X122,X120] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X122))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X121))),s('type.num.num',X121))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X121))),s('type.num.num',X121)))) )),
  inference(superposition,[],[f360,f2612])).
fof(f10779,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X87))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X89))) | s('type.num.num',X89) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88))),s('type.num.num',X88)))) )),
  inference(superposition,[],[f353,f2612])).
fof(f10772,plain,(
  ( ! [X68,X66,X67] : (s('type.num.num',X68) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',X66))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X67))),s('type.num.num',X67)))) )),
  inference(superposition,[],[f345,f2612])).
fof(f10611,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f10581,f329])).
fof(f10581,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X1))),s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f373,f1282])).
fof(f10610,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) )),
  inference(forward_demodulation,[],[f10580,f329])).
fof(f10580,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))),s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f372,f1282])).
fof(f10606,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),sK2)),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f10575,f253])).
fof(f10575,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),sK2)),s('type.num.num',sK1)))),
  inference(superposition,[],[f2048,f1282])).
fof(f10390,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl33),
  inference(forward_demodulation,[],[f10267,f329])).
fof(f10267,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num',X0))),s('type.num.num',sK1)))) ) | $spl33),
  inference(unit_resulting_resolution,[],[f329,f8216,f377])).
fof(f10277,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),X0,'T_0')) ) | $spl33),
  inference(unit_resulting_resolution,[],[f253,f8216,f386])).
fof(f10293,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),'T_0',X0)) ) | $spl33),
  inference(unit_resulting_resolution,[],[f253,f8216,f387])).
fof(f10309,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),'F_0')) ) | $spl33),
  inference(unit_resulting_resolution,[],[f255,f8216,f388])).
fof(f10326,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl33),
  inference(unit_resulting_resolution,[],[f255,f8216,f388])).
fof(f10327,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl33),
  inference(unit_resulting_resolution,[],[f8216,f8216,f388])).
fof(f10342,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl33),
  inference(unit_resulting_resolution,[],[f253,f8216,f415])).
fof(f10346,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl33),
  inference(unit_resulting_resolution,[],[f8216,f629])).
fof(f10347,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl33),
  inference(unit_resulting_resolution,[],[f8216,f630])).
fof(f361,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f235])).
fof(f362,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f235])).
fof(f363,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f235])).
fof(f364,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f235])).
fof(f365,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f235])).
fof(f3182,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f321,f321,f361])).
fof(f3191,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f361,f258])).
fof(f3193,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f361,f257])).
fof(f3195,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f361,f259])).
fof(f3196,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X12) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f361,f337])).
fof(f3201,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23)))) )),
  inference(superposition,[],[f361,f329])).
fof(f3202,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(superposition,[],[f361,f258])).
fof(f3204,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f361,f257])).
fof(f3206,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(superposition,[],[f361,f259])).
fof(f3207,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X12)) )),
  inference(superposition,[],[f361,f337])).
fof(f3212,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24)) )),
  inference(superposition,[],[f361,f329])).
fof(f3224,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)) )),
  inference(subsumption_resolution,[],[f3199,f321])).
fof(f3199,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) )),
  inference(superposition,[],[f361,f336])).
fof(f3228,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)) )),
  inference(subsumption_resolution,[],[f3210,f321])).
fof(f3210,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)) )),
  inference(superposition,[],[f361,f336])).
fof(f3229,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(subsumption_resolution,[],[f3214,f321])).
fof(f3214,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f361,f425])).
fof(f3687,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f360,f258])).
fof(f3689,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f360,f257])).
fof(f3691,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f360,f259])).
fof(f3697,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X24))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23)))) )),
  inference(superposition,[],[f360,f329])).
fof(f3719,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18)))) )),
  inference(forward_demodulation,[],[f3718,f336])).
fof(f3718,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) )),
  inference(subsumption_resolution,[],[f3695,f321])).
fof(f3695,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) )),
  inference(superposition,[],[f360,f336])).
fof(f3720,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(subsumption_resolution,[],[f3710,f321])).
fof(f3710,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f360,f425])).
fof(f3755,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f363,f258])).
fof(f3757,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f363,f257])).
fof(f3759,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f363,f259])).
fof(f3760,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f363,f337])).
fof(f3765,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23)))) )),
  inference(superposition,[],[f363,f329])).
fof(f3771,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(forward_demodulation,[],[f3770,f425])).
fof(f3770,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f3769,f1697])).
fof(f3769,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f3756,f425])).
fof(f3756,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f363,f425])).
fof(f5068,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(equality_resolution,[],[f365])).
fof(f5272,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f258])).
fof(f5274,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f257])).
fof(f5276,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f259])).
fof(f5277,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f337])).
fof(f5282,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X24))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f329])).
fof(f5283,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f362,f258])).
fof(f5285,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f362,f257])).
fof(f5287,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f362,f259])).
fof(f5288,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))) )),
  inference(superposition,[],[f362,f337])).
fof(f5293,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X22))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23)))) )),
  inference(superposition,[],[f362,f329])).
fof(f8675,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f1129,f1697,f360])).
fof(f8678,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f321,f1697,f361])).
fof(f8686,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(unit_resulting_resolution,[],[f1697,f1697,f361])).
fof(f8695,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(unit_resulting_resolution,[],[f1129,f1697,f363])).
fof(f8800,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) )),
  inference(forward_demodulation,[],[f8692,f257])).
fof(f8692,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) )),
  inference(unit_resulting_resolution,[],[f1129,f1697,f361])).
fof(f9193,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))),s('type.num.num',X89)))) )),
  inference(forward_demodulation,[],[f9192,f1696])).
fof(f9192,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))),s('type.num.num',X89))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(subsumption_resolution,[],[f9070,f1697])).
fof(f9070,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))),s('type.num.num',X89))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f360,f1696])).
fof(f9194,plain,(
  ( ! [X92,X93] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X92))),s('type.num.num',X93))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X93)) )),
  inference(subsumption_resolution,[],[f9072,f1697])).
fof(f9072,plain,(
  ( ! [X92,X93] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X92))),s('type.num.num',X93))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X93) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f361,f1696])).
fof(f9195,plain,(
  ( ! [X94,X95] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.SUC_1'(s('type.num.num',X94))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X95)) )),
  inference(subsumption_resolution,[],[f9073,f1697])).
fof(f9073,plain,(
  ( ! [X94,X95] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.SUC_1'(s('type.num.num',X94))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X95)) )),
  inference(superposition,[],[f361,f1696])).
fof(f9197,plain,(
  ( ! [X103,X102] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X103),s('type.num.num','const.num.SUC_1'(s('type.num.num',X102))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(subsumption_resolution,[],[f9077,f1697])).
fof(f9077,plain,(
  ( ! [X103,X102] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X103),s('type.num.num','const.num.SUC_1'(s('type.num.num',X102))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f363,f1696])).
fof(f9075,plain,(
  ( ! [X99,X98] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))))) | s('type.num.num',X99) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f362,f1696])).
fof(f9059,plain,(
  ( ! [X66,X67] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X67))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))) | s('type.num.num',X67) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f353,f1696])).
fof(f9026,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f378,f1696])).
fof(f9154,plain,(
  ( ! [X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5)) )),
  inference(subsumption_resolution,[],[f9021,f321])).
fof(f9021,plain,(
  ( ! [X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5)) )),
  inference(superposition,[],[f361,f1696])).
fof(f9020,plain,(
  ( ! [X4] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) )),
  inference(superposition,[],[f360,f1696])).
fof(f9015,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f1696,f425])).
fof(f9151,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(forward_demodulation,[],[f8993,f336])).
fof(f8993,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f1696,f358])).
fof(f8976,plain,(
  ( ! [X8,X7] : (s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f8968,f255])).
fof(f8968,plain,(
  ( ! [X8,X7] : (p(s(bool,'F_0')) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f643,f529])).
fof(f8975,plain,(
  ( ! [X4,X5] : (s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f8966,f255])).
fof(f8966,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f643,f455])).
fof(f8948,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f8930,f255])).
fof(f8930,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f2705,f262])).
fof(f8852,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(subsumption_resolution,[],[f8829,f253])).
fof(f8829,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(superposition,[],[f2776,f439])).
fof(f8847,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(forward_demodulation,[],[f8846,f2569])).
fof(f8846,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(subsumption_resolution,[],[f8845,f253])).
fof(f8845,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(forward_demodulation,[],[f8824,f439])).
fof(f8824,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(superposition,[],[f2776,f2569])).
fof(f8839,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(forward_demodulation,[],[f8838,f1694])).
fof(f8838,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(subsumption_resolution,[],[f8837,f253])).
fof(f8837,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(forward_demodulation,[],[f8818,f5937])).
fof(f8818,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(superposition,[],[f2776,f1694])).
fof(f8756,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f1697,f336])).
fof(f8441,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),sK2)),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f8415,f253])).
fof(f8415,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),sK2)),s('type.num.num',sK1)))),
  inference(superposition,[],[f2106,f439])).
fof(f8436,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8435,f2569])).
fof(f8435,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f8434,f253])).
fof(f8434,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8410,f439])).
fof(f8410,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2106,f2569])).
fof(f8428,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8427,f1694])).
fof(f8427,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f8426,f253])).
fof(f8426,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8404,f5937])).
fof(f8404,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2106,f1694])).
fof(f8237,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.|48|_0','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f8206,f253])).
fof(f8206,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.|48|_0','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f2059,f440])).
fof(f8227,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f8226,f260])).
fof(f8226,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))) )),
  inference(subsumption_resolution,[],[f8225,f253])).
fof(f8225,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))) )),
  inference(forward_demodulation,[],[f8200,f440])).
fof(f8200,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))) )),
  inference(superposition,[],[f2059,f260])).
fof(f8223,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f8222,f2566])).
fof(f8222,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)))))) )),
  inference(subsumption_resolution,[],[f8221,f253])).
fof(f8221,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f8198,f440])).
fof(f8198,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f2059,f2566])).
fof(f8099,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8098,f2569])).
fof(f8098,plain,(
  s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f8097,f253])).
fof(f8097,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8077,f1282])).
fof(f8077,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2048,f2569])).
fof(f8091,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8090,f1694])).
fof(f8090,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f8071,f5932])).
fof(f8071,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2048,f1694])).
fof(f8089,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8088,f252])).
fof(f8088,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f8087,f253])).
fof(f8087,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f8070,f1077])).
fof(f8070,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2048,f252])).
fof(f7966,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(unit_resulting_resolution,[],[f7782,f353])).
fof(f7942,plain,(
  ( ! [X39] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39)) )),
  inference(subsumption_resolution,[],[f7835,f1697])).
fof(f7835,plain,(
  ( ! [X39] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39)) )),
  inference(superposition,[],[f361,f1694])).
fof(f7821,plain,(
  ( ! [X25] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f353,f1694])).
fof(f7791,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f378,f1694])).
fof(f7783,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(superposition,[],[f336,f1694])).
fof(f7782,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),
  inference(superposition,[],[f1129,f1694])).
fof(f7775,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f1694,f378])).
fof(f7901,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(forward_demodulation,[],[f7776,f336])).
fof(f7776,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(unit_resulting_resolution,[],[f1694,f358])).
fof(f2870,plain,(
  ( ! [X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))) )),
  inference(superposition,[],[f353,f2569])).
fof(f2610,plain,(
  ( ! [X7] : (s('type.num.num',sK1) != s('type.num.num',X7) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',sK3)))) )),
  inference(superposition,[],[f378,f252])).
fof(f2569,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),
  inference(unit_resulting_resolution,[],[f252,f378])).
fof(f429,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f251,f416])).
fof(f466,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f463,f253])).
fof(f463,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | ~sP0(X0,X1,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) )),
  inference(superposition,[],[f386,f439])).
fof(f475,plain,(
  ( ! [X0,X1] : (~sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X1) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f472,f253])).
fof(f472,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | ~sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X1)) )),
  inference(superposition,[],[f387,f439])).
fof(f477,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) )),
  inference(unit_resulting_resolution,[],[f255,f466])).
fof(f495,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0)) )),
  inference(unit_resulting_resolution,[],[f255,f475])).
fof(f542,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) )),
  inference(unit_resulting_resolution,[],[f323,f466])).
fof(f543,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X1)) )),
  inference(unit_resulting_resolution,[],[f323,f475])).
fof(f1284,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) )),
  inference(unit_resulting_resolution,[],[f255,f1199,f386])).
fof(f1288,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0)) )),
  inference(unit_resulting_resolution,[],[f255,f1199,f387])).
fof(f1295,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1199,f416])).
fof(f1563,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2)))) )),
  inference(unit_resulting_resolution,[],[f255,f1556,f386])).
fof(f1568,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2)),X0)) )),
  inference(unit_resulting_resolution,[],[f255,f1556,f387])).
fof(f1576,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1556,f416])).
fof(f1638,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))),
  inference(unit_resulting_resolution,[],[f253,f1630,f349])).
fof(f1640,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) )),
  inference(unit_resulting_resolution,[],[f255,f1630,f386])).
fof(f1645,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))),X0)) )),
  inference(unit_resulting_resolution,[],[f255,f1630,f387])).
fof(f1653,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1630,f416])).
fof(f1707,plain,(
  ( ! [X28,X29,X27] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))))),s('type.num.num','const.num.|48|_0')),X29,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) )),
  inference(superposition,[],[f542,f336])).
fof(f1708,plain,(
  ( ! [X30,X31,X32] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X32)) )),
  inference(superposition,[],[f543,f336])).
fof(f1816,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | p(s(bool,X3))) )),
  inference(subsumption_resolution,[],[f1800,f253])).
fof(f1800,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) )),
  inference(superposition,[],[f386,f1282])).
fof(f1817,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X6) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f1801,f253])).
fof(f1801,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X6)) )),
  inference(superposition,[],[f387,f1282])).
fof(f1989,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) )),
  inference(unit_resulting_resolution,[],[f255,f1633,f386])).
fof(f1995,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))),X0)) )),
  inference(unit_resulting_resolution,[],[f255,f1633,f387])).
fof(f2005,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1633,f416])).
fof(f2822,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(subsumption_resolution,[],[f2798,f253])).
fof(f2798,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(superposition,[],[f427,f439])).
fof(f3027,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f3004,f253])).
fof(f3004,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK1)))),
  inference(superposition,[],[f341,f1282])).
fof(f3500,plain,(
  ( ! [X8] : (s('type.num.num',X8) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK1)))) )),
  inference(subsumption_resolution,[],[f3448,f253])).
fof(f3448,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num',X8) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f375,f1282])).
fof(f1263,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))) )),
  inference(superposition,[],[f353,f252])).
fof(f6634,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f1259,f336])).
fof(f6619,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f1259,f353])).
fof(f6337,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f1129,f425])).
fof(f6297,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(unit_resulting_resolution,[],[f1129,f353])).
fof(f6299,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f1129,f378])).
fof(f6307,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(unit_resulting_resolution,[],[f1129,f1129,f362])).
fof(f6084,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))) | s('type.num.num',X58) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X57),s('type.num.num',X57)))) )),
  inference(superposition,[],[f353,f2566])).
fof(f6196,plain,(
  ( ! [X35,X36] : (s('type.num.num',X36) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)),X36)),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f6195,f2566])).
fof(f6195,plain,(
  ( ! [X35,X36] : (s('type.num.num',X36) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)),X36)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)))))) )),
  inference(subsumption_resolution,[],[f6194,f253])).
fof(f6194,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | s('type.num.num',X36) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)),X36)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)))))) )),
  inference(forward_demodulation,[],[f6073,f440])).
fof(f6073,plain,(
  ( ! [X35,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) | s('type.num.num',X36) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)),X36)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)))))) )),
  inference(superposition,[],[f342,f2566])).
fof(f5928,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X0,'const.num.SUC_1'(s('type.num.num',X0)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f1421,f427])).
fof(f5929,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X0,'const.num.SUC_1'(s('type.num.num',X0)))),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f1421,f343])).
fof(f5937,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f253,f1421,f349])).
fof(f5938,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f1421,f1421,f349])).
fof(f5939,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f255,f1421,f386])).
fof(f5946,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f255,f1421,f387])).
fof(f5953,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f255,f1421,f415])).
fof(f5956,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f1421,f416])).
fof(f5625,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f373,f372])).
fof(f5492,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))))))))) )),
  inference(forward_demodulation,[],[f5491,f372])).
fof(f5491,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))))))))) )),
  inference(forward_demodulation,[],[f5354,f336])).
fof(f5354,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))))))))) )),
  inference(unit_resulting_resolution,[],[f372,f358])).
fof(f4351,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f365,f364,f363,f362,f361,f360,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3182,f3191,f3193,f3195,f3196,f3224,f3200,f3201,f3202,f3204,f3206,f3207,f3228,f3211,f3212,f3229,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f3687,f3689,f3691,f3692,f3719,f3696,f3697,f3720,f3755,f3771,f3757,f3759,f3760,f3764,f3765,f2497,f2310,f3500,f3027,f2941,f2940,f2939,f2920,f2919,f2918,f2917,f2870,f2822,f2788,f2776,f2610,f2569,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2116,f2106,f2069,f2059,f2048,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1694,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1482,f1295,f1288,f1284,f1282,f1263,f543,f542,f495,f477,f475,f466,f439,f429,f252,f3028])).
fof(f3028,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | s('type.num.num',sK1) = s('type.num.num',sK2)),
  inference(subsumption_resolution,[],[f3005,f253])).
fof(f3005,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | s('type.num.num',sK1) = s('type.num.num',sK2)),
  inference(superposition,[],[f350,f1282])).
fof(f3555,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f3521,f255])).
fof(f3521,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'F_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f376,f529])).
fof(f3531,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f3530,f425])).
fof(f3530,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f3529,f425])).
fof(f3529,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f3528,f255])).
fof(f3528,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f3510,f1702])).
fof(f3510,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f376,f425])).
fof(f3467,plain,(
  ( ! [X21,X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f3466,f260])).
fof(f3466,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))))) )),
  inference(forward_demodulation,[],[f3465,f260])).
fof(f3465,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))))) )),
  inference(subsumption_resolution,[],[f3464,f253])).
fof(f3464,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))))) )),
  inference(forward_demodulation,[],[f3428,f440])).
fof(f3428,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))) | s('type.num.num',X21) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))))) )),
  inference(superposition,[],[f375,f260])).
fof(f2608,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X3)))) )),
  inference(superposition,[],[f378,f425])).
fof(f2607,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f378,f258])).
fof(f2596,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.num.num',X32) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X33))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X32),s('type.num.num',X33))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X30),s('type.num.num',X31)))) )),
  inference(superposition,[],[f378,f329])).
fof(f2593,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X21))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) )),
  inference(superposition,[],[f378,f337])).
fof(f2632,plain,(
  ( ! [X17,X16] : (s('type.num.num',X16) != s('type.num.num',X17) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X17)))) )),
  inference(forward_demodulation,[],[f2631,f260])).
fof(f2631,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) != s('type.num.num',X17) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X17)))) )),
  inference(forward_demodulation,[],[f2592,f257])).
fof(f2592,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X17)))) )),
  inference(superposition,[],[f378,f260])).
fof(f2591,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num',X14)))) )),
  inference(superposition,[],[f378,f259])).
fof(f2589,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X8) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X9))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))) )),
  inference(superposition,[],[f378,f257])).
fof(f2587,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(superposition,[],[f378,f258])).
fof(f2568,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f425,f378])).
fof(f2612,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f2576,f329])).
fof(f2576,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f329,f378])).
fof(f2375,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))),
  inference(forward_demodulation,[],[f2302,f336])).
fof(f2302,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))))))))),
  inference(unit_resulting_resolution,[],[f2125,f358])).
fof(f2193,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) )),
  inference(superposition,[],[f345,f425])).
fof(f2179,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f425,f336])).
fof(f2068,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.|48|_0',X0)),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f2042,f253])).
fof(f2042,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.|48|_0',X0)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f342,f440])).
fof(f2054,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f2053,f260])).
fof(f2053,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))) )),
  inference(subsumption_resolution,[],[f2052,f253])).
fof(f2052,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f2028,f440])).
fof(f2028,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f342,f260])).
fof(f2001,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))),
  inference(unit_resulting_resolution,[],[f255,f1633,f415])).
fof(f1867,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))))) | s('type.num.num',X46) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(superposition,[],[f353,f337])).
fof(f1862,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num',X31) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X29),s('type.num.num',X30))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30)))))) )),
  inference(superposition,[],[f345,f337])).
fof(f1849,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f337,f336])).
fof(f1839,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f337,f336])).
fof(f1773,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num',X58) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))))))) )),
  inference(subsumption_resolution,[],[f1719,f321])).
fof(f1719,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num',X58) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X57)))))) )),
  inference(superposition,[],[f345,f336])).
fof(f1706,plain,(
  ( ! [X26,X24,X25] : (sP0(X26,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f538,f336])).
fof(f1705,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(superposition,[],[f534,f336])).
fof(f1704,plain,(
  ( ! [X19,X20,X18] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))),s('type.num.num','const.num.|48|_0')),'T_0',X20)) )),
  inference(superposition,[],[f532,f336])).
fof(f1703,plain,(
  ( ! [X17,X15,X16] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))),s('type.num.num','const.num.|48|_0')),X17,'T_0')) )),
  inference(superposition,[],[f530,f336])).
fof(f1701,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f528,f336])).
fof(f1698,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f353,f336])).
fof(f1697,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f321,f336])).
fof(f1759,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))))) )),
  inference(forward_demodulation,[],[f1758,f336])).
fof(f1758,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))))) )),
  inference(forward_demodulation,[],[f1675,f336])).
fof(f1675,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))))) )),
  inference(unit_resulting_resolution,[],[f336,f358])).
fof(f1650,plain,(
  s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))),
  inference(unit_resulting_resolution,[],[f255,f1630,f415])).
fof(f1625,plain,(
  ( ! [X4,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f1607,f336])).
fof(f1607,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f359,f258])).
fof(f1622,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f1605,f336])).
fof(f1605,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))) )),
  inference(superposition,[],[f359,f252])).
fof(f1573,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f255,f1556,f415])).
fof(f1544,plain,(
  ( ! [X4,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f1526,f336])).
fof(f1526,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4))))) )),
  inference(superposition,[],[f340,f258])).
fof(f1541,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f1524,f336])).
fof(f1524,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f340,f252])).
fof(f1493,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK5(X2,X1,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) )),
  inference(subsumption_resolution,[],[f1481,f255])).
fof(f1481,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) )),
  inference(superposition,[],[f332,f262])).
fof(f1450,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(subsumption_resolution,[],[f1420,f255])).
fof(f1420,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.num.num',X0) != s('type.num.num',X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f358,f262])).
fof(f1435,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(forward_demodulation,[],[f1392,f336])).
fof(f1392,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(unit_resulting_resolution,[],[f252,f358])).
fof(f1432,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f1394,f336])).
fof(f1394,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f258,f358])).
fof(f1421,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f1405,f329])).
fof(f1405,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f329,f358])).
fof(f1292,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f255,f1199,f415])).
fof(f1269,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) | s('type.num.num',X14) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X12),s('type.num.num',X13)))) )),
  inference(superposition,[],[f353,f329])).
fof(f1267,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) )),
  inference(superposition,[],[f353,f260])).
fof(f1266,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f353,f259])).
fof(f1265,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f353,f258])).
fof(f1264,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(superposition,[],[f353,f257])).
fof(f1259,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f321,f353])).
fof(f1145,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X12),s('type.num.num',X13)))) )),
  inference(superposition,[],[f345,f329])).
fof(f1142,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f345,f259])).
fof(f1141,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f345,f258])).
fof(f1140,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(superposition,[],[f345,f257])).
fof(f1078,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f1043,f1043,f349])).
fof(f1079,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f255,f1043,f386])).
fof(f1083,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f255,f1043,f387])).
fof(f1087,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f255,f1043,f415])).
fof(f1091,plain,(
  ( ! [X2,X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f1043,f416])).
fof(f1071,plain,(
  ( ! [X2,X3] : (s('type.num.num',X2) != s('type.num.num',X3) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f1042,f255])).
fof(f1042,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s('type.num.num',X2) != s('type.num.num',X3) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f352,f262])).
fof(f869,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,X23)) | p(s(bool,X25)) | ~sP0(X25,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X23),s(bool,X24)),X26)) )),
  inference(superposition,[],[f387,f329])).
fof(f868,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,X19)) | p(s(bool,X21)) | ~sP0(X21,X22,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X19),s(bool,X20)))) )),
  inference(superposition,[],[f386,f329])).
fof(f819,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f255,f630])).
fof(f746,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.bool.COND_3'(s(bool,X0),s(X1,X3),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f328,f262])).
fof(f731,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f255,f629])).
fof(f630,plain,(
  ( ! [X10,X8,X9] : (~sP0(X9,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)),X10) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f623,f253])).
fof(f623,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | ~sP0(X9,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)),X10)) )),
  inference(superposition,[],[f387,f440])).
fof(f629,plain,(
  ( ! [X6,X7,X5] : (~sP0(X6,X7,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f622,f253])).
fof(f622,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP0(X6,X7,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f386,f440])).
fof(f577,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f262,f262])).
fof(f528,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f323,f266])).
fof(f530,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f253,f323,f386])).
fof(f532,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f253,f323,f387])).
fof(f534,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f255,f323,f388])).
fof(f538,plain,(
  ( ! [X0,X1] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f255,f323,f388])).
fof(f539,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f323,f323,f388])).
fof(f485,plain,(
  ( ! [X0] : (sP0(X0,'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f255,f255,f388])).
fof(f471,plain,(
  ( ! [X0] : (~sP0('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f255,f253,f387])).
fof(f462,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f255,f253,f386])).
fof(f434,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f255,f266])).
fof(f435,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f322,f266])).
fof(f430,plain,(
  ( ! [X2,X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f256,f416])).
fof(f428,plain,(
  ( ! [X0,X1] : (sP0('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f253,f416])).
fof(f386,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X0)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f246])).
fof(f246,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | ((~p(s(bool,X2)) | p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & ((p(s(bool,X2)) & ~p(s(bool,X0))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f245])).
fof(f245,plain,(
  ! [X2,X1,X0] : ((~sP0(X2,X1,X0) | ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2))))) & ((p(s(bool,X0)) & ~p(s(bool,X2))) | (p(s(bool,X1)) & ~p(s(bool,X2))) | sP0(X2,X1,X0)))),
  inference(flattening,[],[f244])).
fof(f244,plain,(
  ! [X2,X1,X0] : ((~sP0(X2,X1,X0) | ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2))))) & (((p(s(bool,X0)) & ~p(s(bool,X2))) | (p(s(bool,X1)) & ~p(s(bool,X2)))) | sP0(X2,X1,X0)))),
  inference(nnf_transformation,[],[f178])).
fof(f178,plain,(
  ! [X2,X1,X0] : (sP0(X2,X1,X0) <=> ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f387,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f246])).
fof(f388,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f246])).
fof(f416,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(duplicate_literal_removal,[],[f391])).
fof(f391,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f246])).
fof(f374,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f239])).
fof(f371,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK9(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK9(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f238])).
fof(f238,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK9(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK9(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb',aHL_EXT)).
fof(f356,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X10,X11] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X11))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.ADD_INV_|48|_EQ')).
fof(f353,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) <=> s('type.num.num',X10) = s('type.num.num',X11))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.prim_rec.INV_SUC_EQ')).
fof(f354,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f230])).
fof(f323,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X11] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num','const.num.|48|_0'))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.arithmetic.NOT_SUC_LESS_EQ_|48|')).
fof(f322,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X11] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))))),
  file('thm.arithmetic.arithmetic_23|48|_prove_ltb','thm.prim_rec.NOT_LESS_|48|')).
fof(f266,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f183])).
fof(f19327,plain,(
  $false | ($spl4 | $spl33 | $spl42)),
  inference(global_subsumption,[],[f8425,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288,f19317,f10261,f19321,f19323,f19325])).
fof(f7171,plain,(
  ( ! [X101,X100] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X100) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100)))) ) | $spl4),
  inference(forward_demodulation,[],[f7170,f7085])).
fof(f7170,plain,(
  ( ! [X101,X100] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X100) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X100)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f7169,f258])).
fof(f7169,plain,(
  ( ! [X101,X100] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X100)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f6955,f7085])).
fof(f6955,plain,(
  ( ! [X101,X100] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X100)),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X100)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f363,f4584])).
fof(f7164,plain,(
  ( ! [X87,X86] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X86) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87)))) ) | $spl4),
  inference(forward_demodulation,[],[f7163,f7085])).
fof(f7163,plain,(
  ( ! [X87,X86] : (s('type.num.num',X86) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X86)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f7162,f258])).
fof(f7162,plain,(
  ( ! [X87,X86] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X86)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f6948,f7085])).
fof(f6948,plain,(
  ( ! [X87,X86] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X86)),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X86)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f360,f4584])).
fof(f6907,plain,(
  ( ! [X12,X11] : (s('type.num.num',X11) != s('type.num.num',X12) | s('type.num.num',sK6(sK3,X11)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f378,f4584])).
fof(f6901,plain,(
  ( ! [X3] : (s('type.num.num',X3) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK6(sK3,X3)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6(sK3,X3))) ) | $spl4),
  inference(superposition,[],[f360,f4584])).
fof(f7085,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num',sK6(sK3,X0))) ) | $spl4),
  inference(forward_demodulation,[],[f6853,f259])).
fof(f6853,plain,(
  ( ! [X0] : (s('type.num.num',sK6(sK3,X0)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f4584,f378])).
fof(f7084,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK6(sK3,X0)))))))) ) | $spl4),
  inference(forward_demodulation,[],[f7083,f1696])).
fof(f7083,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) ) | $spl4),
  inference(forward_demodulation,[],[f6854,f336])).
fof(f6854,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X0)),s('type.num.num','const.num.|48|_0'))))))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f4584,f358])).
fof(f6852,plain,(
  ( ! [X98] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK5(sK7(sK1,sK2),X98,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f6747,f6495])).
fof(f6747,plain,(
  ( ! [X98] : (p(s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num',sK5(sK7(sK1,sK2),X98,'type.num.num'))) ) | $spl4),
  inference(superposition,[],[f332,f6495])).
fof(f6848,plain,(
  ( ! [X78] : (s('type.num.num',X78) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8(sK7(sK1,sK2),X78)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))))) ) | $spl4),
  inference(forward_demodulation,[],[f6847,f1696])).
fof(f6847,plain,(
  ( ! [X78] : (s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK7(sK1,sK2),X78)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))))) ) | $spl4),
  inference(forward_demodulation,[],[f6721,f6495])).
fof(f6721,plain,(
  ( ! [X78] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78)))) | s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK7(sK1,sK2),X78)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(sK1,sK2))))))) ) | $spl4),
  inference(superposition,[],[f427,f6495])).
fof(f6799,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num',sK7(sK7(sK1,sK2),X13)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) ) | $spl4),
  inference(forward_demodulation,[],[f6798,f258])).
fof(f6798,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK7(sK1,sK2),X13)),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) ) | $spl4),
  inference(forward_demodulation,[],[f6674,f6495])).
fof(f6674,plain,(
  ( ! [X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK7(sK1,sK2),X13)),s('type.num.num',sK7(sK1,sK2))))) ) | $spl4),
  inference(superposition,[],[f343,f6495])).
fof(f6796,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK7(sK1,sK2),X11)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f6795,f6495])).
fof(f6795,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK7(sK1,sK2),X11)),s('type.num.num',sK7(sK1,sK2))))) ) | $spl4),
  inference(subsumption_resolution,[],[f6794,f253])).
fof(f6794,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK7(sK1,sK2),X11)),s('type.num.num',sK7(sK1,sK2))))) ) | $spl4),
  inference(forward_demodulation,[],[f6672,f440])).
fof(f6672,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK7(sK1,sK2),X11)),s('type.num.num',sK7(sK1,sK2))))) ) | $spl4),
  inference(superposition,[],[f342,f6495])).
fof(f6793,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X10,sK7(sK1,sK2))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f6671,f6495])).
fof(f6671,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X10,sK7(sK1,sK2))),s('type.num.num',X10)))) ) | $spl4),
  inference(superposition,[],[f342,f6495])).
fof(f6495,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2)) | $spl4),
  inference(forward_demodulation,[],[f6369,f2566])).
fof(f6369,plain,(
  s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl4),
  inference(unit_resulting_resolution,[],[f4398,f378])).
fof(f5229,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK1)),s('type.num.num',sK1))) | $spl4),
  inference(subsumption_resolution,[],[f5204,f253])).
fof(f5204,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK1)),s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f343,f4367])).
fof(f5228,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK1,sK1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl4),
  inference(subsumption_resolution,[],[f5203,f253])).
fof(f5203,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK1,sK1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl4),
  inference(superposition,[],[f427,f4367])).
fof(f4773,plain,(
  ( ! [X74] : (s('type.num.num',sK1) = s('type.num.num',sK5(sK2,X74,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X74),s('type.num.num',sK1))))) ) | $spl4),
  inference(forward_demodulation,[],[f4714,f4365])).
fof(f4714,plain,(
  ( ! [X74] : (p(s(bool,happ(s(fun('type.num.num',bool),X74),s('type.num.num',sK1)))) | s('type.num.num',sK2) = s('type.num.num',sK5(sK2,X74,'type.num.num'))) ) | $spl4),
  inference(superposition,[],[f332,f4365])).
fof(f4771,plain,(
  ( ! [X58] : (s('type.num.num',X58) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK2,X58)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X58))))) ) | $spl4),
  inference(forward_demodulation,[],[f4697,f4365])).
fof(f4697,plain,(
  ( ! [X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X58)))) | s('type.num.num',X58) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK2,X58)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) ) | $spl4),
  inference(superposition,[],[f427,f4365])).
fof(f4770,plain,(
  ( ! [X57] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X57,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X57),s('type.num.num',sK1))))) ) | $spl4),
  inference(forward_demodulation,[],[f4696,f4365])).
fof(f4696,plain,(
  ( ! [X57] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X57),s('type.num.num',sK1)))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X57,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X57)))))) ) | $spl4),
  inference(superposition,[],[f427,f4365])).
fof(f4734,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK2,X13)),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X13))))) ) | $spl4),
  inference(forward_demodulation,[],[f4664,f4365])).
fof(f4664,plain,(
  ( ! [X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK2,X13)),s('type.num.num',sK2)))) ) | $spl4),
  inference(superposition,[],[f343,f4365])).
fof(f4733,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X12,sK2)),s('type.num.num',X12))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',sK1))))) ) | $spl4),
  inference(forward_demodulation,[],[f4663,f4365])).
fof(f4663,plain,(
  ( ! [X12] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',sK1)))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X12,sK2)),s('type.num.num',X12)))) ) | $spl4),
  inference(superposition,[],[f343,f4365])).
fof(f4732,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK2,X11)),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X11))))) ) | $spl4),
  inference(forward_demodulation,[],[f4662,f4365])).
fof(f4662,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK2,X11)),s('type.num.num',sK2)))) ) | $spl4),
  inference(superposition,[],[f342,f4365])).
fof(f4731,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X10,sK2)),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK1))))) ) | $spl4),
  inference(forward_demodulation,[],[f4661,f4365])).
fof(f4661,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK1)))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X10,sK2)),s('type.num.num',X10)))) ) | $spl4),
  inference(superposition,[],[f342,f4365])).
fof(f4636,plain,(
  ( ! [X74] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK5(sK3,X74,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X74),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f4557,f1153])).
fof(f4557,plain,(
  ( ! [X74] : (p(s(bool,happ(s(fun('type.num.num',bool),X74),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',sK3) = s('type.num.num',sK5(sK3,X74,'type.num.num'))) ) | $spl4),
  inference(superposition,[],[f332,f1153])).
fof(f4634,plain,(
  ( ! [X58] : (s('type.num.num',X58) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8(sK3,X58)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58))))) ) | $spl4),
  inference(forward_demodulation,[],[f4633,f1696])).
fof(f4633,plain,(
  ( ! [X58] : (s('type.num.num',X58) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK3,X58)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58))))) ) | $spl4),
  inference(forward_demodulation,[],[f4540,f1153])).
fof(f4540,plain,(
  ( ! [X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58)))) | s('type.num.num',X58) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK3,X58)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) ) | $spl4),
  inference(superposition,[],[f427,f1153])).
fof(f4587,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num',sK7(sK3,X13)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) ) | $spl4),
  inference(forward_demodulation,[],[f4586,f258])).
fof(f4586,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK3,X13)),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) ) | $spl4),
  inference(forward_demodulation,[],[f4507,f1153])).
fof(f4507,plain,(
  ( ! [X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK3,X13)),s('type.num.num',sK3)))) ) | $spl4),
  inference(superposition,[],[f343,f1153])).
fof(f4584,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f4583,f1153])).
fof(f4583,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num',sK3)))) ) | $spl4),
  inference(subsumption_resolution,[],[f4582,f253])).
fof(f4582,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num',sK3)))) ) | $spl4),
  inference(forward_demodulation,[],[f4505,f440])).
fof(f4505,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK3,X11)),s('type.num.num',sK3)))) ) | $spl4),
  inference(superposition,[],[f342,f1153])).
fof(f4581,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X10,sK3)),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f4504,f1153])).
fof(f4504,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X10,sK3)),s('type.num.num',X10)))) ) | $spl4),
  inference(superposition,[],[f342,f1153])).
fof(f4447,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK1))) | s('type.num.num',X8) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl4),
  inference(forward_demodulation,[],[f4422,f4365])).
fof(f4422,plain,(
  ( ! [X8] : (s('type.num.num',X8) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK1)))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f3500])).
fof(f4407,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl4),
  inference(backward_demodulation,[],[f4365,f2822])).
fof(f4445,plain,(
  ( ! [X44] : (p(s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X44,'type.num.num'))) ) | $spl4),
  inference(forward_demodulation,[],[f4406,f4365])).
fof(f4406,plain,(
  ( ! [X44] : (s('type.num.num',sK1) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X44,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK2))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2401])).
fof(f4444,plain,(
  ( ! [X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X11)),s('type.num.num',sK1)))) ) | $spl4),
  inference(forward_demodulation,[],[f4404,f4365])).
fof(f4404,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X11)),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2385])).
fof(f4443,plain,(
  ( ! [X10] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X10)))) ) | $spl4),
  inference(forward_demodulation,[],[f4403,f4365])).
fof(f4403,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2384])).
fof(f4442,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X9)),s('type.num.num',sK1)))) ) | $spl4),
  inference(forward_demodulation,[],[f4402,f4365])).
fof(f4402,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X9)),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2383])).
fof(f4441,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X8)))) ) | $spl4),
  inference(forward_demodulation,[],[f4401,f4365])).
fof(f4401,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X8))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2382])).
fof(f4400,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2336])).
fof(f4399,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl4),
  inference(backward_demodulation,[],[f4365,f2309])).
fof(f4398,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) | $spl4),
  inference(backward_demodulation,[],[f4365,f2125])).
fof(f4397,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK1,sK2)),s('type.num.num',sK1))) | $spl4),
  inference(backward_demodulation,[],[f4365,f2069])).
fof(f4396,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),X0,X1)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f2005])).
fof(f4395,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),X0)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1995])).
fof(f4394,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1989])).
fof(f4393,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl4),
  inference(backward_demodulation,[],[f4365,f1987])).
fof(f4392,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1820])).
fof(f4391,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X6) | p(s(bool,X5))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1817])).
fof(f4390,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | p(s(bool,X3))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1816])).
fof(f4389,plain,(
  ( ! [X30,X31,X32] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X32)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1708])).
fof(f4388,plain,(
  ( ! [X28,X29,X27] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))))),s('type.num.num','const.num.|48|_0')),X29,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1707])).
fof(f4387,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),X0,X1)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1653])).
fof(f4386,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),X0)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1645])).
fof(f4385,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1640])).
fof(f4384,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl4),
  inference(backward_demodulation,[],[f4365,f1638])).
fof(f4383,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))) | $spl4),
  inference(backward_demodulation,[],[f4365,f1631])).
fof(f4382,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),X0,X1)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1576])).
fof(f4381,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)),X0)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1568])).
fof(f4380,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1563])).
fof(f4379,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl4),
  inference(backward_demodulation,[],[f4365,f1561])).
fof(f4378,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X13,bool)) | p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'T_0'))))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f1487])).
fof(f4373,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X1)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f543])).
fof(f4372,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f542])).
fof(f4371,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X0)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f495])).
fof(f4370,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f477])).
fof(f4369,plain,(
  ( ! [X0,X1] : (~sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X1) | p(s(bool,X0))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f475])).
fof(f4368,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | p(s(bool,X0))) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f466])).
fof(f4367,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl4),
  inference(backward_demodulation,[],[f4365,f439])).
fof(f4366,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X0,X1)) ) | $spl4),
  inference(backward_demodulation,[],[f4365,f429])).
fof(f4365,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) | $spl4),
  inference(forward_demodulation,[],[f4364,f259])).
fof(f4364,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl4),
  inference(forward_demodulation,[],[f2569,f1153])).
fof(f4363,plain,(
  ( ! [X7] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num',X7)) ) | $spl4),
  inference(forward_demodulation,[],[f2610,f1153])).
fof(f4362,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X7)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X7))))) ) | $spl4),
  inference(forward_demodulation,[],[f2776,f1153])).
fof(f4361,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X7,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',sK1))))) ) | $spl4),
  inference(forward_demodulation,[],[f2788,f1153])).
fof(f4360,plain,(
  ( ! [X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))) ) | $spl4),
  inference(forward_demodulation,[],[f2870,f1153])).
fof(f4359,plain,(
  ( ! [X8] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X8))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2))))) ) | $spl4),
  inference(forward_demodulation,[],[f2917,f1153])).
fof(f4358,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X9)),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9))))) ) | $spl4),
  inference(forward_demodulation,[],[f2918,f1153])).
fof(f4357,plain,(
  ( ! [X10] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2))))) ) | $spl4),
  inference(forward_demodulation,[],[f2919,f1153])).
fof(f4356,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X11)),s('type.num.num',sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11))))) ) | $spl4),
  inference(forward_demodulation,[],[f2920,f1153])).
fof(f4355,plain,(
  ( ! [X37] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X37,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',sK2))))) ) | $spl4),
  inference(forward_demodulation,[],[f2939,f1153])).
fof(f4354,plain,(
  ( ! [X38] : (s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X38)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X38))))) ) | $spl4),
  inference(forward_demodulation,[],[f2940,f1153])).
fof(f4353,plain,(
  ( ! [X52] : (s('type.num.num',sK2) = s('type.num.num',sK5('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')),X52,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X52),s('type.num.num',sK2))))) ) | $spl4),
  inference(forward_demodulation,[],[f2941,f1153])).
fof(f19326,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288,f19317,f10261,f19321,f19323,f19325])).
fof(f19324,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288,f19317,f10261,f19321,f19323])).
fof(f19322,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288,f19317,f10261,f19321])).
fof(f19319,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288,f19317,f10261])).
fof(f19318,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288,f19317])).
fof(f19316,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f1153,f3897,f2476,f7229,f19288])).
fof(f19315,plain,(
  $false | ($spl4 | $spl33 | $spl36)),
  inference(global_subsumption,[],[f19272,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f1153,f3897,f2476,f7229])).
fof(f19314,plain,(
  $false | ($spl4 | $spl33 | $spl36)),
  inference(global_subsumption,[],[f19270,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f1153,f3897,f2476,f7229])).
fof(f19270,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | $spl36),
  inference(backward_demodulation,[],[f19269,f2309])).
fof(f19313,plain,(
  $false | ($spl4 | $spl33 | $spl36)),
  inference(global_subsumption,[],[f19261,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f1153,f3897,f2476,f7229])).
fof(f19261,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK2) | $spl36),
  inference(subsumption_resolution,[],[f19223,f253])).
fof(f19223,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK2) | $spl36),
  inference(superposition,[],[f350,f18823])).
fof(f19312,plain,(
  $false | ($spl1 | $spl4 | $spl33)),
  inference(global_subsumption,[],[f7603,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f1153,f3897,f2476,f7229])).
fof(f7603,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) | $spl1),
  inference(superposition,[],[f4029,f2569])).
fof(f4029,plain,(
  ( ! [X48,X49] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X49))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X49)))) ) | $spl1),
  inference(forward_demodulation,[],[f4028,f252])).
fof(f4028,plain,(
  ( ! [X48,X49] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X49))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X49)))) ) | $spl1),
  inference(forward_demodulation,[],[f4027,f252])).
fof(f4027,plain,(
  ( ! [X48,X49] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X49))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X49)))) ) | $spl1),
  inference(subsumption_resolution,[],[f3948,f3988])).
fof(f3948,plain,(
  ( ! [X48,X49] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X49))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X49)))) )),
  inference(superposition,[],[f376,f252])).
fof(f19311,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f1153,f3897,f2476,f7229])).
fof(f19310,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f1153,f3897,f2476])).
fof(f19309,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f1153,f3897])).
fof(f19308,plain,(
  $false | ($spl4 | $spl26 | $spl33)),
  inference(global_subsumption,[],[f7091,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897,f1153])).
fof(f19307,plain,(
  $false | ($spl4 | $spl6 | $spl33)),
  inference(global_subsumption,[],[f1154,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897,f1153])).
fof(f19306,plain,(
  $false | ($spl4 | $spl33)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8216,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10347,f10346,f10342,f10327,f10326,f10309,f10293,f10277,f10390,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897,f1153])).
fof(f19305,plain,(
  $false | ($spl4 | $spl41)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897,f1153])).
fof(f15322,plain,(
  ( ! [X50] : (s(bool,'F_0') = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X50,bool)) | p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0'))))) ) | $spl41),
  inference(forward_demodulation,[],[f15294,f8446])).
fof(f15294,plain,(
  ( ! [X50] : (p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X50,bool))) ) | $spl41),
  inference(superposition,[],[f332,f8446])).
fof(f14275,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(subsumption_resolution,[],[f14252,f434])).
fof(f14252,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(superposition,[],[f8446,f577])).
fof(f8446,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl41),
  inference(unit_resulting_resolution,[],[f255,f8423,f346])).
fof(f8448,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X0,'T_0')) ) | $spl41),
  inference(unit_resulting_resolution,[],[f253,f8423,f386])).
fof(f8458,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),'T_0',X0)) ) | $spl41),
  inference(unit_resulting_resolution,[],[f253,f8423,f387])).
fof(f8468,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),'F_0')) ) | $spl41),
  inference(unit_resulting_resolution,[],[f255,f8423,f388])).
fof(f8479,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl41),
  inference(unit_resulting_resolution,[],[f255,f8423,f388])).
fof(f8480,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl41),
  inference(unit_resulting_resolution,[],[f8423,f8423,f388])).
fof(f8489,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl41),
  inference(unit_resulting_resolution,[],[f253,f8423,f415])).
fof(f8492,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl41),
  inference(unit_resulting_resolution,[],[f8423,f629])).
fof(f8493,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl41),
  inference(unit_resulting_resolution,[],[f8423,f630])).
fof(f19304,plain,(
  $false | ($spl4 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f1154,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897])).
fof(f19303,plain,(
  $false | ($spl4 | $spl26 | $spl41)),
  inference(global_subsumption,[],[f7091,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897])).
fof(f19302,plain,(
  $false | ($spl4 | $spl41)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476,f3897])).
fof(f19301,plain,(
  $false | ($spl4 | $spl41)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229,f2476])).
fof(f19300,plain,(
  $false | ($spl4 | $spl41)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288,f7229])).
fof(f19299,plain,(
  $false | ($spl1 | $spl4 | $spl41)),
  inference(global_subsumption,[],[f7603,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288])).
fof(f19292,plain,(
  $false | ($spl4 | $spl36 | $spl41)),
  inference(global_subsumption,[],[f19261,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288])).
fof(f19291,plain,(
  $false | ($spl4 | $spl36 | $spl41)),
  inference(global_subsumption,[],[f19270,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288])).
fof(f19290,plain,(
  $false | ($spl4 | $spl36 | $spl41)),
  inference(global_subsumption,[],[f19272,f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288])).
fof(f19289,plain,(
  $false | ($spl4 | $spl41)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f1153,f3028,f4351,f4353,f4354,f4355,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4367,f4368,f4369,f4370,f4371,f4372,f4373,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4441,f4442,f4443,f4444,f4445,f4407,f4447,f4581,f4584,f4587,f4634,f4636,f4731,f4732,f4733,f4734,f4770,f4771,f4773,f5228,f5229,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6495,f6619,f6634,f6793,f6796,f6799,f6848,f6852,f7084,f7085,f6901,f6903,f6907,f7164,f7171,f252,f1263,f1694,f3500,f3027,f2822,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8214,f8223,f8227,f8228,f8237,f8421,f8428,f8436,f8441,f8423,f8493,f8492,f8489,f8480,f8479,f8468,f8458,f8448,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f11830,f8897,f8850,f8555,f8446,f8439,f8235,f8102,f8057,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f14275,f15322,f17810,f18099,f18003,f18001,f17815,f17814,f17794,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f18735,f18736,f18741,f19288])).
fof(f19274,plain,(
  $false | ($spl7 | $spl36)),
  inference(subsumption_resolution,[],[f19272,f7220])).
fof(f7220,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | $spl7),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f1497,f1261,f1155,f3028,f4351,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f5068,f5197,f5199,f5272,f5274,f5276,f5277,f5281,f5282,f5283,f5285,f5287,f5288,f5292,f5293,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5442,f5444,f5445,f5446,f5447,f5449,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5667,f5669,f5670,f5671,f5672,f5674,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897])).
fof(f1261,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | $spl7),
  inference(unit_resulting_resolution,[],[f1155,f353])).
fof(f1497,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | $spl7),
  inference(unit_resulting_resolution,[],[f1261,f353])).
fof(f19273,plain,(
  $false | ($spl7 | $spl36)),
  inference(subsumption_resolution,[],[f19270,f7417])).
fof(f7417,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | $spl7),
  inference(unit_resulting_resolution,[],[f7220,f353])).
fof(f18895,plain,(
  $false | ($spl7 | $spl36 | $spl87)),
  inference(subsumption_resolution,[],[f18817,f18738])).
fof(f18817,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | ($spl7 | $spl36)),
  inference(unit_resulting_resolution,[],[f7220,f8229,f350])).
fof(f18738,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl87),
  inference(cnf_transformation,[],[f18738_D])).
fof(f18738_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) <=> ~$spl87),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl87])])).
fof(f18743,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK2))) | $spl90),
  inference(cnf_transformation,[],[f18743_D])).
fof(f18743_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK2))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f18741,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8526,f2569])).
fof(f8526,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(superposition,[],[f2116,f2569])).
fof(f18740,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | $spl88),
  inference(cnf_transformation,[],[f18740_D])).
fof(f18740_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f18736,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8869,f2569])).
fof(f8869,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))))),
  inference(superposition,[],[f2788,f2569])).
fof(f7090,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl27),
  inference(cnf_transformation,[],[f7090_D])).
fof(f7090_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f18684,plain,(
  ( ! [X45] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X45)) ) | $spl84),
  inference(cnf_transformation,[],[f18684_D])).
fof(f18684_D,plain,(
  ( ! [X45] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X45)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f18683,plain,(
  ( ! [X45] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X45)) ) | $spl37),
  inference(forward_demodulation,[],[f18682,f257])).
fof(f18682,plain,(
  ( ! [X45] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X45)) ) | $spl37),
  inference(forward_demodulation,[],[f18417,f18489])).
fof(f18489,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2)) | $spl37),
  inference(forward_demodulation,[],[f18344,f260])).
fof(f18344,plain,(
  s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl37),
  inference(unit_resulting_resolution,[],[f17941,f378])).
fof(f17941,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | $spl37),
  inference(backward_demodulation,[],[f17794,f11405])).
fof(f11405,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f11404,f328])).
fof(f11404,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f11274,f8251])).
fof(f8251,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl37),
  inference(unit_resulting_resolution,[],[f255,f8230,f346])).
fof(f18417,plain,(
  ( ! [X45] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X45)) ) | $spl37),
  inference(superposition,[],[f365,f17941])).
fof(f18681,plain,(
  ( ! [X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X44))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X44)) ) | $spl82),
  inference(cnf_transformation,[],[f18681_D])).
fof(f18681_D,plain,(
  ( ! [X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X44))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X44)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f18680,plain,(
  ( ! [X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X44))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X44)) ) | $spl37),
  inference(forward_demodulation,[],[f18679,f257])).
fof(f18679,plain,(
  ( ! [X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',X44))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X44)) ) | $spl37),
  inference(forward_demodulation,[],[f18416,f18489])).
fof(f18416,plain,(
  ( ! [X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X44) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num',X44)))) ) | $spl37),
  inference(superposition,[],[f364,f17941])).
fof(f18678,plain,(
  ( ! [X43] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')))) ) | $spl80),
  inference(cnf_transformation,[],[f18678_D])).
fof(f18678_D,plain,(
  ( ! [X43] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f18579,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl74),
  inference(cnf_transformation,[],[f18579_D])).
fof(f18579_D,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f18677,plain,(
  ( ! [X43] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')))) ) | ($spl5 | $spl37)),
  inference(forward_demodulation,[],[f18676,f257])).
fof(f18676,plain,(
  ( ! [X43] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')))) ) | ($spl5 | $spl37)),
  inference(forward_demodulation,[],[f18675,f18489])).
fof(f18675,plain,(
  ( ! [X43] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18674,f7395])).
fof(f7395,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK3)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1152,f345])).
fof(f1152,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK3) | $spl5),
  inference(cnf_transformation,[],[f1152_D])).
fof(f1152_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK3) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f18674,plain,(
  ( ! [X43] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18415,f18489])).
fof(f18415,plain,(
  ( ! [X43] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f363,f17941])).
fof(f18673,plain,(
  ( ! [X41] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl78),
  inference(cnf_transformation,[],[f18673_D])).
fof(f18673_D,plain,(
  ( ! [X41] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f18672,plain,(
  ( ! [X41] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl37),
  inference(forward_demodulation,[],[f18671,f257])).
fof(f18671,plain,(
  ( ! [X41] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl37),
  inference(forward_demodulation,[],[f18413,f18489])).
fof(f18413,plain,(
  ( ! [X41] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f362,f17941])).
fof(f18663,plain,(
  ( ! [X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) ) | $spl76),
  inference(cnf_transformation,[],[f18663_D])).
fof(f18663_D,plain,(
  ( ! [X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f18670,plain,(
  ( ! [X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl5 | $spl37)),
  inference(global_subsumption,[],[f251,f253,f256,f257,f258,f259,f260,f262,f267,f266,f321,f322,f323,f329,f335,f336,f425,f337,f345,f349,f346,f354,f353,f356,f371,f374,f378,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f462,f471,f485,f539,f538,f534,f532,f530,f528,f577,f629,f630,f643,f731,f746,f819,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1269,f1292,f1421,f1432,f1435,f1450,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1701,f1703,f1704,f1705,f1706,f1773,f1839,f1849,f1862,f1867,f2001,f2054,f2068,f2179,f2193,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2596,f2607,f2608,f3467,f3531,f3555,f2497,f2310,f3028,f4351,f5492,f5625,f5956,f5953,f5946,f5939,f5938,f5937,f5929,f5928,f6196,f6084,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1694,f3500,f3027,f2822,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1576,f1568,f1563,f1561,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2870,f3897,f1152,f7410,f7395,f7394,f7479,f7478,f7474,f7469,f7468,f7461,f7455,f7449,f7432,f7430,f7901,f7775,f7782,f7783,f7791,f7821,f7942,f7966,f8089,f8091,f8099,f8142,f8137,f8133,f8162,f8130,f8159,f8190,f8214,f8223,f8227,f8228,f8237,f8230,f8299,f8298,f8294,f8285,f8284,f8273,f8263,f8253,f8245,f8379,f8378,f8375,f8366,f8365,f8354,f8344,f8334,f8421,f8428,f8436,f8441,f8536,f8544,f8550,f8756,f8839,f8847,f8852,f8931,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9026,f9059,f9075,f9470,f9467,f9461,f9455,f9453,f9445,f9444,f9197,f9195,f9194,f9193,f8803,f8800,f8799,f8695,f8686,f8678,f8675,f8143,f7414,f7411,f7405,f5293,f5288,f5287,f5285,f5283,f5282,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3207,f3206,f3204,f3202,f3201,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f11405,f11759,f11768,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11831,f12125,f12181,f12201,f12218,f12313,f12392,f12393,f12782,f12786,f12788,f12789,f12790,f12791,f12803,f12484,f12823,f12825,f1489,f1820,f1487,f12475,f12483,f12474,f12406,f12405,f12312,f12304,f12303,f12815,f12814,f2660,f1492,f1467,f334,f333,f332,f2401,f2941,f1482,f8058,f8060,f1920,f12817,f6253,f2136,f1486,f424,f9227,f7964,f1787,f2287,f12816,f10997,f5199,f1485,f1484,f1483,f265,f11037,f12294,f11828,f11233,f11187,f11162,f11101,f11085,f11083,f11082,f11081,f11080,f11078,f11060,f7230,f12292,f11829,f11470,f11424,f11400,f11338,f11322,f11320,f11319,f11318,f11317,f11315,f11297,f7790,f7231,f2918,f2383,f8095,f9216,f11222,f11459,f8085,f8092,f12811,f10987,f8103,f8093,f8086,f8084,f2048,f8224,f2055,f7789,f7918,f9447,f9024,f9217,f5609,f9170,f11223,f11176,f11460,f11413,f8209,f8219,f1945,f2056,f2270,f2382,f2917,f12810,f10988,f8236,f8220,f8210,f8208,f2059,f2064,f6193,f5738,f5510,f3556,f3490,f2063,f376,f275,f274,f9169,f7917,f5932,f11175,f11412,f2065,f2269,f1955,f6053,f6052,f12809,f12808,f12807,f12805,f12804,f12802,f12279,f12278,f12213,f12174,f11827,f11826,f10947,f10946,f10746,f9160,f8234,f8233,f8101,f8100,f5791,f5757,f5746,f5745,f5687,f5674,f5672,f5671,f5670,f5669,f5667,f5649,f5563,f5529,f5518,f5517,f5509,f5508,f5459,f5449,f5447,f5446,f5445,f5444,f5442,f5424,f3646,f3645,f3499,f3310,f2996,f2067,f2062,f2061,f2060,f2058,f2051,f2050,f2049,f2044,f1982,f1967,f1966,f1957,f379,f377,f375,f373,f372,f352,f342,f341,f339,f2385,f2920,f2940,f8432,f8843,f9218,f9221,f1631,f11224,f11228,f11461,f11465,f8438,f8849,f8437,f8848,f8419,f8429,f8834,f8840,f12801,f12800,f10993,f10989,f8851,f8841,f8835,f8833,f8440,f8430,f8420,f8418,f2776,f2106,f8548,f8888,f2112,f2780,f8932,f8906,f6249,f6199,f2779,f2705,f2111,f9219,f9223,f2689,f9172,f9214,f7920,f7960,f11225,f11230,f11178,f11219,f11462,f11467,f11415,f11456,f8554,f8896,f5748,f5789,f5720,f5970,f8553,f8894,f5520,f5561,f8533,f8541,f8878,f8883,f2113,f2267,f2272,f2772,f2782,f2384,f2919,f2939,f12799,f12798,f10994,f10990,f8898,f8884,f8880,f8876,f8556,f8542,f8534,f8532,f2788,f2116,f2121,f2791,f7914,f7919,f7958,f5930,f9212,f9171,f9166,f358,f11177,f11217,f11414,f11454,f5747,f5787,f5519,f5559,f3089,f3061,f2792,f2786,f2286,f2271,f2122,f1772,f1700,f12806,f12797,f12796,f12795,f12794,f12793,f12792,f10985,f10984,f10949,f10948,f2794,f2789,f2787,f2785,f2784,f2777,f2774,f2770,f2124,f2119,f2118,f2117,f2115,f2109,f2108,f2107,f427,f359,f357,f351,f350,f343,f340,f12309,f12480,f12217,f12180,f12127,f12096,f12095,f11830,f11770,f8897,f8850,f8555,f8439,f8332,f8251,f8235,f8102,f8057,f7447,f5581,f5361,f5292,f5281,f5197,f3764,f3696,f3211,f3200,f3170,f3169,f3127,f3126,f2793,f2783,f2659,f2657,f2595,f2135,f2123,f2114,f2066,f2057,f1956,f1702,f1491,f1490,f1488,f1474,f1473,f1466,f1268,f1144,f859,f780,f779,f770,f529,f455,f328,f271,f270,f255,f15690,f15695,f15847,f15843,f15832,f15821,f15819,f15928,f15929,f15932,f17794,f17941,f17943,f17944,f17810,f17814,f17815,f18001,f18003,f18099,f18489,f18492,f18493,f18494,f18495,f18496,f18498,f18501,f18515,f18503,f18517,f18518,f18507,f18508,f18551,f18577,f18582,f18588,f18600,f18603,f18607,f18609,f18613,f18616,f18625,f18629,f18631,f18635,f18636,f18639,f18653,f18655,f18657,f18662,f18665,f18667,f18669])).
fof(f18669,plain,(
  ( ! [X40] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl37),
  inference(forward_demodulation,[],[f18668,f257])).
fof(f18668,plain,(
  ( ! [X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl37),
  inference(forward_demodulation,[],[f18412,f18489])).
fof(f18412,plain,(
  ( ! [X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl37),
  inference(superposition,[],[f362,f17941])).
fof(f18667,plain,(
  ( ! [X39] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39)) ) | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18666,f7395])).
fof(f18666,plain,(
  ( ! [X39] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39)) ) | $spl37),
  inference(forward_demodulation,[],[f18411,f18489])).
fof(f18411,plain,(
  ( ! [X39] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39)) ) | $spl37),
  inference(superposition,[],[f361,f17941])).
fof(f18665,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X38)) ) | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18664,f7395])).
fof(f18664,plain,(
  ( ! [X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X38)) ) | $spl37),
  inference(forward_demodulation,[],[f18410,f18489])).
fof(f18410,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X38) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f361,f17941])).
fof(f18657,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X34)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X34))))) ) | $spl37),
  inference(forward_demodulation,[],[f18656,f257])).
fof(f18656,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X34)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X34))))) ) | $spl37),
  inference(forward_demodulation,[],[f18406,f18489])).
fof(f18406,plain,(
  ( ! [X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X34)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))))))) ) | $spl37),
  inference(superposition,[],[f359,f17941])).
fof(f18655,plain,(
  ( ! [X33] : (s('type.num.num',sK3) != s('type.num.num',X33) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl37),
  inference(forward_demodulation,[],[f18654,f257])).
fof(f18654,plain,(
  ( ! [X33] : (s('type.num.num',X33) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl37),
  inference(forward_demodulation,[],[f18405,f18489])).
fof(f18405,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num',X33) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f358,f17941])).
fof(f18653,plain,(
  ( ! [X31] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num',sK3)))) | s('type.num.num',sK3) = s('type.num.num',X31) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl37),
  inference(forward_demodulation,[],[f18652,f257])).
fof(f18652,plain,(
  ( ! [X31] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | s('type.num.num',sK3) = s('type.num.num',X31) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl37),
  inference(forward_demodulation,[],[f18651,f18489])).
fof(f18651,plain,(
  ( ! [X31] : (s('type.num.num',sK3) = s('type.num.num',X31) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))))) ) | $spl37),
  inference(forward_demodulation,[],[f18650,f257])).
fof(f18650,plain,(
  ( ! [X31] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))))) ) | $spl37),
  inference(forward_demodulation,[],[f18403,f18489])).
fof(f18403,plain,(
  ( ! [X31] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))))) ) | $spl37),
  inference(superposition,[],[f357,f17941])).
fof(f18639,plain,(
  ( ! [X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X27)) ) | $spl37),
  inference(forward_demodulation,[],[f18638,f257])).
fof(f18638,plain,(
  ( ! [X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X27)) ) | $spl37),
  inference(forward_demodulation,[],[f18399,f18489])).
fof(f18399,plain,(
  ( ! [X27] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X27) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(superposition,[],[f354,f17941])).
fof(f18636,plain,(
  ( ! [X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))) ) | $spl37),
  inference(forward_demodulation,[],[f18397,f18489])).
fof(f18397,plain,(
  ( ! [X25] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f353,f17941])).
fof(f18635,plain,(
  ( ! [X24] : (s('type.num.num',sK3) != s('type.num.num',X24) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18634,f257])).
fof(f18634,plain,(
  ( ! [X24] : (s('type.num.num',X24) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18396,f18489])).
fof(f18396,plain,(
  ( ! [X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X24) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f352,f17941])).
fof(f18631,plain,(
  ( ! [X21] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X21)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21))))) ) | $spl37),
  inference(forward_demodulation,[],[f18630,f257])).
fof(f18630,plain,(
  ( ! [X21] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',X21)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21))))) ) | $spl37),
  inference(forward_demodulation,[],[f18393,f18489])).
fof(f18393,plain,(
  ( ! [X21] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num',X21))))) ) | $spl37),
  inference(superposition,[],[f351,f17941])).
fof(f18629,plain,(
  ( ! [X20] : (s('type.num.num',sK3) = s('type.num.num',X20) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',sK3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18628,f257])).
fof(f18628,plain,(
  ( ! [X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',sK3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18627,f18489])).
fof(f18627,plain,(
  ( ! [X20] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',sK3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18626,f257])).
fof(f18626,plain,(
  ( ! [X20] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18392,f18489])).
fof(f18392,plain,(
  ( ! [X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f350,f17941])).
fof(f18625,plain,(
  ( ! [X19] : (s('type.num.num',sK3) = s('type.num.num',X19) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',X19))))) ) | $spl37),
  inference(forward_demodulation,[],[f18624,f257])).
fof(f18624,plain,(
  ( ! [X19] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',X19))))) ) | $spl37),
  inference(forward_demodulation,[],[f18623,f18489])).
fof(f18623,plain,(
  ( ! [X19] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',X19)))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18622,f257])).
fof(f18622,plain,(
  ( ! [X19] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',X19)))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18621,f18489])).
fof(f18621,plain,(
  ( ! [X19] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num',X19)))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(subsumption_resolution,[],[f18620,f253])).
fof(f18620,plain,(
  ( ! [X19] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num',X19)))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18391,f440])).
fof(f18391,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num',X19)))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f350,f17941])).
fof(f18616,plain,(
  ( ! [X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X16)),s('type.num.num',sK3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))))) ) | $spl37),
  inference(forward_demodulation,[],[f18615,f257])).
fof(f18615,plain,(
  ( ! [X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X16)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))))) ) | $spl37),
  inference(forward_demodulation,[],[f18388,f18489])).
fof(f18388,plain,(
  ( ! [X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)),X16)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(superposition,[],[f343,f17941])).
fof(f18613,plain,(
  ( ! [X14] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X14)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18612,f257])).
fof(f18612,plain,(
  ( ! [X14] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18611,f18489])).
fof(f18611,plain,(
  ( ! [X14] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(subsumption_resolution,[],[f18610,f253])).
fof(f18610,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18386,f440])).
fof(f18386,plain,(
  ( ! [X14] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(superposition,[],[f342,f17941])).
fof(f18609,plain,(
  ( ! [X13] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18608,f257])).
fof(f18608,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),s('type.num.num',X13))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18385,f18489])).
fof(f18385,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))),s('type.num.num',X13)))) ) | $spl37),
  inference(superposition,[],[f342,f17941])).
fof(f18607,plain,(
  ( ! [X12] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',sK3))),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18606,f257])).
fof(f18606,plain,(
  ( ! [X12] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18605,f18489])).
fof(f18605,plain,(
  ( ! [X12] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(subsumption_resolution,[],[f18604,f253])).
fof(f18604,plain,(
  ( ! [X12] : (~p(s(bool,'T_0')) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18384,f440])).
fof(f18384,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(superposition,[],[f341,f17941])).
fof(f18603,plain,(
  ( ! [X11] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X11))),s('type.num.num',X11))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18602,f257])).
fof(f18602,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',X11))),s('type.num.num',X11))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f18383,f18489])).
fof(f18383,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num',X11))),s('type.num.num',X11)))) ) | $spl37),
  inference(superposition,[],[f341,f17941])).
fof(f18600,plain,(
  ( ! [X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))))) ) | $spl37),
  inference(forward_demodulation,[],[f18599,f257])).
fof(f18599,plain,(
  ( ! [X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))))) ) | $spl37),
  inference(forward_demodulation,[],[f18598,f18489])).
fof(f18598,plain,(
  ( ! [X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))))) ) | $spl37),
  inference(forward_demodulation,[],[f18381,f336])).
fof(f18381,plain,(
  ( ! [X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))),s('type.num.num',X9))))) ) | $spl37),
  inference(superposition,[],[f340,f17941])).
fof(f18588,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',sK3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) ) | $spl37),
  inference(forward_demodulation,[],[f18366,f18489])).
fof(f18366,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f378,f17941])).
fof(f18582,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl37),
  inference(forward_demodulation,[],[f18581,f257])).
fof(f18581,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl37),
  inference(forward_demodulation,[],[f18580,f18489])).
fof(f18580,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))),s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.|48|_0')))) ) | $spl37),
  inference(forward_demodulation,[],[f18364,f260])).
fof(f18364,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))),s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))) ) | $spl37),
  inference(superposition,[],[f372,f17941])).
fof(f18551,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl37),
  inference(forward_demodulation,[],[f18550,f257])).
fof(f18550,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl37),
  inference(forward_demodulation,[],[f18549,f18489])).
fof(f18549,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl37),
  inference(forward_demodulation,[],[f18335,f328])).
fof(f18335,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f328,f17941,f365])).
fof(f18508,plain,(
  ( ! [X72] : (s('type.num.num',X72) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X72)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X72))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f18003])).
fof(f18507,plain,(
  ( ! [X71] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X71,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num',sK2))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f18001])).
fof(f18518,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18506,f257])).
fof(f18506,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f17944])).
fof(f18517,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18505,f258])).
fof(f18505,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f17943])).
fof(f18503,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',sK1))) | s('type.num.num',sK2) != s('type.num.num',X1)) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f17815])).
fof(f18515,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X0)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18502,f257])).
fof(f18502,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X0)))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f17814])).
fof(f18501,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl37),
  inference(backward_demodulation,[],[f18489,f17794])).
fof(f18498,plain,(
  ( ! [X44] : (s('type.num.num',sK2) = s('type.num.num',sK5('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X44,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X44),s('type.num.num',sK2))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f2401])).
fof(f18496,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X11)),s('type.num.num',sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X11))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f2385])).
fof(f18495,plain,(
  ( ! [X10] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))),s('type.num.num',X10))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',sK2))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f2384])).
fof(f18494,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)),X9)),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f2383])).
fof(f18493,plain,(
  ( ! [X8] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))),s('type.num.num',X8))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK2))))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f2382])).
fof(f18492,plain,(
  ( ! [X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))) ) | $spl37),
  inference(backward_demodulation,[],[f18489,f2336])).
fof(f17944,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(backward_demodulation,[],[f17794,f12096])).
fof(f17943,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK7(sK1,sK2)))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(backward_demodulation,[],[f17794,f12095])).
fof(f15932,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X11,bool)) | p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'T_0'))))) ) | $spl5),
  inference(forward_demodulation,[],[f15903,f9453])).
fof(f15903,plain,(
  ( ! [X11] : (p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X11,bool))) ) | $spl5),
  inference(superposition,[],[f332,f9453])).
fof(f15929,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X6) | p(s(bool,X5))) ) | $spl5),
  inference(subsumption_resolution,[],[f15898,f253])).
fof(f15898,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X6)) ) | $spl5),
  inference(superposition,[],[f387,f9453])).
fof(f15928,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | p(s(bool,X3))) ) | $spl5),
  inference(subsumption_resolution,[],[f15897,f253])).
fof(f15897,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))) ) | $spl5),
  inference(superposition,[],[f386,f9453])).
fof(f15819,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3))) | $spl5),
  inference(unit_resulting_resolution,[],[f253,f9447,f349])).
fof(f15821,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f9447,f386])).
fof(f15832,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3)),X0)) ) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f9447,f387])).
fof(f15843,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3))) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f9447,f415])).
fof(f15847,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3)),X0,X1)) ) | $spl5),
  inference(unit_resulting_resolution,[],[f9447,f416])).
fof(f15695,plain,(
  ( ! [X13] : (s(bool,'F_0') = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X13,bool)) | p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'F_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f15683,f8332])).
fof(f15683,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) = s(bool,sK5('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X13,bool))) ) | $spl37),
  inference(superposition,[],[f332,f8332])).
fof(f15690,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl37),
  inference(subsumption_resolution,[],[f15661,f434])).
fof(f15661,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl37),
  inference(superposition,[],[f8332,f577])).
fof(f7447,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f7394,f346])).
fof(f8332,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl37),
  inference(unit_resulting_resolution,[],[f255,f8245,f346])).
fof(f11770,plain,(
  ( ! [X20] : (s(bool,'F_0') = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),X20,bool)) | p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'F_0'))))) ) | $spl5),
  inference(forward_demodulation,[],[f11749,f7447])).
fof(f11749,plain,(
  ( ! [X20] : (p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),X20,bool))) ) | $spl5),
  inference(superposition,[],[f332,f7447])).
fof(f12095,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(superposition,[],[f372,f8251])).
fof(f12096,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | $spl37),
  inference(superposition,[],[f373,f8251])).
fof(f12127,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X16,bool)) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0'))))) ) | $spl37),
  inference(forward_demodulation,[],[f12112,f8251])).
fof(f12112,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) = s(bool,sK5('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X16,bool))) ) | $spl37),
  inference(superposition,[],[f332,f8251])).
fof(f9447,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3)))) | $spl5),
  inference(unit_resulting_resolution,[],[f8931,f340])).
fof(f12125,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X13)) ) | $spl37),
  inference(subsumption_resolution,[],[f12110,f255])).
fof(f12110,plain,(
  ( ! [X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X13)) ) | $spl37),
  inference(superposition,[],[f643,f8251])).
fof(f11768,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X17)) ) | $spl5),
  inference(subsumption_resolution,[],[f11747,f255])).
fof(f11747,plain,(
  ( ! [X17] : (p(s(bool,'F_0')) | s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X17)) ) | $spl5),
  inference(superposition,[],[f643,f7447])).
fof(f11759,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X1))) | s('type.num.num',sK3) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl5),
  inference(subsumption_resolution,[],[f11725,f255])).
fof(f11725,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X1))) | s('type.num.num',sK3) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl5),
  inference(superposition,[],[f376,f7447])).
fof(f7405,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl5),
  inference(unit_resulting_resolution,[],[f1152,f1152,f361])).
fof(f7411,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',sK3)))) ) | $spl5),
  inference(forward_demodulation,[],[f7407,f257])).
fof(f7407,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK3)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1129,f1152,f361])).
fof(f7414,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl5),
  inference(forward_demodulation,[],[f7401,f257])).
fof(f7401,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1129,f1152,f361])).
fof(f8143,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f7395,f362])).
fof(f8799,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) ) | $spl5),
  inference(forward_demodulation,[],[f8693,f257])).
fof(f8693,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f1697,f361])).
fof(f8803,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',sK3)))) ) | $spl5),
  inference(forward_demodulation,[],[f8684,f257])).
fof(f8684,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f1697,f361])).
fof(f9444,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.|48|_0',sK3)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl5),
  inference(unit_resulting_resolution,[],[f8931,f427])).
fof(f9445,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.|48|_0',sK3)),s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(unit_resulting_resolution,[],[f8931,f343])).
fof(f9453,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl5),
  inference(unit_resulting_resolution,[],[f253,f8931,f349])).
fof(f9455,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f8931,f386])).
fof(f9461,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X0)) ) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f8931,f387])).
fof(f9467,plain,(
  s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f8931,f415])).
fof(f9470,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),X0,X1)) ) | $spl5),
  inference(unit_resulting_resolution,[],[f8931,f416])).
fof(f8931,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))) | $spl5),
  inference(forward_demodulation,[],[f8913,f257])).
fof(f8913,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f2705])).
fof(f8334,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0,'T_0')) ) | $spl37),
  inference(unit_resulting_resolution,[],[f253,f8245,f386])).
fof(f8344,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'T_0',X0)) ) | $spl37),
  inference(unit_resulting_resolution,[],[f253,f8245,f387])).
fof(f8354,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'F_0')) ) | $spl37),
  inference(unit_resulting_resolution,[],[f255,f8245,f388])).
fof(f8365,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f255,f8245,f388])).
fof(f8366,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f8245,f8245,f388])).
fof(f8375,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl37),
  inference(unit_resulting_resolution,[],[f253,f8245,f415])).
fof(f8378,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f8245,f629])).
fof(f8379,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl37),
  inference(unit_resulting_resolution,[],[f8245,f630])).
fof(f8245,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl37),
  inference(unit_resulting_resolution,[],[f8230,f351])).
fof(f8253,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0,'T_0')) ) | $spl37),
  inference(unit_resulting_resolution,[],[f253,f8230,f386])).
fof(f8263,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'T_0',X0)) ) | $spl37),
  inference(unit_resulting_resolution,[],[f253,f8230,f387])).
fof(f8273,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'F_0')) ) | $spl37),
  inference(unit_resulting_resolution,[],[f255,f8230,f388])).
fof(f8284,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f255,f8230,f388])).
fof(f8285,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f8230,f8230,f388])).
fof(f8294,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl37),
  inference(unit_resulting_resolution,[],[f253,f8230,f415])).
fof(f8298,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f8230,f629])).
fof(f8299,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl37),
  inference(unit_resulting_resolution,[],[f8230,f630])).
fof(f8190,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7410,f353])).
fof(f8159,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) ) | $spl5),
  inference(superposition,[],[f7395,f425])).
fof(f8130,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK3)))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f353])).
fof(f8162,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | $spl5),
  inference(forward_demodulation,[],[f8132,f252])).
fof(f8132,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3))))) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f1263])).
fof(f8133,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',sK3))),s('type.num.num',X1)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7395,f378])).
fof(f8137,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3)))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1129,f7395,f362])).
fof(f8142,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1129,f7395,f362])).
fof(f7430,plain,(
  ( ! [X0] : (s('type.num.num',sK3) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1129,f7394,f376])).
fof(f7432,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK3) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',X0)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f1129,f7394,f376])).
fof(f7449,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),X0,'T_0')) ) | $spl5),
  inference(unit_resulting_resolution,[],[f253,f7394,f386])).
fof(f7455,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),'T_0',X0)) ) | $spl5),
  inference(unit_resulting_resolution,[],[f253,f7394,f387])).
fof(f7461,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),'F_0')) ) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f7394,f388])).
fof(f7468,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f255,f7394,f388])).
fof(f7469,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7394,f7394,f388])).
fof(f7474,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0'))) | $spl5),
  inference(unit_resulting_resolution,[],[f253,f7394,f415])).
fof(f7478,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7394,f629])).
fof(f7479,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl5),
  inference(unit_resulting_resolution,[],[f7394,f630])).
fof(f7394,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))) | $spl5),
  inference(unit_resulting_resolution,[],[f1152,f274])).
fof(f7410,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) | $spl5),
  inference(unit_resulting_resolution,[],[f1152,f353])).
fof(f18662,plain,(
  ( ! [X36] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) ) | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18661,f7395])).
fof(f18661,plain,(
  ( ! [X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) ) | $spl37),
  inference(forward_demodulation,[],[f18660,f18489])).
fof(f18660,plain,(
  ( ! [X36] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18659,f257])).
fof(f18659,plain,(
  ( ! [X36] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18408,f18489])).
fof(f18408,plain,(
  ( ! [X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f360,f17941])).
fof(f18644,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18643,f7395])).
fof(f18643,plain,(
  ( ! [X29] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18642,f257])).
fof(f18642,plain,(
  ( ! [X29] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18479,f18489])).
fof(f18479,plain,(
  ( ! [X29] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(trivial_inequality_removal,[],[f18401])).
fof(f18401,plain,(
  ( ! [X29] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(superposition,[],[f356,f17941])).
fof(f18619,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18618,f7395])).
fof(f18618,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18617,f18489])).
fof(f18617,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | $spl37),
  inference(subsumption_resolution,[],[f18390,f258])).
fof(f18390,plain,(
  ( ! [X18] : (s('type.num.num',X18) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))) ) | $spl37),
  inference(superposition,[],[f345,f17941])).
fof(f18597,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18596,f255])).
fof(f18596,plain,(
  p(s(bool,'F_0')) | ($spl5 | $spl37)),
  inference(forward_demodulation,[],[f18595,f7447])).
fof(f18595,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(forward_demodulation,[],[f18594,f257])).
fof(f18594,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(forward_demodulation,[],[f18480,f18489])).
fof(f18480,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(trivial_inequality_removal,[],[f18373])).
fof(f18373,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(superposition,[],[f275,f17941])).
fof(f18593,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18592,f7395])).
fof(f18592,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18591,f18489])).
fof(f18591,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | $spl37),
  inference(subsumption_resolution,[],[f18590,f253])).
fof(f18590,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18372,f440])).
fof(f18372,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))) | $spl37),
  inference(superposition,[],[f274,f17941])).
fof(f18577,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18363,f1152])).
fof(f18363,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl37),
  inference(superposition,[],[f363,f17941])).
fof(f18575,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18574,f1152])).
fof(f18574,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | $spl37),
  inference(subsumption_resolution,[],[f18359,f18489])).
fof(f18359,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK7(sK1,sK2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | $spl37),
  inference(superposition,[],[f345,f17941])).
fof(f18573,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18572,f8159])).
fof(f18572,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | $spl37),
  inference(forward_demodulation,[],[f18358,f18489])).
fof(f18358,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | $spl37),
  inference(superposition,[],[f336,f17941])).
fof(f18571,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18357,f18489])).
fof(f18357,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK7(sK1,sK2)) | ($spl5 | $spl37)),
  inference(superposition,[],[f7395,f17941])).
fof(f18570,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18569,f255])).
fof(f18569,plain,(
  p(s(bool,'F_0')) | ($spl5 | $spl37)),
  inference(forward_demodulation,[],[f18568,f7447])).
fof(f18568,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(forward_demodulation,[],[f18567,f257])).
fof(f18567,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(forward_demodulation,[],[f18329,f18489])).
fof(f18329,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))),s('type.num.num','const.num.|48|_0')))) | $spl37),
  inference(unit_resulting_resolution,[],[f17941,f275])).
fof(f18548,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18547,f7395])).
fof(f18547,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18546,f257])).
fof(f18546,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18545,f257])).
fof(f18545,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | $spl37),
  inference(forward_demodulation,[],[f18336,f18489])).
fof(f18336,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))) | $spl37),
  inference(unit_resulting_resolution,[],[f257,f17941,f364])).
fof(f18544,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18543,f7395])).
fof(f18543,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18542,f258])).
fof(f18542,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18541,f257])).
fof(f18541,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | $spl37),
  inference(forward_demodulation,[],[f18337,f18489])).
fof(f18337,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))) | $spl37),
  inference(unit_resulting_resolution,[],[f258,f17941,f364])).
fof(f18540,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18539,f7395])).
fof(f18539,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18538,f259])).
fof(f18538,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18537,f257])).
fof(f18537,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | $spl37),
  inference(forward_demodulation,[],[f18338,f18489])).
fof(f18338,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3))))) | $spl37),
  inference(unit_resulting_resolution,[],[f259,f17941,f364])).
fof(f18536,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18535,f7395])).
fof(f18535,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18534,f2612])).
fof(f18534,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18533,f257])).
fof(f18533,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18339,f18489])).
fof(f18339,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f2612,f17941,f364])).
fof(f18532,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18531,f7395])).
fof(f18531,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18530,f329])).
fof(f18530,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18529,f257])).
fof(f18529,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18340,f18489])).
fof(f18340,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f329,f17941,f364])).
fof(f18528,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18527,f7395])).
fof(f18527,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK3))) | $spl37),
  inference(forward_demodulation,[],[f18526,f328])).
fof(f18526,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18525,f257])).
fof(f18525,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18341,f18489])).
fof(f18341,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f328,f17941,f364])).
fof(f18524,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18523,f7395])).
fof(f18523,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK3)))) ) | $spl37),
  inference(forward_demodulation,[],[f18522,f257])).
fof(f18522,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | $spl37),
  inference(forward_demodulation,[],[f18343,f18489])).
fof(f18343,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK3)))))) ) | $spl37),
  inference(unit_resulting_resolution,[],[f17941,f356])).
fof(f18516,plain,(
  $false | ($spl5 | $spl37)),
  inference(subsumption_resolution,[],[f18504,f7395])).
fof(f18504,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl37),
  inference(backward_demodulation,[],[f18489,f17941])).
fof(f18513,plain,(
  $false | ($spl7 | $spl37)),
  inference(subsumption_resolution,[],[f18512,f7417])).
fof(f18512,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | $spl37),
  inference(forward_demodulation,[],[f18491,f257])).
fof(f18491,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl37),
  inference(backward_demodulation,[],[f18489,f2309])).
fof(f18511,plain,(
  $false | ($spl7 | $spl37)),
  inference(subsumption_resolution,[],[f18510,f7220])).
fof(f18510,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) | $spl37),
  inference(forward_demodulation,[],[f18490,f257])).
fof(f18490,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl37),
  inference(backward_demodulation,[],[f18489,f2125])).
fof(f17948,plain,(
  s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl72),
  inference(cnf_transformation,[],[f17948_D])).
fof(f17948_D,plain,(
  s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f3782,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl19),
  inference(cnf_transformation,[],[f3782_D])).
fof(f3782_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f17950,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl24),
  inference(subsumption_resolution,[],[f17812,f5803])).
fof(f5803,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl24),
  inference(unit_resulting_resolution,[],[f257,f4021,f364])).
fof(f17812,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f362,f2125])).
fof(f17946,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2)) | $spl70),
  inference(cnf_transformation,[],[f17946_D])).
fof(f17946_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2)) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f17949,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2)) | $spl1),
  inference(subsumption_resolution,[],[f17811,f4120])).
fof(f4120,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl1),
  inference(unit_resulting_resolution,[],[f3988,f352])).
fof(f17811,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2))),
  inference(superposition,[],[f361,f2125])).
fof(f17810,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK7(sK1,sK2)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK7(sK1,sK2))),
  inference(superposition,[],[f360,f2125])).
fof(f13953,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937,f13944,f13220,f13950,f13952])).
fof(f13952,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',sK1))))) | $spl66),
  inference(forward_demodulation,[],[f13223,f329])).
fof(f13223,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',sK1))))) | $spl66),
  inference(backward_demodulation,[],[f12784,f11037])).
fof(f13950,plain,(
  ( ! [X35,X36] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X35)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13222,f329])).
fof(f13222,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X35))))) | s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X35)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11828])).
fof(f13220,plain,(
  ( ! [X52,X51] : (s('type.num.num',X52) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X51))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X51)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11187])).
fof(f13944,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X133),s('type.num.num',X134))) | s('type.num.num',X133) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X132))))),s('type.num.num',X134)))) ) | $spl66),
  inference(forward_demodulation,[],[f13218,f329])).
fof(f13218,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X133),s('type.num.num',X134))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X132))))) | s('type.num.num',X133) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X132))))),s('type.num.num',X134)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11101])).
fof(f13937,plain,(
  ( ! [X83,X84] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X83))))))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(forward_demodulation,[],[f13216,f329])).
fof(f13216,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X83))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X83))))))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11083])).
fof(f13935,plain,(
  ( ! [X81,X82] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X81))))),s('type.num.num',X82))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(forward_demodulation,[],[f13215,f329])).
fof(f13215,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X81))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X81))))),s('type.num.num',X82))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11082])).
fof(f13919,plain,(
  ( ! [X0] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13210,f329])).
fof(f13210,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7230])).
fof(f13917,plain,(
  ( ! [X37,X38] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3)))) ) | $spl66),
  inference(forward_demodulation,[],[f13209,f329])).
fof(f13209,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X37))))) | s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11829])).
fof(f13207,plain,(
  ( ! [X52,X51] : (s('type.num.num',X52) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X51))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X51))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11424])).
fof(f13911,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X133),s('type.num.num',X134))) | s('type.num.num',X133) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X132))),s('type.num.num',sK3))),s('type.num.num',X134)))) ) | $spl66),
  inference(forward_demodulation,[],[f13205,f329])).
fof(f13205,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X133),s('type.num.num',X134))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X132))))) | s('type.num.num',X133) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X132))),s('type.num.num',sK3))),s('type.num.num',X134)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11338])).
fof(f13904,plain,(
  ( ! [X83,X84] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X83))),s('type.num.num',sK3))))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(forward_demodulation,[],[f13203,f329])).
fof(f13203,plain,(
  ( ! [X83,X84] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X83))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X83))),s('type.num.num',sK3))))) | s('type.num.num',X84) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11320])).
fof(f13902,plain,(
  ( ! [X81,X82] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X81))),s('type.num.num',sK3))),s('type.num.num',X82))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(forward_demodulation,[],[f13202,f329])).
fof(f13202,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X81))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X81))),s('type.num.num',sK3))),s('type.num.num',X82))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11319])).
fof(f13886,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13197,f329])).
fof(f13197,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7790])).
fof(f13884,plain,(
  ( ! [X1] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK3)))) ) | $spl66),
  inference(forward_demodulation,[],[f13196,f329])).
fof(f13196,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK3))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7231])).
fof(f13882,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X9)),s('type.num.num',sK2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13195,f253])).
fof(f13195,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X9)),s('type.num.num',sK2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2918])).
fof(f13880,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X9)),s('type.num.num',sK2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13194,f253])).
fof(f13194,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X9)),s('type.num.num',sK2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2383])).
fof(f13878,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13193,f253])).
fof(f13193,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8095])).
fof(f13876,plain,(
  ( ! [X206] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13192,f253])).
fof(f13192,plain,(
  ( ! [X206] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9216])).
fof(f13874,plain,(
  ( ! [X192] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13873,f12784])).
fof(f13873,plain,(
  ( ! [X192] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X192))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13191,f253])).
fof(f13191,plain,(
  ( ! [X192] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X192))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11222])).
fof(f13871,plain,(
  ( ! [X192] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13870,f12784])).
fof(f13870,plain,(
  ( ! [X192] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13190,f253])).
fof(f13190,plain,(
  ( ! [X192] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X192))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X192)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11459])).
fof(f13868,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13189,f253])).
fof(f13189,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8085])).
fof(f13866,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13188,f253])).
fof(f13188,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8092])).
fof(f13864,plain,(
  ( ! [X294,X293] : (s('type.num.num',X293) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X294))),s('type.num.num',X294)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13186,f253])).
fof(f13186,plain,(
  ( ! [X294,X293] : (~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X294))),s('type.num.num',X294)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10987])).
fof(f13862,plain,(
  ( ! [X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13185,f253])).
fof(f13185,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8103])).
fof(f13860,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13184,f253])).
fof(f13184,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8093])).
fof(f13858,plain,(
  ( ! [X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13183,f253])).
fof(f13183,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8086])).
fof(f13856,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13182,f253])).
fof(f13182,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8084])).
fof(f13854,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13181,f253])).
fof(f13181,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2048])).
fof(f13852,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13180,f253])).
fof(f13180,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8224])).
fof(f13850,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13179,f253])).
fof(f13179,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2055])).
fof(f13848,plain,(
  ( ! [X0] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num',X0)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13178,f329])).
fof(f13178,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num',X0))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',X0)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7789])).
fof(f13846,plain,(
  ( ! [X14] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13177,f253])).
fof(f13177,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7918])).
fof(f13844,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X9)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13173,f329])).
fof(f13173,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X9))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9024])).
fof(f13842,plain,(
  ( ! [X207] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X207)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13172,f253])).
fof(f13172,plain,(
  ( ! [X207] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X207)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9217])).
fof(f13840,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X4))),s('type.num.num',X3)))) ) | $spl66),
  inference(forward_demodulation,[],[f13171,f329])).
fof(f13171,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X4))),s('type.num.num',X3))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5609])).
fof(f13838,plain,(
  ( ! [X45,X44] : (s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X45)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13170,f253])).
fof(f13170,plain,(
  ( ! [X45,X44] : (~p(s(bool,'T_0')) | s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X45)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9170])).
fof(f13836,plain,(
  ( ! [X193] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X193)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13835,f12784])).
fof(f13835,plain,(
  ( ! [X193] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X193))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X193)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13169,f253])).
fof(f13169,plain,(
  ( ! [X193] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X193))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X193)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11223])).
fof(f13833,plain,(
  ( ! [X30,X29] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X29)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13832,f12784])).
fof(f13832,plain,(
  ( ! [X30,X29] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X29))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X29)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13168,f253])).
fof(f13168,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X29))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X29)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11176])).
fof(f13830,plain,(
  ( ! [X193] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13829,f12784])).
fof(f13829,plain,(
  ( ! [X193] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13167,f253])).
fof(f13167,plain,(
  ( ! [X193] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X193)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X193))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11460])).
fof(f13827,plain,(
  ( ! [X30,X29] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13826,f12784])).
fof(f13826,plain,(
  ( ! [X30,X29] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13166,f253])).
fof(f13166,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X29)))),X30)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X29))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11413])).
fof(f13824,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13165,f253])).
fof(f13165,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8209])).
fof(f13822,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13164,f253])).
fof(f13164,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8219])).
fof(f13820,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13162,f253])).
fof(f13162,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2056])).
fof(f13818,plain,(
  ( ! [X47,X48,X49] : (s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))),s('type.num.num',X48)),X49)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13161,f253])).
fof(f13161,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))),s('type.num.num',X48)),X49)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2270])).
fof(f13816,plain,(
  ( ! [X8] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X8)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13160,f253])).
fof(f13160,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X8)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2382])).
fof(f13814,plain,(
  ( ! [X8] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X8)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13159,f253])).
fof(f13159,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X8)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2917])).
fof(f13812,plain,(
  ( ! [X296,X295] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))),s('type.num.num',X296)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X295)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13157,f253])).
fof(f13157,plain,(
  ( ! [X296,X295] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))),s('type.num.num',X296)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X295)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10988])).
fof(f13810,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X19)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13156,f253])).
fof(f13156,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X19)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8236])).
fof(f13808,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X6)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13155,f253])).
fof(f13155,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X6)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8220])).
fof(f13806,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X3)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13154,f253])).
fof(f13154,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X3)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8210])).
fof(f13804,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13153,f253])).
fof(f13153,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8208])).
fof(f13802,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13152,f253])).
fof(f13152,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2059])).
fof(f13800,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13151,f253])).
fof(f13151,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2064])).
fof(f13798,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X34,'const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X33)))),s('type.num.num',X34)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13150,f253])).
fof(f13150,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X34,'const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X33)))),s('type.num.num',X34)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f6193])).
fof(f13796,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13149,f329])).
fof(f13149,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5738])).
fof(f13794,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13148,f329])).
fof(f13148,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5510])).
fof(f13792,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X21)) ) | $spl66),
  inference(subsumption_resolution,[],[f13147,f253])).
fof(f13147,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X21)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3490])).
fof(f13790,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),s('type.num.num',X8)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13146,f253])).
fof(f13146,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X8,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),s('type.num.num',X8)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2063])).
fof(f13788,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl66),
  inference(subsumption_resolution,[],[f13143,f253])).
fof(f13143,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f274])).
fof(f13786,plain,(
  ( ! [X43,X42] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X43,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X43)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13142,f253])).
fof(f13142,plain,(
  ( ! [X43,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X43,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X43)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9169])).
fof(f13784,plain,(
  ( ! [X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X13)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13141,f253])).
fof(f13141,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X13,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X13)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7917])).
fof(f13782,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) ) | $spl66),
  inference(forward_demodulation,[],[f13781,f12784])).
fof(f13781,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X27))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13139,f253])).
fof(f13139,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X27))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11175])).
fof(f13779,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) ) | $spl66),
  inference(forward_demodulation,[],[f13778,f12784])).
fof(f13778,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13138,f253])).
fof(f13138,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X28,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X27))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X27)))))),s('type.num.num',X28)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11412])).
fof(f13776,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13137,f253])).
fof(f13137,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2065])).
fof(f13774,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X46,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45)))),s('type.num.num',X46)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13136,f253])).
fof(f13136,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X46,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num',X45)))),s('type.num.num',X46)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2269])).
fof(f13772,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13134,f329])).
fof(f13134,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f6053])).
fof(f13770,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',X2)))) ) | $spl66),
  inference(forward_demodulation,[],[f13133,f329])).
fof(f13133,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',X2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f6052])).
fof(f13125,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X33),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X33))),s('type.num.num',X32))))) | s('type.num.num',X34) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X31),s('type.num.num',X32))),s('type.num.num',X33)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11827])).
fof(f13124,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X30),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X29),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X27))),s('type.num.num',X28))))) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X27),s('type.num.num',X28)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11826])).
fof(f13766,plain,(
  ( ! [X54,X56,X55] : (s('type.num.num',X56) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55)),X56)),s('type.num.num',X54)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13123,f253])).
fof(f13123,plain,(
  ( ! [X54,X56,X55] : (~p(s(bool,'T_0')) | s('type.num.num',X56) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55)),X56)),s('type.num.num',X54)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10947])).
fof(f13764,plain,(
  ( ! [X52,X53,X51] : (s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X53,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52)))),s('type.num.num',X53)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13122,f253])).
fof(f13122,plain,(
  ( ! [X52,X53,X51] : (~p(s(bool,'T_0')) | s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X53,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52)))),s('type.num.num',X53)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10946])).
fof(f13762,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13121,f329])).
fof(f13121,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10746])).
fof(f13760,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13120,f329])).
fof(f13120,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X11))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9160])).
fof(f13758,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13757,f253])).
fof(f13757,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13119,f12784])).
fof(f13119,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK1))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8234])).
fof(f13755,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13754,f253])).
fof(f13754,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13118,f12784])).
fof(f13118,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))),s('type.num.num',sK1))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8233])).
fof(f13752,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13751,f253])).
fof(f13751,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13117,f12784])).
fof(f13117,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8101])).
fof(f13749,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13748,f253])).
fof(f13748,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13116,f12784])).
fof(f13116,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8100])).
fof(f13112,plain,(
  ( ! [X111,X114,X112,X113] : (s('type.num.num',X114) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X113),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X113))),s('type.num.num',X112))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X111),s('type.num.num',X112))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X113)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5757])).
fof(f13742,plain,(
  ( ! [X70,X68,X69,X67] : (s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X69))),s('type.num.num',X68)))),X70)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13741,f253])).
fof(f13741,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X69))),s('type.num.num',X68)))),X70)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13111,f12784])).
fof(f13111,plain,(
  ( ! [X70,X68,X69,X67] : (s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X69))),s('type.num.num',X68)))),X70)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X67),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X70))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5746])).
fof(f13739,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X66,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X65))),s('type.num.num',X64)))))),s('type.num.num',X66)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13738,f253])).
fof(f13738,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X66,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X65))),s('type.num.num',X64)))))),s('type.num.num',X66)))) ) | $spl66),
  inference(forward_demodulation,[],[f13110,f12784])).
fof(f13110,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X66,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X65))),s('type.num.num',X64)))))),s('type.num.num',X66))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X65))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5745])).
fof(f13109,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X248),s('type.num.num',X249))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X247),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X245),s('type.num.num',X247))),s('type.num.num',X246))))) | s('type.num.num',X248) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X245),s('type.num.num',X246))),s('type.num.num',X247))),s('type.num.num',X249)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5687])).
fof(f13735,plain,(
  ( ! [X185,X186,X184,X183] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X185),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X185))),s('type.num.num',X184))))) | s('type.num.num',X185) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13734,f12784])).
fof(f13734,plain,(
  ( ! [X185,X186,X184,X183] : (s('type.num.num',X185) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X185))),s('type.num.num',X184)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13108,f329])).
fof(f13108,plain,(
  ( ! [X185,X186,X184,X183] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X185),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X185))),s('type.num.num',X184))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X183),s('type.num.num',X184))),s('type.num.num',X185),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X185))),s('type.num.num',X184)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5674])).
fof(f13107,plain,(
  ( ! [X177,X175,X178,X176] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X177),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num',X177))),s('type.num.num',X176))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X178),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X175),s('type.num.num',X176))),s('type.num.num',X177))))) | s('type.num.num',X178) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5672])).
fof(f13106,plain,(
  ( ! [X173,X171,X174,X172] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X173),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X173))),s('type.num.num',X172))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num',X173))),s('type.num.num',X174))) | s('type.num.num',X174) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5671])).
fof(f13105,plain,(
  ( ! [X167,X169,X170,X168] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X169),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X169))),s('type.num.num',X168))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X170),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X167),s('type.num.num',X168))),s('type.num.num',X169))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X170)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5670])).
fof(f13104,plain,(
  ( ! [X165,X163,X166,X164] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X165),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X165))),s('type.num.num',X164))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X163),s('type.num.num',X164))),s('type.num.num',X165))),s('type.num.num',X166))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X166)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5669])).
fof(f13728,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X157))),s('type.num.num',X156))))) | s('type.num.num',X157) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157))),s('type.num.num',X158)))) ) | $spl66),
  inference(forward_demodulation,[],[f13727,f12784])).
fof(f13727,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.num.num',X157) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157))),s('type.num.num',X158))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X157))),s('type.num.num',X156)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13103,f329])).
fof(f13103,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X157))),s('type.num.num',X156))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157))),s('type.num.num',X158))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X157))),s('type.num.num',X156)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5667])).
fof(f13102,plain,(
  ( ! [X85,X83,X86,X84] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X85),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X85))),s('type.num.num',X84))))) | s('type.num.num',X86) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X83),s('type.num.num',X84))),s('type.num.num',X85)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5649])).
fof(f13100,plain,(
  ( ! [X111,X109,X112,X110] : (s('type.num.num',X112) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X111),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num',X109))),s('type.num.num',X110))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X112))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X111),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X109),s('type.num.num',X110)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5529])).
fof(f13722,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.num.num',X68) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X65))),s('type.num.num',X66)))),X68)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13721,f253])).
fof(f13721,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | s('type.num.num',X68) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X65))),s('type.num.num',X66)))),X68)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13099,f12784])).
fof(f13099,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.num.num',X68) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X65))),s('type.num.num',X66)))),X68)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X65),s('type.num.num',X66))))),s('type.num.num',X68))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5518])).
fof(f13719,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X64,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X61))),s('type.num.num',X62)))))),s('type.num.num',X64)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13718,f253])).
fof(f13718,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X64,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X61))),s('type.num.num',X62)))))),s('type.num.num',X64)))) ) | $spl66),
  inference(forward_demodulation,[],[f13098,f12784])).
fof(f13098,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X64,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X61))),s('type.num.num',X62)))))),s('type.num.num',X64))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X61),s('type.num.num',X62))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5517])).
fof(f13716,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6)))) ) | $spl66),
  inference(forward_demodulation,[],[f13097,f329])).
fof(f13097,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X6)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5509])).
fof(f13714,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13096,f329])).
fof(f13096,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X4))))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5508])).
fof(f13095,plain,(
  ( ! [X231,X229,X230,X228,X232] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X231),s('type.num.num',X232))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num',X228))),s('type.num.num',X229))))) | s('type.num.num',X231) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X228),s('type.num.num',X229))))),s('type.num.num',X232)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5459])).
fof(f13711,plain,(
  ( ! [X182,X184,X183,X181] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X181))),s('type.num.num',X182))))) | s('type.num.num',X183) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X181),s('type.num.num',X182)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13710,f12784])).
fof(f13710,plain,(
  ( ! [X182,X184,X183,X181] : (s('type.num.num',X183) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X181),s('type.num.num',X182))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X181))),s('type.num.num',X182)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13094,f329])).
fof(f13094,plain,(
  ( ! [X182,X184,X183,X181] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X181))),s('type.num.num',X182))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X181),s('type.num.num',X182))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X181))),s('type.num.num',X182)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5449])).
fof(f13093,plain,(
  ( ! [X175,X173,X176,X174] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X175),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num',X173))),s('type.num.num',X174))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X173),s('type.num.num',X174))))))) | s('type.num.num',X176) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5447])).
fof(f13092,plain,(
  ( ! [X171,X169,X172,X170] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X171),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X169))),s('type.num.num',X170))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X169),s('type.num.num',X170))))),s('type.num.num',X172))) | s('type.num.num',X172) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5446])).
fof(f13091,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X167),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X165))),s('type.num.num',X166))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X168),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X165),s('type.num.num',X166))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X168)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5445])).
fof(f13090,plain,(
  ( ! [X163,X161,X164,X162] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X161))),s('type.num.num',X162))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X161),s('type.num.num',X162))))),s('type.num.num',X164))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X164)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5444])).
fof(f13704,plain,(
  ( ! [X156,X154,X155,X153] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X153))),s('type.num.num',X154))))) | s('type.num.num',X155) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X154))))),s('type.num.num',X156)))) ) | $spl66),
  inference(forward_demodulation,[],[f13703,f12784])).
fof(f13703,plain,(
  ( ! [X156,X154,X155,X153] : (s('type.num.num',X155) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X154))))),s('type.num.num',X156))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X153),s('type.num.num',X154))),s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X153))),s('type.num.num',X154)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13089,f329])).
fof(f13089,plain,(
  ( ! [X156,X154,X155,X153] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X153))),s('type.num.num',X154))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X154))))),s('type.num.num',X156))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X153),s('type.num.num',X154))),s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X153))),s('type.num.num',X154)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5442])).
fof(f13088,plain,(
  ( ! [X83,X81,X84,X82] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X83),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X81))),s('type.num.num',X82))))) | s('type.num.num',X84) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X81),s('type.num.num',X82)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5424])).
fof(f13700,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13086,f253])).
fof(f13086,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3499])).
fof(f13698,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13085,f253])).
fof(f13085,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3310])).
fof(f13696,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13084,f253])).
fof(f13084,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2996])).
fof(f13694,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13083,f253])).
fof(f13083,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2067])).
fof(f13692,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13082,f253])).
fof(f13082,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2062])).
fof(f13690,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13081,f253])).
fof(f13081,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2061])).
fof(f13688,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13080,f253])).
fof(f13080,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2060])).
fof(f13686,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num',X18)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13079,f253])).
fof(f13079,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num',X18)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2058])).
fof(f13684,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num',X5)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13078,f253])).
fof(f13078,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num',X5)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2051])).
fof(f13682,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num',X3)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13077,f253])).
fof(f13077,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num',X3)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2050])).
fof(f13680,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num',X1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13076,f253])).
fof(f13076,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2049])).
fof(f13678,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num',X2)),'const.num.SUC_1'(s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13075,f253])).
fof(f13075,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.num.SUC_1'(s('type.num.num',X2)),'const.num.SUC_1'(s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2044])).
fof(f13676,plain,(
  ( ! [X28,X26,X27,X25] : (p(s(bool,X27)) | ~sP0(X27,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26)))),X28)) ) | $spl66),
  inference(subsumption_resolution,[],[f13073,f253])).
fof(f13073,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | ~sP0(X27,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26)))),X28)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f1967])).
fof(f13674,plain,(
  ( ! [X24,X23,X21,X22] : (p(s(bool,X23)) | ~sP0(X23,X24,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13072,f253])).
fof(f13072,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | ~sP0(X23,X24,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f1966])).
fof(f13672,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13671,f253])).
fof(f13671,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl66),
  inference(forward_demodulation,[],[f13670,f12784])).
fof(f13670,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13070,f253])).
fof(f13070,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f379])).
fof(f13668,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13068,f253])).
fof(f13068,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f375])).
fof(f13666,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) ) | $spl66),
  inference(forward_demodulation,[],[f13066,f329])).
fof(f13066,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f373])).
fof(f13664,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13065,f329])).
fof(f13065,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f372])).
fof(f13662,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X1,X0)),s('type.num.num',X1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13063,f253])).
fof(f13063,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X1,X0)),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f342])).
fof(f13660,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13062,f253])).
fof(f13062,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f341])).
fof(f13657,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X11)),s('type.num.num',sK2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13059,f253])).
fof(f13059,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)),X11)),s('type.num.num',sK2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2385])).
fof(f13655,plain,(
  ( ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X11)),s('type.num.num',sK2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13058,f253])).
fof(f13058,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X11)),s('type.num.num',sK2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2920])).
fof(f13653,plain,(
  ( ! [X38] : (s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X38)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13057,f253])).
fof(f13057,plain,(
  ( ! [X38] : (~p(s(bool,'T_0')) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),X38)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2940])).
fof(f13651,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13056,f253])).
fof(f13056,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8432])).
fof(f13649,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13055,f253])).
fof(f13055,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8843])).
fof(f13647,plain,(
  ( ! [X208] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X208))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13054,f253])).
fof(f13054,plain,(
  ( ! [X208] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X208))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9218])).
fof(f13645,plain,(
  ( ! [X213] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X213))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13053,f253])).
fof(f13053,plain,(
  ( ! [X213] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X213))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9221])).
fof(f13643,plain,(
  ( ! [X194] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X194))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13642,f12784])).
fof(f13642,plain,(
  ( ! [X194] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X194))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X194))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13051,f253])).
fof(f13051,plain,(
  ( ! [X194] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X194))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X194))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11224])).
fof(f13640,plain,(
  ( ! [X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13639,f12784])).
fof(f13639,plain,(
  ( ! [X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X203))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13050,f253])).
fof(f13050,plain,(
  ( ! [X203] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X203))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11228])).
fof(f13637,plain,(
  ( ! [X194] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13636,f12784])).
fof(f13636,plain,(
  ( ! [X194] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13049,f253])).
fof(f13049,plain,(
  ( ! [X194] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X194))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X194)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11461])).
fof(f13634,plain,(
  ( ! [X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13633,f12784])).
fof(f13633,plain,(
  ( ! [X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13048,f253])).
fof(f13048,plain,(
  ( ! [X203] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X203))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X203)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11465])).
fof(f13631,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13630,f12784])).
fof(f13630,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13047,f253])).
fof(f13047,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8438])).
fof(f13628,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13627,f12784])).
fof(f13627,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13046,f253])).
fof(f13046,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8849])).
fof(f13625,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f13624,f12784])).
fof(f13624,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13045,f253])).
fof(f13045,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8437])).
fof(f13622,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13621,f12784])).
fof(f13621,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13044,f253])).
fof(f13044,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8848])).
fof(f13619,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13043,f253])).
fof(f13043,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8419])).
fof(f13617,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13042,f253])).
fof(f13042,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8429])).
fof(f13615,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13041,f253])).
fof(f13041,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8834])).
fof(f13613,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13040,f253])).
fof(f13040,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8840])).
fof(f13611,plain,(
  ( ! [X308,X307] : (s('type.num.num',X307) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num',X308))),s('type.num.num',X308)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13037,f253])).
fof(f13037,plain,(
  ( ! [X308,X307] : (~p(s(bool,'T_0')) | s('type.num.num',X307) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num',X308))),s('type.num.num',X308)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10993])).
fof(f13609,plain,(
  ( ! [X298,X297] : (s('type.num.num',X297) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num',X298)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13036,f253])).
fof(f13036,plain,(
  ( ! [X298,X297] : (~p(s(bool,'T_0')) | s('type.num.num',X297) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num',X298)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10989])).
fof(f13607,plain,(
  ( ! [X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13035,f253])).
fof(f13035,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8851])).
fof(f13605,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13034,f253])).
fof(f13034,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8841])).
fof(f13603,plain,(
  ( ! [X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13033,f253])).
fof(f13033,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8835])).
fof(f13601,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13032,f253])).
fof(f13032,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8833])).
fof(f13599,plain,(
  ( ! [X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13031,f253])).
fof(f13031,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8440])).
fof(f13597,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13030,f253])).
fof(f13030,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8430])).
fof(f13595,plain,(
  ( ! [X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13029,f253])).
fof(f13029,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8420])).
fof(f13593,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13028,f253])).
fof(f13028,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8418])).
fof(f13591,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X7)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13027,f253])).
fof(f13027,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X7)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2776])).
fof(f13589,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13026,f253])).
fof(f13026,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),X0)),s('type.num.num',sK1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2106])).
fof(f13587,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13025,f253])).
fof(f13025,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8548])).
fof(f13585,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13024,f253])).
fof(f13024,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8888])).
fof(f13583,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13023,f253])).
fof(f13023,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2112])).
fof(f13581,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13022,f253])).
fof(f13022,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))),X14)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2780])).
fof(f13579,plain,(
  ( ! [X156,X157] : (s('type.num.num',X157) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X156)),X157))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13018,f253])).
fof(f13018,plain,(
  ( ! [X156,X157] : (~p(s(bool,'T_0')) | s('type.num.num',X157) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X156)),X157))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f6249])).
fof(f13577,plain,(
  ( ! [X39,X40] : (s('type.num.num',X40) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num',X39)),X40))) ) | $spl66),
  inference(subsumption_resolution,[],[f13017,f253])).
fof(f13017,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | s('type.num.num',X40) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X39),s('type.num.num',X39)),X40))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f6199])).
fof(f13575,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),X11))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13016,f253])).
fof(f13016,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),X11))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2779])).
fof(f13573,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8))) ) | $spl66),
  inference(subsumption_resolution,[],[f13014,f253])).
fof(f13014,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)),X8))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2111])).
fof(f13571,plain,(
  ( ! [X209] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X209)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13013,f253])).
fof(f13013,plain,(
  ( ! [X209] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X209)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9219])).
fof(f13569,plain,(
  ( ! [X214] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X214)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13012,f253])).
fof(f13012,plain,(
  ( ! [X214] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X214)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9223])).
fof(f13567,plain,(
  ( ! [X48,X49] : (s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X49)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13010,f253])).
fof(f13010,plain,(
  ( ! [X48,X49] : (~p(s(bool,'T_0')) | s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X49)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9172])).
fof(f13565,plain,(
  ( ! [X165,X166] : (s('type.num.num',X166) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X166)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13009,f253])).
fof(f13009,plain,(
  ( ! [X165,X166] : (~p(s(bool,'T_0')) | s('type.num.num',X166) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X166)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X165)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9214])).
fof(f13563,plain,(
  ( ! [X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X16)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13008,f253])).
fof(f13008,plain,(
  ( ! [X16] : (~p(s(bool,'T_0')) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X16)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7920])).
fof(f13561,plain,(
  ( ! [X83] : (s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X83)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13007,f253])).
fof(f13007,plain,(
  ( ! [X83] : (~p(s(bool,'T_0')) | s('type.num.num',X83) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X83)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7960])).
fof(f13559,plain,(
  ( ! [X195] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X195)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13558,f12784])).
fof(f13558,plain,(
  ( ! [X195] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X195))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X195)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13006,f253])).
fof(f13006,plain,(
  ( ! [X195] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X195))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X195)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11225])).
fof(f13556,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204)))))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13555,f12784])).
fof(f13555,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X204))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13005,f253])).
fof(f13005,plain,(
  ( ! [X204] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X204))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X204)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11230])).
fof(f13553,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X33)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13552,f12784])).
fof(f13552,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X33))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X33)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13004,f253])).
fof(f13004,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X33))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X33)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11178])).
fof(f13550,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150)))))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13549,f12784])).
fof(f13549,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X150))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13003,f253])).
fof(f13003,plain,(
  ( ! [X151,X150] : (~p(s(bool,'T_0')) | s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X150))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X150)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11219])).
fof(f13547,plain,(
  ( ! [X195] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13546,f12784])).
fof(f13546,plain,(
  ( ! [X195] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13002,f253])).
fof(f13002,plain,(
  ( ! [X195] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X195)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X195))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11462])).
fof(f13544,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13543,f12784])).
fof(f13543,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13001,f253])).
fof(f13001,plain,(
  ( ! [X204] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X204)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X204))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11467])).
fof(f13541,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13540,f12784])).
fof(f13540,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13000,f253])).
fof(f13000,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X33)))),X34)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X33))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11415])).
fof(f13538,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13537,f12784])).
fof(f13537,plain,(
  ( ! [X151,X150] : (s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12999,f253])).
fof(f12999,plain,(
  ( ! [X151,X150] : (~p(s(bool,'T_0')) | s('type.num.num',X151) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X150)))),X151)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X150))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11456])).
fof(f13535,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13534,f12784])).
fof(f13534,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12998,f253])).
fof(f12998,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8554])).
fof(f13532,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13531,f12784])).
fof(f13531,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12997,f253])).
fof(f12997,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X16))),s('type.num.num',X15)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8896])).
fof(f13529,plain,(
  ( ! [X78,X76,X77,X75] : (s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X77),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.num.num',X76)))),X78)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13528,f12784])).
fof(f13528,plain,(
  ( ! [X78,X76,X77,X75] : (s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.num.num',X76)))),X78)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12996,f253])).
fof(f12996,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | s('type.num.num',X78) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X77))),s('type.num.num',X76)))),X78)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5748])).
fof(f13526,plain,(
  ( ! [X280,X277,X279,X278] : (s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))),X280)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X279)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13525,f12784])).
fof(f13525,plain,(
  ( ! [X280,X277,X279,X278] : (s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))),X280)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X279)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12995,f253])).
fof(f12995,plain,(
  ( ! [X280,X277,X279,X278] : (~p(s(bool,'T_0')) | s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num',X279),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X279))),s('type.num.num',X278)))),X280)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X279)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5789])).
fof(f13523,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13522,f12784])).
fof(f13522,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12992,f253])).
fof(f12992,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8553])).
fof(f13520,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13519,f12784])).
fof(f13519,plain,(
  ( ! [X12,X13,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12991,f253])).
fof(f12991,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X11))),s('type.num.num',X12)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8894])).
fof(f13517,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.num.num',X76) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X73))),s('type.num.num',X74)))),X76)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X73),s('type.num.num',X74)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13516,f12784])).
fof(f13516,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.num.num',X76) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X74))),s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X73))),s('type.num.num',X74)))),X76)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X73),s('type.num.num',X74)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12990,f253])).
fof(f12990,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | s('type.num.num',X76) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X74))),s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X73))),s('type.num.num',X74)))),X76)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X73),s('type.num.num',X74)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5520])).
fof(f13514,plain,(
  ( ! [X261,X263,X260,X262] : (s('type.num.num',X263) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))),X263)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261)))))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13513,f12784])).
fof(f13513,plain,(
  ( ! [X261,X263,X260,X262] : (s('type.num.num',X263) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num',X261))),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))),X263)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12989,f253])).
fof(f12989,plain,(
  ( ! [X261,X263,X260,X262] : (~p(s(bool,'T_0')) | s('type.num.num',X263) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num',X261))),s('type.num.num',X262),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X260))),s('type.num.num',X261)))),X263)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X260),s('type.num.num',X261)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5561])).
fof(f13511,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12987,f253])).
fof(f12987,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8533])).
fof(f13509,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12986,f253])).
fof(f12986,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8541])).
fof(f13507,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12985,f253])).
fof(f12985,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8878])).
fof(f13505,plain,(
  ( ! [X4,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12984,f253])).
fof(f12984,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8883])).
fof(f13503,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12983,f253])).
fof(f12983,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))),X14)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2113])).
fof(f13499,plain,(
  ( ! [X54,X55,X53] : (s('type.num.num',X55) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num',X54)),X55)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54)))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12981,f253])).
fof(f12981,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s('type.num.num',X55) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num',X54)),X55)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2272])).
fof(f13497,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12980,f253])).
fof(f12980,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2772])).
fof(f13495,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))),X17)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12979,f253])).
fof(f12979,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))),X17)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2782])).
fof(f13493,plain,(
  ( ! [X10] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X10)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12977,f253])).
fof(f12977,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))),s('type.num.num',X10)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2384])).
fof(f13491,plain,(
  ( ! [X10] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X10)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12976,f253])).
fof(f12976,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X10,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num',X10)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2919])).
fof(f13489,plain,(
  ( ! [X37] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X37,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12975,f253])).
fof(f12975,plain,(
  ( ! [X37] : (~p(s(bool,'T_0')) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X37,'const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2939])).
fof(f13487,plain,(
  ( ! [X310,X309] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num',X310)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X309)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12972,f253])).
fof(f12972,plain,(
  ( ! [X310,X309] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num',X310)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X309)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10994])).
fof(f13485,plain,(
  ( ! [X300,X299] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))),s('type.num.num',X300)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X299)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12971,f253])).
fof(f12971,plain,(
  ( ! [X300,X299] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))),s('type.num.num',X300)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X299)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10990])).
fof(f13483,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12970,f253])).
fof(f12970,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8898])).
fof(f13481,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12969,f253])).
fof(f12969,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8884])).
fof(f13479,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12968,f253])).
fof(f12968,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8880])).
fof(f13477,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12967,f253])).
fof(f12967,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8876])).
fof(f13475,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X19)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12966,f253])).
fof(f12966,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X19)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8556])).
fof(f13473,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X6)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12965,f253])).
fof(f12965,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X6)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8542])).
fof(f13471,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X3)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12964,f253])).
fof(f12964,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X3)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8534])).
fof(f13469,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12963,f253])).
fof(f12963,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8532])).
fof(f13467,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X7,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12962,f253])).
fof(f12962,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X7,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2788])).
fof(f13465,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12961,f253])).
fof(f12961,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X0,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X0)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2116])).
fof(f13463,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12960,f253])).
fof(f12960,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X11,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num',X11)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2121])).
fof(f13461,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X14,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12959,f253])).
fof(f12959,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X14,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2791])).
fof(f13457,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X15,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X15)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12957,f253])).
fof(f12957,plain,(
  ( ! [X15] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X15,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num',X15)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7919])).
fof(f13455,plain,(
  ( ! [X82] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X82,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X82)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12956,f253])).
fof(f12956,plain,(
  ( ! [X82] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X82,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X82)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f7958])).
fof(f13453,plain,(
  ( ! [X163,X164] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X163))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X164,'const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X164)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12954,f253])).
fof(f12954,plain,(
  ( ! [X163,X164] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X163))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X164,'const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X164)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9212])).
fof(f13451,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X47,'const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X47)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12953,f253])).
fof(f12953,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X47,'const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X47)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f9171])).
fof(f13447,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) ) | $spl66),
  inference(forward_demodulation,[],[f13446,f12784])).
fof(f13446,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X31))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12950,f253])).
fof(f12950,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X31))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11177])).
fof(f13444,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X148))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13443,f12784])).
fof(f13443,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X148))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X148))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12949,f253])).
fof(f12949,plain,(
  ( ! [X149,X148] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X148))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X148))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11217])).
fof(f13441,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) ) | $spl66),
  inference(forward_demodulation,[],[f13440,f12784])).
fof(f13440,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12948,f253])).
fof(f12948,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X32,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X31))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X31)))))),s('type.num.num',X32)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11414])).
fof(f13438,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13437,f12784])).
fof(f13437,plain,(
  ( ! [X149,X148] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12947,f253])).
fof(f12947,plain,(
  ( ! [X149,X148] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X149,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X148))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X148)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X149)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11454])).
fof(f13435,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X74,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X73))),s('type.num.num',X72)))))),s('type.num.num',X74)))) ) | $spl66),
  inference(forward_demodulation,[],[f13434,f12784])).
fof(f13434,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X74,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X73))),s('type.num.num',X72)))))),s('type.num.num',X74)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12946,f253])).
fof(f12946,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X74,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X73))),s('type.num.num',X72)))))),s('type.num.num',X74)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5747])).
fof(f13432,plain,(
  ( ! [X273,X275,X276,X274] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X276,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X275))),s('type.num.num',X274)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X276)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13431,f12784])).
fof(f13431,plain,(
  ( ! [X273,X275,X276,X274] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X276,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X275))),s('type.num.num',X274)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X276)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12945,f253])).
fof(f12945,plain,(
  ( ! [X273,X275,X276,X274] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X276,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X275))),s('type.num.num',X274)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X276)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5787])).
fof(f13429,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X72,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X69))),s('type.num.num',X70)))))),s('type.num.num',X72)))) ) | $spl66),
  inference(forward_demodulation,[],[f13428,f12784])).
fof(f13428,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X72,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))),s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X69))),s('type.num.num',X70)))))),s('type.num.num',X72)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12944,f253])).
fof(f12944,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X72,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))),s('type.num.num',X71),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X69))),s('type.num.num',X70)))))),s('type.num.num',X72)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5519])).
fof(f13426,plain,(
  ( ! [X257,X259,X256,X258] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X256),s('type.num.num',X257))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X259,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X256))),s('type.num.num',X257)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X259)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13425,f12784])).
fof(f13425,plain,(
  ( ! [X257,X259,X256,X258] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X256),s('type.num.num',X257))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X259,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X256))),s('type.num.num',X257)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X259)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12943,f253])).
fof(f12943,plain,(
  ( ! [X257,X259,X256,X258] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X256),s('type.num.num',X257))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X259,'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X258),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X256))),s('type.num.num',X257)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X259)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5559])).
fof(f13421,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X17,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12940,f253])).
fof(f12940,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X17,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2792])).
fof(f13419,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X4,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12939,f253])).
fof(f12939,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X4,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2786])).
fof(f13415,plain,(
  ( ! [X52,X50,X51] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X52,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))),s('type.num.num',X51)))),s('type.num.num',X52)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12937,f253])).
fof(f12937,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X52,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))),s('type.num.num',X51)))),s('type.num.num',X52)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2271])).
fof(f13413,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12936,f253])).
fof(f12936,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X14,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))),s('type.num.num',X14)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2122])).
fof(f13409,plain,(
  ( ! [X229,X227,X228] : (s('type.num.num',X229) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num',X228)),X229)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X227)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12926,f253])).
fof(f12926,plain,(
  ( ! [X229,X227,X228] : (~p(s(bool,'T_0')) | s('type.num.num',X229) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num',X228)),X229)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X227)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10985])).
fof(f13407,plain,(
  ( ! [X225,X226,X224] : (s('type.num.num',X224) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X226,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))),s('type.num.num',X225)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X226)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12925,f253])).
fof(f12925,plain,(
  ( ! [X225,X226,X224] : (~p(s(bool,'T_0')) | s('type.num.num',X224) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X226,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))),s('type.num.num',X225)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X226)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10984])).
fof(f13405,plain,(
  ( ! [X61,X62,X60] : (s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num',X61)),X62)),s('type.num.num',X60)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12924,f253])).
fof(f12924,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'T_0')) | s('type.num.num',X62) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num',X61)),X62)),s('type.num.num',X60)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10949])).
fof(f13403,plain,(
  ( ! [X59,X57,X58] : (s('type.num.num',X57) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X59,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X58)))),s('type.num.num',X59)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12923,f253])).
fof(f12923,plain,(
  ( ! [X59,X57,X58] : (~p(s(bool,'T_0')) | s('type.num.num',X57) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X59,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X58)))),s('type.num.num',X59)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f10948])).
fof(f13401,plain,(
  ( ! [X23,X21,X22] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X23,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12922,f253])).
fof(f12922,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X23,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X23)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2794])).
fof(f13399,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X9,'const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12921,f253])).
fof(f12921,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X9,'const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2789])).
fof(f13397,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X6,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12920,f253])).
fof(f12920,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X6,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2787])).
fof(f13395,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12919,f253])).
fof(f12919,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2785])).
fof(f13393,plain,(
  ( ! [X23,X21,X22] : (s('type.num.num',X23) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)),X23)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12918,f253])).
fof(f12918,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X21),s('type.num.num',X22)),X23)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2784])).
fof(f13391,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12917,f253])).
fof(f12917,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2777])).
fof(f13389,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),X6)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12916,f253])).
fof(f12916,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),X6)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2774])).
fof(f13387,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12915,f253])).
fof(f12915,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2770])).
fof(f13385,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12914,f253])).
fof(f12914,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num',X20)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2124])).
fof(f13383,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12913,f253])).
fof(f12913,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X6,'const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X6)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2119])).
fof(f13381,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12912,f253])).
fof(f12912,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X4,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X4)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2118])).
fof(f13379,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12911,f253])).
fof(f12911,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X2,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))),s('type.num.num',X2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2117])).
fof(f13377,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num',X18)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12910,f253])).
fof(f12910,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num',X18)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2115])).
fof(f13375,plain,(
  ( ! [X6,X5] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num',X5)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12909,f253])).
fof(f12909,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')),X6)),s('type.num.num',X5)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2109])).
fof(f13373,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num',X3)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12908,f253])).
fof(f12908,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4)),s('type.num.num',X3)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2108])).
fof(f13371,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num',X1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12907,f253])).
fof(f12907,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2107])).
fof(f13369,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f12906,f253])).
fof(f12906,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f427])).
fof(f13363,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X1,X0)),s('type.num.num',X1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f12901,f253])).
fof(f12901,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X1,X0)),s('type.num.num',X1)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f343])).
fof(f12892,plain,(
  ( ! [X39,X41,X40] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X39),s('type.num.num',X40))) | s('type.num.num',X40) != s('type.num.num',X41)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11830])).
fof(f13354,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13353,f253])).
fof(f13353,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) ) | $spl66),
  inference(forward_demodulation,[],[f12888,f12784])).
fof(f12888,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',sK1))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8897])).
fof(f13351,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13350,f253])).
fof(f13350,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl66),
  inference(forward_demodulation,[],[f12887,f12784])).
fof(f12887,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X18))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8850])).
fof(f13348,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13347,f253])).
fof(f13347,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18)))) ) | $spl66),
  inference(forward_demodulation,[],[f12886,f12784])).
fof(f12886,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',sK1))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8555])).
fof(f13345,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13344,f253])).
fof(f13344,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f12884,f12784])).
fof(f12884,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X18))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8439])).
fof(f13342,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13341,f253])).
fof(f13341,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18)))) ) | $spl66),
  inference(forward_demodulation,[],[f12881,f12784])).
fof(f12881,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',X18))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',sK1))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8235])).
fof(f13339,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13338,f253])).
fof(f13338,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1)))) ) | $spl66),
  inference(forward_demodulation,[],[f12880,f12784])).
fof(f12880,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X17),s('type.num.num',X18)))),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X18))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f8102])).
fof(f12873,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5292])).
fof(f12872,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f5281])).
fof(f13329,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20)))) ) | $spl66),
  inference(forward_demodulation,[],[f13328,f12784])).
fof(f13328,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) ) | $spl66),
  inference(forward_demodulation,[],[f12869,f329])).
fof(f12869,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3764])).
fof(f13326,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)))) ) | $spl66),
  inference(forward_demodulation,[],[f13325,f12784])).
fof(f13325,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) ) | $spl66),
  inference(forward_demodulation,[],[f12868,f329])).
fof(f12868,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X19),s('type.num.num',X20)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3696])).
fof(f12865,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3211])).
fof(f12864,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f3200])).
fof(f13321,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13320,f253])).
fof(f13320,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) ) | $spl66),
  inference(forward_demodulation,[],[f12859,f12784])).
fof(f12859,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8(X20,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X19))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2793])).
fof(f13318,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f13317,f253])).
fof(f13317,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) ) | $spl66),
  inference(forward_demodulation,[],[f12858,f12784])).
fof(f12858,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK8('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X18),s('type.num.num',X19)),X20)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2783])).
fof(f12855,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num',X29))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X26),s('type.num.num',X27))) | s('type.num.num',X28) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X29)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2595])).
fof(f13310,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13309,f253])).
fof(f13309,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17)))) ) | $spl66),
  inference(forward_demodulation,[],[f12853,f12784])).
fof(f12853,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2123])).
fof(f13307,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13306,f253])).
fof(f13306,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16)))) ) | $spl66),
  inference(forward_demodulation,[],[f12852,f12784])).
fof(f12852,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2114])).
fof(f13304,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13303,f253])).
fof(f13303,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17)))) ) | $spl66),
  inference(forward_demodulation,[],[f12851,f12784])).
fof(f12851,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)))),s('type.num.num',X17))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2066])).
fof(f13301,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16)))) ) | $spl66),
  inference(subsumption_resolution,[],[f13300,f253])).
fof(f13300,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16)))) ) | $spl66),
  inference(forward_demodulation,[],[f12850,f12784])).
fof(f12850,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X15),s('type.num.num',X16)),X17)),s('type.num.num',X16))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f2057])).
fof(f12841,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num',X11) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X9),s('type.num.num',X10))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f1268])).
fof(f12840,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X9),s('type.num.num',X10))) | s('type.num.num',X11) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f1144])).
fof(f12838,plain,(
  ( ! [X26,X24,X23,X25] : (~sP0(X25,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X23),s(bool,X24)),X26) | ~p(s(bool,X24)) | p(s(bool,X25))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f780])).
fof(f12837,plain,(
  ( ! [X21,X19,X22,X20] : (~sP0(X21,X22,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X19),s(bool,X20))) | ~p(s(bool,X20)) | p(s(bool,X21))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f779])).
fof(f12833,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f328])).
fof(f13291,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(subsumption_resolution,[],[f12831,f12784])).
fof(f12831,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f270])).
fof(f13951,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937,f13944,f13220,f13950])).
fof(f13948,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937,f13944,f13220])).
fof(f13947,plain,(
  $false | ($spl1 | $spl66)),
  inference(global_subsumption,[],[f13946,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937,f13944])).
fof(f13946,plain,(
  ( ! [X206,X205] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X206))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X205))))),s('type.num.num',X206)))) ) | ($spl1 | $spl66)),
  inference(forward_demodulation,[],[f13219,f329])).
fof(f13219,plain,(
  ( ! [X206,X205] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X206))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X205))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X205))))),s('type.num.num',X206)))) ) | ($spl1 | $spl66)),
  inference(backward_demodulation,[],[f12784,f11143])).
fof(f11143,plain,(
  ( ! [X206,X205] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X205))))),s('type.num.num',X206))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X206))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X205))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X205)))))) ) | $spl1),
  inference(superposition,[],[f4029,f7230])).
fof(f13945,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937,f13944])).
fof(f13943,plain,(
  $false | ($spl10 | $spl66)),
  inference(global_subsumption,[],[f13942,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937])).
fof(f13942,plain,(
  ( ! [X88,X87] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X87)))))))) ) | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f13941,f3240])).
fof(f3240,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | $spl10),
  inference(unit_resulting_resolution,[],[f2388,f356])).
fof(f13941,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X87)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13940,f329])).
fof(f13940,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87))))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X87)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13939,f12784])).
fof(f13939,plain,(
  ( ! [X88,X87] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X87))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X87))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13217,f329])).
fof(f13217,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X87))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X87))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11085])).
fof(f13938,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935,f13937])).
fof(f13936,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919,f13935])).
fof(f13934,plain,(
  $false | ($spl10 | $spl66)),
  inference(global_subsumption,[],[f13933,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919])).
fof(f13933,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X79))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) ) | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f13932,f3240])).
fof(f13932,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X79))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) ) | $spl66),
  inference(forward_demodulation,[],[f13214,f329])).
fof(f13214,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X79))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X79))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11081])).
fof(f13931,plain,(
  $false | ($spl10 | $spl66)),
  inference(global_subsumption,[],[f13930,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919])).
fof(f13930,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X77))))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f13929,f3240])).
fof(f13929,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X77))))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | $spl66),
  inference(forward_demodulation,[],[f13213,f329])).
fof(f13213,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X77))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X77))))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11080])).
fof(f13928,plain,(
  $false | ($spl10 | $spl66)),
  inference(global_subsumption,[],[f13927,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919])).
fof(f13927,plain,(
  ( ! [X74,X73] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X73))))),s('type.num.num',X74)))) ) | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f13926,f3240])).
fof(f13926,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X73))))),s('type.num.num',X74)))) ) | $spl66),
  inference(forward_demodulation,[],[f13925,f329])).
fof(f13925,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73))))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X73))))),s('type.num.num',X74)))) ) | $spl66),
  inference(forward_demodulation,[],[f13924,f12784])).
fof(f13924,plain,(
  ( ! [X74,X73] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X73))))),s('type.num.num',X74))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X73))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13212,f329])).
fof(f13212,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X73))))),s('type.num.num',X74))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X73))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11078])).
fof(f13923,plain,(
  $false | ($spl10 | $spl66)),
  inference(global_subsumption,[],[f13922,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919])).
fof(f13922,plain,(
  ( ! [X37,X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X37)))))))) ) | ($spl10 | $spl66)),
  inference(subsumption_resolution,[],[f13921,f3240])).
fof(f13921,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X37)))))))) ) | $spl66),
  inference(forward_demodulation,[],[f13211,f329])).
fof(f13211,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X37))))) | s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK3),s('type.num.num',X37)))))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11060])).
fof(f13920,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917,f13919])).
fof(f13918,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207,f13917])).
fof(f13915,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911,f13207])).
fof(f13914,plain,(
  $false | ($spl1 | $spl66)),
  inference(global_subsumption,[],[f13913,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911])).
fof(f13913,plain,(
  ( ! [X206,X205] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X206))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X205))),s('type.num.num',sK3))),s('type.num.num',X206)))) ) | ($spl1 | $spl66)),
  inference(forward_demodulation,[],[f13206,f329])).
fof(f13206,plain,(
  ( ! [X206,X205] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X206))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X205))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X205))),s('type.num.num',sK3))),s('type.num.num',X206)))) ) | ($spl1 | $spl66)),
  inference(backward_demodulation,[],[f12784,f11380])).
fof(f11380,plain,(
  ( ! [X206,X205] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X205))),s('type.num.num',sK3))),s('type.num.num',X206))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X206))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X205))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X205)))))) ) | $spl1),
  inference(superposition,[],[f4029,f7231])).
fof(f13912,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904,f13911])).
fof(f13910,plain,(
  $false | ($spl5 | $spl66)),
  inference(global_subsumption,[],[f13909,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904])).
fof(f13909,plain,(
  ( ! [X88,X87] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3)))))) ) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f13908,f1152])).
fof(f13908,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13907,f329])).
fof(f13907,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87))))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13906,f12784])).
fof(f13906,plain,(
  ( ! [X88,X87] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13204,f329])).
fof(f13204,plain,(
  ( ! [X88,X87] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X87))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X87)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11322])).
fof(f13905,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902,f13904])).
fof(f13903,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f13902])).
fof(f13901,plain,(
  $false | ($spl5 | $spl66)),
  inference(global_subsumption,[],[f13900,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13900,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X79))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) ) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f13899,f1152])).
fof(f13899,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X79))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) ) | $spl66),
  inference(forward_demodulation,[],[f13201,f329])).
fof(f13201,plain,(
  ( ! [X80,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X79))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X79))),s('type.num.num',sK3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X80)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11318])).
fof(f13898,plain,(
  $false | ($spl5 | $spl66)),
  inference(global_subsumption,[],[f13897,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13897,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X77))),s('type.num.num',sK3))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f13896,f1152])).
fof(f13896,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X77))),s('type.num.num',sK3))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | $spl66),
  inference(forward_demodulation,[],[f13200,f329])).
fof(f13200,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X77))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X77))),s('type.num.num',sK3))),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11317])).
fof(f13895,plain,(
  $false | ($spl5 | $spl66)),
  inference(global_subsumption,[],[f13894,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13894,plain,(
  ( ! [X74,X73] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3))),s('type.num.num',X74)))) ) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f13893,f1152])).
fof(f13893,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3))),s('type.num.num',X74)))) ) | $spl66),
  inference(forward_demodulation,[],[f13892,f329])).
fof(f13892,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73))))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3))),s('type.num.num',X74)))) ) | $spl66),
  inference(forward_demodulation,[],[f13891,f12784])).
fof(f13891,plain,(
  ( ! [X74,X73] : (s('type.num.num',sK3) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3))),s('type.num.num',X74))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13199,f329])).
fof(f13199,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3))),s('type.num.num',X74))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X73))),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X73)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11315])).
fof(f13890,plain,(
  $false | ($spl5 | $spl66)),
  inference(global_subsumption,[],[f13889,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13889,plain,(
  ( ! [X37,X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3)))))) ) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f13888,f1152])).
fof(f13888,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(forward_demodulation,[],[f13198,f329])).
fof(f13198,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',X37))))) | s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',X37))),s('type.num.num',sK3)))))) ) | $spl66),
  inference(backward_demodulation,[],[f12784,f11297])).
fof(f13887,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13885,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882,f13884])).
fof(f13883,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880,f13882])).
fof(f13881,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878,f13880])).
fof(f13879,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876,f13878])).
fof(f13877,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874,f13876])).
fof(f13875,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871,f13874])).
fof(f13872,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13871])).
fof(f13869,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868])).
fof(f13867,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866])).
fof(f13865,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864])).
fof(f13863,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862])).
fof(f13861,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860])).
fof(f13859,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858])).
fof(f13857,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856])).
fof(f13855,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854])).
fof(f13853,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852])).
fof(f13851,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850])).
fof(f13849,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846,f13848])).
fof(f13847,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844,f13846])).
fof(f13845,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842,f13844])).
fof(f13843,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840,f13842])).
fof(f13841,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838,f13840])).
fof(f13839,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836,f13838])).
fof(f13837,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833,f13836])).
fof(f13834,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830,f13833])).
fof(f13831,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827,f13830])).
fof(f13828,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13827])).
fof(f13825,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824])).
fof(f13823,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820,f13822])).
fof(f13821,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818,f13820])).
fof(f13819,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816,f13818])).
fof(f13817,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814,f13816])).
fof(f13815,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812,f13814])).
fof(f13813,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810,f13812])).
fof(f13811,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808,f13810])).
fof(f13809,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806,f13808])).
fof(f13807,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804,f13806])).
fof(f13805,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802,f13804])).
fof(f13803,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800,f13802])).
fof(f13801,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798,f13800])).
fof(f13799,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796,f13798])).
fof(f13797,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794,f13796])).
fof(f13795,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792,f13794])).
fof(f13793,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790,f13792])).
fof(f13791,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788,f13790])).
fof(f13789,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786,f13788])).
fof(f13787,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784,f13786])).
fof(f13785,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782,f13784])).
fof(f13783,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779,f13782])).
fof(f13780,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776,f13779])).
fof(f13777,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774,f13776])).
fof(f13775,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772,f13774])).
fof(f13773,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770,f13772])).
fof(f13771,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125,f13770])).
fof(f13769,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124,f13125])).
fof(f13768,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766,f13124])).
fof(f13767,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764,f13766])).
fof(f13765,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762,f13764])).
fof(f13763,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760,f13762])).
fof(f13761,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758,f13760])).
fof(f13759,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755,f13758])).
fof(f13756,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752,f13755])).
fof(f13753,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749,f13752])).
fof(f13750,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112,f13749])).
fof(f13747,plain,(
  $false | ($spl1 | $spl66)),
  inference(global_subsumption,[],[f13115,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112])).
fof(f13115,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X24))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X23))),s('type.num.num',X22))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24)))) ) | ($spl1 | $spl66)),
  inference(backward_demodulation,[],[f12784,f5873])).
fof(f5873,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X24))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X23))),s('type.num.num',X22)))))) ) | $spl1),
  inference(superposition,[],[f4029,f373])).
fof(f13746,plain,(
  $false | ($spl1 | $spl66)),
  inference(global_subsumption,[],[f13114,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112])).
fof(f13114,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X20))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X17))),s('type.num.num',X18))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))))),s('type.num.num',X20)))) ) | ($spl1 | $spl66)),
  inference(backward_demodulation,[],[f12784,f5872])).
fof(f5872,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num',X18))))),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X20))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num',X19),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X17))),s('type.num.num',X18)))))) ) | $spl1),
  inference(superposition,[],[f4029,f372])).
fof(f13744,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742,f13112])).
fof(f13743,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739,f13742])).
fof(f13740,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109,f13739])).
fof(f13737,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735,f13109])).
fof(f13736,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107,f13735])).
fof(f13733,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106,f13107])).
fof(f13732,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105,f13106])).
fof(f13731,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104,f13105])).
fof(f13730,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728,f13104])).
fof(f13729,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102,f13728])).
fof(f13726,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100,f13102])).
fof(f13724,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722,f13100])).
fof(f13723,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719,f13722])).
fof(f13720,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716,f13719])).
fof(f13717,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714,f13716])).
fof(f13715,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095,f13714])).
fof(f13713,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711,f13095])).
fof(f13712,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093,f13711])).
fof(f13709,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092,f13093])).
fof(f13708,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091,f13092])).
fof(f13707,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090,f13091])).
fof(f13706,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704,f13090])).
fof(f13705,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088,f13704])).
fof(f13702,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700,f13088])).
fof(f13701,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698,f13700])).
fof(f13699,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696,f13698])).
fof(f13697,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694,f13696])).
fof(f13695,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692,f13694])).
fof(f13693,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690,f13692])).
fof(f13691,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688,f13690])).
fof(f13689,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686,f13688])).
fof(f13687,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684,f13686])).
fof(f13685,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682,f13684])).
fof(f13683,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680,f13682])).
fof(f13681,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678,f13680])).
fof(f13679,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676,f13678])).
fof(f13677,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674,f13676])).
fof(f13675,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672,f13674])).
fof(f13673,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668,f13672])).
fof(f13669,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666,f13668])).
fof(f13667,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664,f13666])).
fof(f13665,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662,f13664])).
fof(f13663,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660,f13662])).
fof(f13661,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657,f13660])).
fof(f13659,plain,(
  $false | ($spl7 | $spl37 | $spl66)),
  inference(subsumption_resolution,[],[f13060,f253])).
fof(f13060,plain,(
  ~p(s(bool,'T_0')) | ($spl7 | $spl37 | $spl66)),
  inference(backward_demodulation,[],[f12784,f8326])).
fof(f8326,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | ($spl7 | $spl37)),
  inference(unit_resulting_resolution,[],[f7220,f8245,f357])).
fof(f13658,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655,f13657])).
fof(f13656,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653,f13655])).
fof(f13654,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651,f13653])).
fof(f13652,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649,f13651])).
fof(f13650,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647,f13649])).
fof(f13648,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645,f13647])).
fof(f13646,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643,f13645])).
fof(f13644,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640,f13643])).
fof(f13641,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637,f13640])).
fof(f13638,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634,f13637])).
fof(f13635,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631,f13634])).
fof(f13632,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628,f13631])).
fof(f13629,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625,f13628])).
fof(f13626,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622,f13625])).
fof(f13623,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619,f13622])).
fof(f13620,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617,f13619])).
fof(f13618,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615,f13617])).
fof(f13616,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613,f13615])).
fof(f13614,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611,f13613])).
fof(f13612,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609,f13611])).
fof(f13610,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13609])).
fof(f13608,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607])).
fof(f13606,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605])).
fof(f13604,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601,f13603])).
fof(f13602,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599,f13601])).
fof(f13600,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597,f13599])).
fof(f13598,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595,f13597])).
fof(f13596,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593,f13595])).
fof(f13594,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591,f13593])).
fof(f13592,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589,f13591])).
fof(f13590,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587,f13589])).
fof(f13588,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585,f13587])).
fof(f13586,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583,f13585])).
fof(f13584,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581,f13583])).
fof(f13582,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579,f13581])).
fof(f13580,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577,f13579])).
fof(f13578,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575,f13577])).
fof(f13576,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573,f13575])).
fof(f13574,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571,f13573])).
fof(f13572,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569,f13571])).
fof(f13570,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567,f13569])).
fof(f13568,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565,f13567])).
fof(f13566,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563,f13565])).
fof(f13564,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561,f13563])).
fof(f13562,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559,f13561])).
fof(f13560,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556,f13559])).
fof(f13557,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553,f13556])).
fof(f13554,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550,f13553])).
fof(f13551,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547,f13550])).
fof(f13548,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544,f13547])).
fof(f13545,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541,f13544])).
fof(f13542,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538,f13541])).
fof(f13539,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535,f13538])).
fof(f13536,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532,f13535])).
fof(f13533,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529,f13532])).
fof(f13530,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526,f13529])).
fof(f13527,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523,f13526])).
fof(f13524,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520,f13523])).
fof(f13521,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517,f13520])).
fof(f13518,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514,f13517])).
fof(f13515,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511,f13514])).
fof(f13512,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509,f13511])).
fof(f13510,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507,f13509])).
fof(f13508,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505,f13507])).
fof(f13506,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503,f13505])).
fof(f13504,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13503])).
fof(f13500,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499])).
fof(f13498,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497])).
fof(f13496,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495])).
fof(f13494,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493])).
fof(f13492,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491])).
fof(f13490,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489])).
fof(f13488,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487])).
fof(f13486,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485])).
fof(f13484,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483])).
fof(f13482,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481])).
fof(f13480,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479])).
fof(f13478,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477])).
fof(f13476,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475])).
fof(f13474,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471,f13473])).
fof(f13472,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469,f13471])).
fof(f13470,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467,f13469])).
fof(f13468,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465,f13467])).
fof(f13466,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463,f13465])).
fof(f13464,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461,f13463])).
fof(f13462,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457,f13461])).
fof(f13458,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455,f13457])).
fof(f13456,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453,f13455])).
fof(f13454,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451,f13453])).
fof(f13452,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447,f13451])).
fof(f13448,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444,f13447])).
fof(f13445,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441,f13444])).
fof(f13442,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438,f13441])).
fof(f13439,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435,f13438])).
fof(f13436,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432,f13435])).
fof(f13433,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429,f13432])).
fof(f13430,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426,f13429])).
fof(f13427,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421,f13426])).
fof(f13422,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419,f13421])).
fof(f13420,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415,f13419])).
fof(f13416,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413,f13415])).
fof(f13414,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409,f13413])).
fof(f13410,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407,f13409])).
fof(f13408,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405,f13407])).
fof(f13406,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403,f13405])).
fof(f13404,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401,f13403])).
fof(f13402,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399,f13401])).
fof(f13400,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397,f13399])).
fof(f13398,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395,f13397])).
fof(f13396,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393,f13395])).
fof(f13394,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391,f13393])).
fof(f13392,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13391])).
fof(f13390,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389])).
fof(f13388,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387])).
fof(f13386,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385])).
fof(f13384,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383])).
fof(f13382,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379,f13381])).
fof(f13380,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377,f13379])).
fof(f13378,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375,f13377])).
fof(f13376,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373,f13375])).
fof(f13374,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371,f13373])).
fof(f13372,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369,f13371])).
fof(f13370,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363,f13369])).
fof(f13364,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892,f13363])).
fof(f13360,plain,(
  $false | ($spl37 | $spl66)),
  inference(global_subsumption,[],[f13359,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892])).
fof(f13359,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',X1)))) ) | ($spl37 | $spl66)),
  inference(forward_demodulation,[],[f12894,f329])).
fof(f12894,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK1)))))) ) | ($spl37 | $spl66)),
  inference(backward_demodulation,[],[f12784,f12096])).
fof(f13358,plain,(
  $false | ($spl37 | $spl66)),
  inference(global_subsumption,[],[f13357,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892])).
fof(f13357,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1)))))) ) | ($spl37 | $spl66)),
  inference(forward_demodulation,[],[f12893,f329])).
fof(f12893,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK2),s('type.num.num',sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2))),s('type.num.num',sK1)))))) ) | ($spl37 | $spl66)),
  inference(backward_demodulation,[],[f12784,f12095])).
fof(f13356,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354,f12892])).
fof(f13355,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351,f13354])).
fof(f13352,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348,f13351])).
fof(f13349,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345,f13348])).
fof(f13346,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342,f13345])).
fof(f13343,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339,f13342])).
fof(f13340,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873,f13339])).
fof(f13336,plain,(
  $false | ($spl1 | $spl66)),
  inference(global_subsumption,[],[f12877,f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873])).
fof(f12877,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X29))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X27),s('type.num.num',X28))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num',X29)))) ) | ($spl1 | $spl66)),
  inference(backward_demodulation,[],[f12784,f5876])).
fof(f5876,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num',X29))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X29))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X27),s('type.num.num',X28)))) ) | $spl1),
  inference(superposition,[],[f4029,f328])).
fof(f13335,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872,f12873])).
fof(f13334,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329,f12872])).
fof(f13330,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326,f13329])).
fof(f13327,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865,f13326])).
fof(f13324,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864,f12865])).
fof(f13323,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321,f12864])).
fof(f13322,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318,f13321])).
fof(f13319,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855,f13318])).
fof(f13313,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310,f12855])).
fof(f13311,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307,f13310])).
fof(f13308,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304,f13307])).
fof(f13305,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301,f13304])).
fof(f13302,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841,f13301])).
fof(f13297,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840,f12841])).
fof(f13296,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838,f12840])).
fof(f13295,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837,f12838])).
fof(f13294,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833,f12837])).
fof(f13293,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291,f12833])).
fof(f13292,plain,(
  $false | $spl66),
  inference(global_subsumption,[],[f251,f253,f255,f256,f257,f258,f259,f260,f262,f265,f424,f267,f266,f271,f270,f275,f274,f321,f322,f323,f328,f329,f334,f333,f332,f335,f336,f425,f337,f339,f340,f341,f342,f343,f427,f345,f349,f346,f352,f351,f350,f354,f353,f356,f359,f358,f357,f371,f372,f373,f375,f374,f379,f378,f377,f376,f416,f388,f387,f386,f415,f428,f430,f435,f434,f440,f455,f462,f471,f485,f539,f538,f534,f532,f530,f529,f528,f577,f629,f630,f643,f731,f746,f770,f779,f780,f819,f859,f868,f869,f1043,f1071,f1091,f1087,f1083,f1079,f1078,f1077,f1129,f1139,f1140,f1141,f1142,f1144,f1145,f1146,f1199,f1259,f1264,f1265,f1266,f1267,f1268,f1269,f1292,f1421,f1432,f1435,f1450,f1466,f1467,f1483,f1484,f1485,f1486,f1473,f1474,f1488,f1489,f1490,f1491,f1492,f1493,f1541,f1544,f1556,f1573,f1622,f1625,f1630,f1650,f1633,f1759,f1696,f1697,f1698,f1700,f1701,f1702,f1703,f1704,f1705,f1706,f1772,f1773,f1787,f1839,f1849,f1862,f1867,f1920,f1945,f1955,f1956,f1957,f1966,f1967,f1982,f2001,f2049,f2050,f2051,f2054,f2055,f2056,f2057,f2058,f2060,f2061,f2062,f2063,f2064,f2065,f2066,f2067,f2068,f2044,f2107,f2108,f2109,f2111,f2112,f2113,f2114,f2115,f2117,f2118,f2119,f2121,f2122,f2123,f2124,f2135,f2136,f2179,f2193,f2267,f2269,f2270,f2271,f2272,f2286,f2287,f2375,f2331,f2612,f2568,f2566,f2587,f2589,f2591,f2632,f2593,f2595,f2596,f2607,f2608,f2659,f2660,f2657,f2705,f2689,f2770,f2772,f2774,f2777,f2779,f2780,f2782,f2783,f2784,f2785,f2786,f2787,f2789,f2791,f2792,f2793,f2794,f2996,f3089,f3061,f3126,f3127,f3169,f3170,f3310,f3467,f3490,f3499,f3531,f3555,f3556,f3645,f3646,f2497,f2310,f3028,f4351,f5197,f5199,f5492,f5361,f5508,f5509,f5510,f5517,f5518,f5519,f5520,f5424,f5529,f5459,f5559,f5561,f5563,f5720,f5581,f5609,f5738,f5625,f5745,f5746,f5747,f5748,f5649,f5757,f5687,f5787,f5789,f5791,f5956,f5953,f5946,f5939,f5938,f5937,f5932,f5930,f5929,f5928,f5970,f6052,f6053,f6193,f6196,f6199,f6084,f6249,f6253,f6307,f6299,f6297,f6337,f6619,f6634,f252,f1263,f1482,f1694,f2048,f2059,f2106,f2116,f3500,f3027,f2822,f2401,f2385,f2384,f2383,f2382,f2336,f2309,f2125,f2069,f2005,f1995,f1989,f1987,f1820,f1817,f1816,f1708,f1707,f1653,f1645,f1640,f1638,f1631,f1576,f1568,f1563,f1561,f1487,f1295,f1288,f1284,f1282,f543,f542,f495,f477,f475,f466,f439,f429,f2569,f2610,f2776,f2788,f2870,f2917,f2918,f2919,f2920,f2939,f2940,f2941,f3897,f7230,f7231,f7901,f7775,f7782,f7783,f7789,f7790,f7791,f7914,f7917,f7918,f7919,f7920,f7821,f7942,f7958,f7960,f7964,f7966,f8057,f8058,f8060,f8084,f8085,f8086,f8089,f8091,f8092,f8093,f8095,f8099,f8100,f8101,f8102,f8103,f8208,f8209,f8210,f8214,f8219,f8220,f8223,f8224,f8227,f8228,f8233,f8234,f8235,f8236,f8237,f8418,f8419,f8420,f8421,f8428,f8429,f8430,f8432,f8436,f8437,f8438,f8439,f8440,f8441,f8532,f8533,f8534,f8536,f8541,f8542,f8544,f8548,f8550,f8553,f8554,f8555,f8556,f8756,f8833,f8834,f8835,f8839,f8840,f8841,f8843,f8847,f8848,f8849,f8850,f8851,f8852,f8876,f8878,f8880,f8883,f8884,f8888,f8894,f8896,f8897,f8898,f8932,f8906,f8948,f8975,f8976,f9151,f8992,f9015,f9017,f9020,f9154,f9022,f9158,f9024,f9160,f9026,f9166,f9169,f9170,f9171,f9172,f9059,f9075,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9223,f9227,f9197,f9195,f9194,f9193,f8800,f8695,f8686,f8678,f8675,f5674,f5672,f5671,f5670,f5669,f5667,f5449,f5447,f5446,f5445,f5444,f5442,f5293,f5292,f5288,f5287,f5285,f5283,f5282,f5281,f5277,f5276,f5274,f5272,f5068,f3771,f3765,f3764,f3760,f3759,f3757,f3755,f3720,f3719,f3697,f3696,f3692,f3691,f3689,f3687,f3229,f3228,f3224,f3212,f3211,f3207,f3206,f3204,f3202,f3201,f3200,f3196,f3195,f3193,f3191,f3182,f365,f364,f363,f362,f361,f360,f10606,f10610,f10611,f10746,f10946,f10947,f10948,f10949,f10772,f10779,f10790,f10792,f10793,f10794,f10795,f10797,f10813,f10984,f10985,f10987,f10988,f10989,f10990,f10993,f10994,f10997,f11162,f11037,f11175,f11176,f11177,f11178,f11060,f11187,f11078,f11080,f11081,f11082,f11083,f11085,f11101,f11217,f11219,f11222,f11223,f11224,f11225,f11228,f11230,f11233,f11400,f11412,f11413,f11414,f11415,f11297,f11424,f11315,f11317,f11318,f11319,f11320,f11322,f11338,f11454,f11456,f11459,f11460,f11461,f11462,f11465,f11467,f11470,f11813,f11814,f11815,f11816,f11819,f11820,f11822,f11823,f11826,f11827,f11828,f11829,f11830,f11831,f12174,f12180,f12181,f12201,f12213,f12217,f12218,f12278,f12279,f12292,f12294,f12303,f12304,f12309,f12312,f12313,f12392,f12393,f12782,f12786,f12405,f12406,f12788,f12789,f12790,f12791,f12792,f12793,f12794,f12795,f12796,f12797,f12798,f12799,f12800,f12801,f12802,f12803,f12804,f12805,f12806,f12807,f12808,f12809,f12810,f12811,f12814,f12815,f12816,f12817,f12474,f12475,f12480,f12483,f12484,f12823,f12825,f12784,f13291])).
fof(f13290,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f12830,f253])).
fof(f12830,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(backward_demodulation,[],[f12784,f255])).
fof(f12787,plain,(
  ( ! [X2,X1] : (~sP0(X1,'T_0',X2) | p(s(bool,X1))) ) | $spl68),
  inference(cnf_transformation,[],[f12787_D])).
fof(f12787_D,plain,(
  ( ! [X2,X1] : (~sP0(X1,'T_0',X2) | p(s(bool,X1))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f12784,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl66),
  inference(cnf_transformation,[],[f12784_D])).
fof(f12784_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f12825,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,'T_0',X2)) )),
  inference(condensation,[],[f12824])).
fof(f12824,plain,(
  ( ! [X39,X41,X38,X40] : (p(s(bool,X39)) | ~sP0(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f12496,f643])).
fof(f12496,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | ~sP0(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f387,f577])).
fof(f12783,plain,(
  ( ! [X2,X1] : (~sP0(X1,X2,'T_0') | p(s(bool,X1))) ) | $spl64),
  inference(cnf_transformation,[],[f12783_D])).
fof(f12783_D,plain,(
  ( ! [X2,X1] : (~sP0(X1,X2,'T_0') | p(s(bool,X1))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f12823,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,X2,'T_0')) )),
  inference(condensation,[],[f12822])).
fof(f12822,plain,(
  ( ! [X37,X35,X36,X34] : (p(s(bool,X35)) | ~sP0(X35,X36,'T_0') | s(bool,X34) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f12495,f643])).
fof(f12495,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | ~sP0(X35,X36,'T_0') | s(bool,X34) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f386,f577])).
fof(f12786,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,'T_0',X2)) )),
  inference(condensation,[],[f12785])).
fof(f12785,plain,(
  ( ! [X39,X41,X38,X40] : (p(s(bool,X39)) | ~sP0(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f12402,f643])).
fof(f12402,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | ~sP0(X39,'T_0',X40) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f387,f577])).
fof(f12782,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP0(X1,X2,'T_0')) )),
  inference(condensation,[],[f12781])).
fof(f12781,plain,(
  ( ! [X37,X35,X36,X34] : (p(s(bool,X35)) | ~sP0(X35,X36,'T_0') | s(bool,X34) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f12401,f643])).
fof(f12401,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | ~sP0(X35,X36,'T_0') | s(bool,X34) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f386,f577])).
fof(f9655,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) | $spl60),
  inference(cnf_transformation,[],[f9655_D])).
fof(f9655_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f9656,plain,(
  ( ! [X23] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X23)) ) | $spl62),
  inference(cnf_transformation,[],[f9656_D])).
fof(f9656_D,plain,(
  ( ! [X23] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X23)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f9584,plain,(
  ( ! [X23] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X23) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))) ) | $spl54),
  inference(superposition,[],[f9229,f2569])).
fof(f9229,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl54),
  inference(backward_demodulation,[],[f9156,f361])).
fof(f9156,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl54),
  inference(cnf_transformation,[],[f9156_D])).
fof(f9156_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f9159,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl58),
  inference(cnf_transformation,[],[f9159_D])).
fof(f9159_D,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f9158,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(subsumption_resolution,[],[f9023,f321])).
fof(f9023,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f363,f1696])).
fof(f9157,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl56),
  inference(cnf_transformation,[],[f9157_D])).
fof(f9157_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f9022,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f362,f1696])).
fof(f8632,plain,(
  $false | ($spl1 | $spl49)),
  inference(subsumption_resolution,[],[f8631,f253])).
fof(f8631,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl49)),
  inference(forward_demodulation,[],[f8558,f440])).
fof(f8558,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | ($spl1 | $spl49)),
  inference(unit_resulting_resolution,[],[f4120,f8546,f350])).
fof(f8546,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl49),
  inference(cnf_transformation,[],[f8546_D])).
fof(f8546_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f8551,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) ) | $spl52),
  inference(cnf_transformation,[],[f8551_D])).
fof(f8551_D,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f8550,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8549,f258])).
fof(f8549,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8525,f260])).
fof(f8525,plain,(
  ( ! [X10] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))) )),
  inference(superposition,[],[f2116,f260])).
fof(f8547,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) ) | $spl50),
  inference(cnf_transformation,[],[f8547_D])).
fof(f8547_D,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f8544,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8543,f258])).
fof(f8543,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f8523,f2566])).
fof(f8523,plain,(
  ( ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f2116,f2566])).
fof(f8540,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl46),
  inference(cnf_transformation,[],[f8540_D])).
fof(f8540_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f8536,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8520,f1694])).
fof(f8520,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(superposition,[],[f2116,f1694])).
fof(f8423,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl41),
  inference(cnf_transformation,[],[f8423_D])).
fof(f8423_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f8425,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1))) | $spl42),
  inference(cnf_transformation,[],[f8425_D])).
fof(f8425_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f8421,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8403,f252])).
fof(f8403,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK1)))),
  inference(superposition,[],[f2106,f252])).
fof(f8230,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl37),
  inference(cnf_transformation,[],[f8230_D])).
fof(f8230_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f8232,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK2))) | $spl38),
  inference(cnf_transformation,[],[f8232_D])).
fof(f8232_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK2))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f8228,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8201,f2569])).
fof(f8201,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(superposition,[],[f2059,f2569])).
fof(f8216,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl33),
  inference(cnf_transformation,[],[f8216_D])).
fof(f8216_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f8218,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl34),
  inference(cnf_transformation,[],[f8218_D])).
fof(f8218_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f8214,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f8195,f1694])).
fof(f8195,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(superposition,[],[f2059,f1694])).
fof(f3783,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(cnf_transformation,[],[f3783_D])).
fof(f3783_D,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7906,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl31),
  inference(cnf_transformation,[],[f7906_D])).
fof(f7906_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f7904,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl10),
  inference(subsumption_resolution,[],[f7785,f3240])).
fof(f7785,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2)),
  inference(superposition,[],[f360,f1694])).
fof(f7091,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl26),
  inference(cnf_transformation,[],[f7091_D])).
fof(f7091_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f7092,plain,(
  ( ! [X5] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK6(sK3,X5)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(cnf_transformation,[],[f7092_D])).
fof(f7092_D,plain,(
  ( ! [X5] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK6(sK3,X5)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f6903,plain,(
  ( ! [X5] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',sK6(sK3,X5)) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl4),
  inference(superposition,[],[f362,f4584])).
fof(f4340,plain,(
  $false | ($spl10 | $spl12 | $spl14)),
  inference(subsumption_resolution,[],[f4287,f4082])).
fof(f4082,plain,(
  ( ! [X7] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1)))) ) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f3777,f3775])).
fof(f4287,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl10 | $spl14)),
  inference(backward_demodulation,[],[f4239,f3027])).
fof(f4239,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) | ($spl10 | $spl14)),
  inference(forward_demodulation,[],[f4227,f259])).
fof(f4227,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl10 | $spl14)),
  inference(backward_demodulation,[],[f4192,f2569])).
fof(f4192,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | ($spl10 | $spl14)),
  inference(unit_resulting_resolution,[],[f3240,f252,f4043])).
fof(f4043,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl14),
  inference(backward_demodulation,[],[f3777,f361])).
fof(f4334,plain,(
  $false | ($spl10 | $spl12 | $spl14)),
  inference(subsumption_resolution,[],[f4277,f4082])).
fof(f4277,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) | ($spl10 | $spl14)),
  inference(backward_demodulation,[],[f4239,f2125])).
fof(f4333,plain,(
  $false | ($spl10 | $spl12 | $spl14)),
  inference(subsumption_resolution,[],[f4276,f4082])).
fof(f4276,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK6(sK1,sK2)),s('type.num.num',sK1))) | ($spl10 | $spl14)),
  inference(backward_demodulation,[],[f4239,f2069])).
fof(f4240,plain,(
  $false | ($spl7 | $spl10 | $spl14)),
  inference(subsumption_resolution,[],[f4239,f1155])).
fof(f4021,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X34)))) ) | $spl24),
  inference(cnf_transformation,[],[f4021_D])).
fof(f4021_D,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X34)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f3777,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl14),
  inference(cnf_transformation,[],[f3777_D])).
fof(f3777_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4020,plain,(
  ( ! [X34] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X34)))) ) | $spl1),
  inference(forward_demodulation,[],[f4019,f252])).
fof(f4019,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X34))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl1),
  inference(subsumption_resolution,[],[f3938,f1149])).
fof(f3938,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X34))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))) )),
  inference(superposition,[],[f360,f252])).
fof(f3876,plain,(
  $false | ($spl0 | $spl10)),
  inference(subsumption_resolution,[],[f3875,f3240])).
fof(f3875,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl0),
  inference(forward_demodulation,[],[f3850,f260])).
fof(f3850,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | $spl0),
  inference(backward_demodulation,[],[f3798,f2569])).
fof(f3798,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | $spl0),
  inference(backward_demodulation,[],[f1150,f252])).
fof(f3794,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | $spl20),
  inference(cnf_transformation,[],[f3794_D])).
fof(f3794_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f3796,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK7(sK1,sK2)) | $spl23),
  inference(cnf_transformation,[],[f3796_D])).
fof(f3796_D,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK7(sK1,sK2)) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f2310,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK7(sK1,sK2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1)),
  inference(superposition,[],[f345,f2125])).
fof(f1150,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | $spl0),
  inference(cnf_transformation,[],[f1150_D])).
fof(f1150_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1151,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | $spl2),
  inference(cnf_transformation,[],[f1151_D])).
fof(f1151_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f2497,plain,(
  ( ! [X13] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))) )),
  inference(superposition,[],[f345,f252])).
fof(f3781,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK2)))) ) | $spl16),
  inference(cnf_transformation,[],[f3781_D])).
fof(f3781_D,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK2)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f3780,plain,(
  ( ! [X15] : (s('type.num.num',sK2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK2)))) ) | $spl10),
  inference(forward_demodulation,[],[f3779,f2569])).
fof(f3779,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl10),
  inference(subsumption_resolution,[],[f3778,f3240])).
fof(f3778,plain,(
  ( ! [X15] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f3762,f2569])).
fof(f3762,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f363,f2569])).
fof(f3775,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1)))) ) | $spl12),
  inference(cnf_transformation,[],[f3775_D])).
fof(f3775_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f3774,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1)))) ) | $spl2),
  inference(forward_demodulation,[],[f3773,f252])).
fof(f3773,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl2),
  inference(subsumption_resolution,[],[f3772,f1165])).
fof(f1165,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl2),
  inference(superposition,[],[f1151,f257])).
fof(f3772,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f3758,f252])).
fof(f3758,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f363,f252])).
fof(f2458,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f2424,f528])).
fof(f2424,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'))) | $spl8),
  inference(backward_demodulation,[],[f2402,f1561])).
fof(f2402,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl8),
  inference(backward_demodulation,[],[f2387,f2125])).
fof(f2457,plain,(
  $false | ($spl2 | $spl8)),
  inference(subsumption_resolution,[],[f2417,f1234])).
fof(f1234,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f253,f1166,f415])).
fof(f1166,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl2),
  inference(forward_demodulation,[],[f1157,f257])).
fof(f1157,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0')))) | $spl2),
  inference(unit_resulting_resolution,[],[f1151,f274])).
fof(f2417,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl8),
  inference(backward_demodulation,[],[f2402,f1282])).
fof(f2456,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f2405,f435])).
fof(f2405,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl8),
  inference(backward_demodulation,[],[f2402,f439])).
fof(f2387,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) | $spl8),
  inference(cnf_transformation,[],[f2387_D])).
fof(f2387_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2388,plain,(
  ( ! [X13] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK2)))) ) | $spl10),
  inference(cnf_transformation,[],[f2388_D])).
fof(f2388_D,plain,(
  ( ! [X13] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK2)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2331,plain,(
  ( ! [X13] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK7(sK1,sK2)),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f345,f2125])).
fof(f1153,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | $spl4),
  inference(cnf_transformation,[],[f1153_D])).
fof(f1153_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1155,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | $spl7),
  inference(cnf_transformation,[],[f1155_D])).
fof(f1155_D,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f1146,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3)),
  inference(superposition,[],[f345,f252])).
fof(f1139,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))) )),
  inference(superposition,[],[f345,f252])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 528
% Passive clauses: 3614
% Generated clauses: 43307
% Final active clauses: 123
% Final passive clauses: 581
% Input formulas: 69
% Initial clauses: 153
% 
% Duplicate literals: 141
% Trivial inequalities: 168
% Fw subsumption resolutions: 897
% Fw demodulations: 18011
% Bw demodulations: 1770
% Condensations: 158
% Global subsumptions: 323
% 
% Simple tautologies: 235
% Equational tautologies: 142
% Forward subsumptions: 19055
% Fw demodulations to eq. taut.: 149
% Bw demodulations to eq. taut.: 10
% 
% Unit resulting resolution: 6824
% Factoring: 1
% Forward superposition: 5217
% Backward superposition: 7905
% Self superposition: 56
% Equality factoring: 26
% Equality resolution: 23
% 
% Split clauses: 60
% Split components: 121
% SAT solver clauses: 4413
% SAT solver unit clauses: 642
% SAT solver binary clauses: 1784
% 
% Sat splits: 60
% Sat splitting refutations: 354
% 
% Memory used [KB]: 21875
% Time elapsed: 1.442 s
% ------------------------------
% ------------------------------
% Success in time 2.771 s
