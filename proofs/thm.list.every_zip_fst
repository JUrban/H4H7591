Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% (83658)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1228
% Passive clauses: 6524
% Generated clauses: 34905
% Final active clauses: 1127
% Final passive clauses: 4943
% Input formulas: 516
% Initial clauses: 945
% 
% Duplicate literals: 192
% Trivial inequalities: 216
% Fw subsumption resolutions: 1601
% Fw demodulations: 5084
% Bw demodulations: 99
% 
% Simple tautologies: 401
% Equational tautologies: 25
% Forward subsumptions: 20655
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 5487
% Factoring: 625
% Forward superposition: 10896
% Backward superposition: 9516
% Self superposition: 52
% Equality factoring: 2
% Equality resolution: 25
% 
% Split clauses: 327
% Split components: 656
% SAT solver clauses: 501
% SAT solver unit clauses: 15
% SAT solver binary clauses: 84
% 
% Sat splits: 327
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 501
% TWLsolver calls for satisfiability: 411
% 
% Memory used [KB]: 18677
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (83670)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 617
% Passive clauses: 4114
% Generated clauses: 25678
% Final active clauses: 587
% Final passive clauses: 3353
% Input formulas: 516
% Initial clauses: 945
% 
% Duplicate literals: 106
% Trivial inequalities: 21
% Fw subsumption resolutions: 931
% Fw demodulations: 3663
% Bw demodulations: 172
% Condensations: 77
% Global subsumptions: 37
% 
% Simple tautologies: 341
% Equational tautologies: 18
% Forward subsumptions: 11580
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 2840
% Factoring: 143
% Forward superposition: 7457
% Backward superposition: 4999
% Self superposition: 61
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 21
% Split components: 42
% SAT solver clauses: 5648
% SAT solver unit clauses: 1226
% SAT solver binary clauses: 284
% SAT solver learnt clauses: 74
% SAT solver learnt literals: 14
% 
% Sat splits: 21
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 5500
% TWLsolver calls for satisfiability: 5383
% 
% Memory used [KB]: 26865
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% (83681)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1236
% Passive clauses: 10571
% Generated clauses: 92146
% Final active clauses: 1049
% Final passive clauses: 2899
% Input formulas: 516
% Initial clauses: 945
% Discarded non-redundant clauses: 1849
% 
% Duplicate literals: 11
% Trivial inequalities: 133
% Fw subsumption resolutions: 1796
% Fw demodulations: 20012
% Bw demodulations: 4276
% Condensations: 68
% Global subsumptions: 3329
% 
% Simple tautologies: 178
% Equational tautologies: 68
% Forward subsumptions: 44043
% Fw demodulations to eq. taut.: 702
% Bw demodulations to eq. taut.: 29
% 
% Unit resulting resolution: 25014
% Factoring: 2
% Forward superposition: 21369
% Backward superposition: 13185
% Self superposition: 115
% Equality factoring: 2
% Equality resolution: 21
% 
% Split clauses: 40
% Split components: 80
% SAT solver clauses: 18878
% SAT solver unit clauses: 7206
% SAT solver binary clauses: 9211
% 
% Sat splits: 40
% Sat splitting refutations: 4895
% 
% Memory used [KB]: 278886
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f29155,plain,(
  $false),
  inference(subsumption_resolution,[],[f29147,f1076])).
fof(f1076,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK15)))),
  inference(cnf_transformation,[],[f851])).
fof(f851,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK15))) & s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK15))) != s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK14,sK13),bool),'_dst_x0x1_2'(s(fun(sK14,bool),sK17),s(fun('type.pair.prod'(sK14,sK13),sK14),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(sK14,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK14),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK14),sK15),s('type.list.list'(sK13),sK16)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17])],[f760])).
fof(f760,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) & s(bool,'const.list.EVERY_2'(s(fun(X1,bool),X4),s('type.list.list'(X1),X2))) != s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X1,X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X4),s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3))))))))),
  inference(ennf_transformation,[],[f519])).
fof(f519,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) => s(bool,'const.list.EVERY_2'(s(fun(X1,bool),X4),s('type.list.list'(X1),X2))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X1,X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X4),s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3))))))))),
  inference(flattening,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) => s(bool,'const.list.EVERY_2'(s(fun(X1,bool),X4),s('type.list.list'(X1),X2))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X1,X0),bool),'_dst_x0x1_2'(s(fun(X1,bool),X4),s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) => s(bool,'const.list.EVERY_2'(s(fun(X7,bool),X10),s('type.list.list'(X7),X8))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X7,X6),bool),'_dst_x0x1_2'(s(fun(X7,bool),X10),s(fun('type.pair.prod'(X7,X6),X7),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X8),s('type.list.list'(X6),X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) => s(bool,'const.list.EVERY_2'(s(fun(X7,bool),X10),s('type.list.list'(X7),X8))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X7,X6),bool),'_dst_x0x1_2'(s(fun(X7,bool),X10),s(fun('type.pair.prod'(X7,X6),X7),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X8),s('type.list.list'(X6),X9))))))))),
  file('thm.list.every_zip_fst','thm.list.every_zip_fst')).
fof(f29147,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK15)))),
  inference(trivial_inequality_removal,[],[f29096])).
fof(f29096,plain,(
  s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK15))) != s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK15))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK15)))),
  inference(superposition,[],[f2163,f1080])).
fof(f1080,plain,(
  ( ! [X4,X5,X3,X1] : (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4)))) )),
  inference(cnf_transformation,[],[f762])).
fof(f762,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) | (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X5))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X0),'const.combin.o_2'(s(fun(X1,X0),X7),s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X2),'const.list.MAP_2'(s(fun(X3,X2),X6),s('type.list.list'(X3),X4))) = s('type.list.list'(X2),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X2),'const.combin.o_2'(s(fun(X3,X2),X6),s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4)))))))))),
  inference(ennf_transformation,[],[f523])).
fof(f523,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) => (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X5))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X0),'const.combin.o_2'(s(fun(X1,X0),X7),s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X2),'const.list.MAP_2'(s(fun(X3,X2),X6),s('type.list.list'(X3),X4))) = s('type.list.list'(X2),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X2),'const.combin.o_2'(s(fun(X3,X2),X6),s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4)))))))))),
  inference(flattening,[],[f522])).
fof(f522,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) => (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X5))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X0),'const.combin.o_2'(s(fun(X1,X0),X7),s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X2),'const.list.MAP_2'(s(fun(X3,X2),X6),s('type.list.list'(X3),X4))) = s('type.list.list'(X2),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X2),'const.combin.o_2'(s(fun(X3,X2),X6),s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4)))))))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X14,X7,X15,X6] : ! [X9,X8,X32,X33] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) => (s('type.list.list'(X7),X8) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun('type.pair.prod'(X7,X6),X7),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X8),s('type.list.list'(X6),X9))))))) & s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X7,X6),X6),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X8),s('type.list.list'(X6),X9))))))) & s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X7,X14),X33),s('type.list.list'(X7),X8))) = s('type.list.list'(X14),'const.list.MAP_2'(s(fun('type.pair.prod'(X7,X6),X14),'const.combin.o_2'(s(fun(X7,X14),X33),s(fun('type.pair.prod'(X7,X6),X7),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X8),s('type.list.list'(X6),X9))))))) & s('type.list.list'(X15),'const.list.MAP_2'(s(fun(X6,X15),X32),s('type.list.list'(X6),X9))) = s('type.list.list'(X15),'const.list.MAP_2'(s(fun('type.pair.prod'(X7,X6),X15),'const.combin.o_2'(s(fun(X6,X15),X32),s(fun('type.pair.prod'(X7,X6),X6),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X8),s('type.list.list'(X6),X9)))))))))),
  file('thm.list.every_zip_fst','thm.list.MAP_ZIP')).
fof(f2163,plain,(
  s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK15))) != s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),'const.list.MAP_2'(s(fun('type.pair.prod'(sK14,sK13),sK14),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK14,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK14),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK14),sK15),s('type.list.list'(sK13),sK16)))))))))),
  inference(superposition,[],[f1077,f1130])).
fof(f1130,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X4))))) = s(bool,'const.list.EVERY_2'(s(fun(X1,bool),'_dst_x0x1_2'(s(fun(X0,bool),X2),s(fun(X1,X0),X3))),s('type.list.list'(X1),X4)))) )),
  inference(cnf_transformation,[],[f576])).
fof(f576,plain,(
  ! [X0,X1,X2,X3,X4] : s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X4))))) = s(bool,'const.list.EVERY_2'(s(fun(X1,bool),'_dst_x0x1_2'(s(fun(X0,bool),X2),s(fun(X1,X0),X3))),s('type.list.list'(X1),X4)))),
  inference(flattening,[],[f575])).
fof(f575,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X4))))) = s(bool,'const.list.EVERY_2'(s(fun(X1,bool),'_dst_x0x1_2'(s(fun(X0,bool),X2),s(fun(X1,X0),X3))),s('type.list.list'(X1),X4)))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6,X7] : ! [X10,X33,X21] : s(bool,'const.list.EVERY_2'(s(fun(X6,bool),X10),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X33),s('type.list.list'(X7),X21))))) = s(bool,'const.list.EVERY_2'(s(fun(X7,bool),'_dst_x0x1_2'(s(fun(X6,bool),X10),s(fun(X7,X6),X33))),s('type.list.list'(X7),X21)))),
  file('thm.list.every_zip_fst','thm.list.EVERY_MAP')).
fof(f1077,plain,(
  s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK15))) != s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK14,sK13),bool),'_dst_x0x1_2'(s(fun(sK14,bool),sK17),s(fun('type.pair.prod'(sK14,sK13),sK14),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(sK14,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK14),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK14),sK15),s('type.list.list'(sK13),sK16)))))))),
  inference(cnf_transformation,[],[f851])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 620
% Passive clauses: 15255
% Generated clauses: 27495
% Final active clauses: 581
% Final passive clauses: 11900
% Input formulas: 516
% Initial clauses: 414
% 
% Selected by SInE selection: 138
% SInE iterations: 1
% 
% Duplicate literals: 365
% Trivial inequalities: 49
% Fw subsumption resolutions: 1370
% Fw demodulations: 2004
% Bw demodulations: 4
% 
% Simple tautologies: 610
% Equational tautologies: 13
% Forward subsumptions: 7131
% 
% Binary resolution: 9562
% Factoring: 48
% Forward superposition: 11268
% Backward superposition: 2530
% Equality resolution: 28
% 
% Split clauses: 825
% Split components: 1704
% SAT solver clauses: 875
% SAT solver unit clauses: 22
% SAT solver binary clauses: 237
% 
% Sat splits: 825
% Sat splitting refutations: 37
% 
% Memory used [KB]: 18677
% Time elapsed: 0.910 s
% ------------------------------
% ------------------------------
% Success in time 12.69 s
