Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (112438)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 642
% Passive clauses: 9243
% Generated clauses: 19586
% Final active clauses: 603
% Final passive clauses: 8111
% Input formulas: 69
% Initial clauses: 244
% 
% Duplicate literals: 390
% Trivial inequalities: 56
% Fw subsumption resolutions: 1321
% Fw demodulations: 737
% Bw demodulations: 38
% 
% Simple tautologies: 265
% Equational tautologies: 60
% Forward subsumptions: 7332
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 9184
% Factoring: 940
% Forward superposition: 2341
% Backward superposition: 4097
% Self superposition: 59
% Equality factoring: 26
% Equality resolution: 27
% 
% Split clauses: 332
% Split components: 665
% SAT solver clauses: 609
% SAT solver unit clauses: 14
% SAT solver binary clauses: 151
% 
% Sat splits: 332
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 606
% TWLsolver calls for satisfiability: 288
% 
% Memory used [KB]: 10490
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% (112473)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 403
% Passive clauses: 2801
% Generated clauses: 13553
% Final active clauses: 384
% Final passive clauses: 2362
% Input formulas: 69
% Initial clauses: 244
% 
% Duplicate literals: 206
% Trivial inequalities: 20
% Fw subsumption resolutions: 789
% Fw demodulations: 1104
% Bw demodulations: 52
% Condensations: 379
% Global subsumptions: 22
% 
% Simple tautologies: 279
% Equational tautologies: 18
% Forward subsumptions: 4609
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 3392
% Factoring: 205
% Forward superposition: 1679
% Backward superposition: 2546
% Self superposition: 58
% Equality factoring: 26
% Equality resolution: 9
% 
% Split clauses: 47
% Split components: 94
% SAT solver clauses: 3574
% SAT solver unit clauses: 245
% SAT solver binary clauses: 88
% SAT solver learnt clauses: 44
% SAT solver learnt literals: 10
% 
% Sat splits: 47
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 3486
% TWLsolver calls for satisfiability: 2039
% 
% Memory used [KB]: 16119
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f7847,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f336,f594,f592,f335,f593,f591,f3727,f3735,f3729,f3728,f3912,f3913,f3914,f3915,f3916,f3917,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3926,f3928,f3930,f3931,f3932,f3933,f3934,f3935,f3936,f3937,f3938,f3939,f3940,f3941,f3942,f3943,f3944,f3945,f3946,f3947,f3948,f3949,f3950,f3951,f3952,f3953,f3954,f3955,f3956,f3957,f3958,f3959,f3960,f3961,f3962,f3963,f3964,f3965,f3968,f3969,f3970,f3977,f3978,f3979,f3980,f3997,f3999,f4001,f4003,f4006,f4009,f4015,f4017,f4019,f4021,f4028,f4031,f4034,f4036,f4038,f4042,f4050,f4054,f5780,f5849,f5781,f5850,f5782,f5851,f5783,f5852,f5784,f5853,f5785,f5854,f5786,f5855,f5787,f5856,f5788,f5857,f5789,f5859,f5790,f5861,f5791,f5862,f5792,f5863,f5793,f5864,f5794,f5866,f5795,f5868,f5796,f5870,f5797,f5872,f5798,f5874,f5799,f5876,f5800,f5878,f5801,f5880,f5802,f5882,f5803,f5884,f5804,f5885,f5805,f5887,f5806,f5889,f5807,f5891,f5808,f5893,f5809,f5895,f5848,f5811,f5899,f5897,f6343,f6345,f6346,f6347,f6348,f6349,f6354,f6356,f6489,f6491,f6893,f6895,f7594,f7768,f7769,f7770,f7771,f7772,f7773,f7774,f7775,f7776,f7777,f7778,f7779,f7780,f7781,f7782,f7783,f7784,f7785,f7786,f7787,f7788,f7791,f7792,f7793,f7794,f7795,f7796,f7797,f7798,f7799,f7800,f7801,f7802,f7803,f7804,f7805,f7806,f7807,f7808,f7809,f7810,f7811,f7812,f7813,f7814,f7815,f7816,f7817,f7818,f7819,f7820,f7821,f7822,f7823,f7824,f7825,f7826,f7827,f7828,f7829,f7830,f7831,f7832,f7833,f7834,f7835,f7836,f7837,f7838,f7839,f7840,f7841,f7842,f7843,f7844,f7845,f7846])).
fof(f7846,plain,(
  $false | ($spl9 | $spl29 | $spl70)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1214,f1222,f1229,f1337,f1346,f1354,f1389,f1401,f1434,f1456,f1484,f1769,f1756,f1819,f1886,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2237,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2488,f2482,f2483,f2486,f2516,f2518,f2522,f2511,f2541,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3014,f3025,f3455,f3727,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2706,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3741,f3618,f3379,f3331,f3284,f3243,f3202,f3161,f3133,f3083,f3026,f3003,f2485,f2481,f2455,f2427,f2239,f2236,f1885,f1870,f1869,f1810,f1809,f1755,f1425,f1392,f1388,f1202,f1190,f1184,f1181,f1170,f1169,f1167,f1146,f1130,f1123,f1104,f1088,f1063,f1060,f1049,f1017,f1014,f990,f989,f987,f976,f972,f971,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f595,f415,f361,f360,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f6913,f6912,f6911,f6908,f6907,f6905,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f5897])).
fof(f7691,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl29)),
  inference(backward_demodulation,[],[f7593,f5859])).
fof(f7593,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(forward_demodulation,[],[f7402,f415])).
fof(f7402,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(superposition,[],[f433,f6905])).
fof(f7459,plain,(
  ( ! [X83] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X83)),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl9),
  inference(superposition,[],[f1142,f6905])).
fof(f7457,plain,(
  ( ! [X81] : (sP4('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X81)))) ) | $spl9),
  inference(superposition,[],[f1100,f6905])).
fof(f7456,plain,(
  ( ! [X80] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X80),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl9),
  inference(superposition,[],[f1049,f6905])).
fof(f7453,plain,(
  ( ! [X77] : (sP4('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X77),s(bool,'F_0')))) ) | $spl9),
  inference(superposition,[],[f976,f6905])).
fof(f7449,plain,(
  ( ! [X71] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X71)))) ) | $spl9),
  inference(superposition,[],[f910,f6905])).
fof(f7447,plain,(
  ( ! [X69] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X69)))) ) | $spl9),
  inference(superposition,[],[f909,f6905])).
fof(f7445,plain,(
  ( ! [X67] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X67)),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl9),
  inference(superposition,[],[f908,f6905])).
fof(f7443,plain,(
  ( ! [X65] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X65)),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl9),
  inference(superposition,[],[f907,f6905])).
fof(f7441,plain,(
  ( ! [X63] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X63),s(bool,'F_0')))) ) | $spl9),
  inference(superposition,[],[f862,f6905])).
fof(f7439,plain,(
  ( ! [X61] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X61),s(bool,'F_0')))) ) | $spl9),
  inference(superposition,[],[f861,f6905])).
fof(f7438,plain,(
  ( ! [X60] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X60),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl9),
  inference(superposition,[],[f860,f6905])).
fof(f7436,plain,(
  ( ! [X58] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X58),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl9),
  inference(superposition,[],[f859,f6905])).
fof(f7681,plain,(
  ( ! [X56] : (s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | s(bool,'T_0') = s(bool,X56)) ) | $spl9),
  inference(subsumption_resolution,[],[f7434,f595])).
fof(f7434,plain,(
  ( ! [X56] : (p(s(bool,'F_0')) | s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | s(bool,'T_0') = s(bool,X56)) ) | $spl9),
  inference(superposition,[],[f775,f6905])).
fof(f7595,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(forward_demodulation,[],[f7403,f415])).
fof(f7403,plain,(
  s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK13),s('type.num.num',sK12))) | $spl9),
  inference(superposition,[],[f432,f6905])).
fof(f7372,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f595,f6905,f527])).
fof(f7373,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f337,f6905,f525])).
fof(f7393,plain,(
  ~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(unit_resulting_resolution,[],[f595,f6905,f527])).
fof(f7394,plain,(
  sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(unit_resulting_resolution,[],[f337,f6905,f525])).
fof(f7335,plain,(
  sP3('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f6912,f506])).
fof(f7299,plain,(
  sP3('const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f6908,f506])).
fof(f7293,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(unit_resulting_resolution,[],[f337,f607,f602,f6907,f509])).
fof(f6905,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(unit_resulting_resolution,[],[f5847,f345])).
fof(f6907,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f337,f5847,f526])).
fof(f6908,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f595,f5847,f524])).
fof(f6911,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(unit_resulting_resolution,[],[f337,f5847,f526])).
fof(f6912,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(unit_resulting_resolution,[],[f595,f5847,f524])).
fof(f6913,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) | $spl9),
  inference(unit_resulting_resolution,[],[f337,f5847,f438])).
fof(f5847,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl9),
  inference(cnf_transformation,[],[f5847_D])).
fof(f5847_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f3028,plain,(
  ( ! [X4,X5,X3] : (s(X5,f(s(bool,'F_0'))) != s(X5,g(s(bool,'F_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,'T_0') = s(bool,sK22(X3,X4,X5,bool))) )),
  inference(superposition,[],[f481,f345])).
fof(f3030,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s(X3,sK22(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,'T_0') = s(bool,g(s(X3,sK22(X4,X5,bool,X3))))) )),
  inference(superposition,[],[f481,f345])).
fof(f3086,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK16(X3,X4,bool))))) | s(bool,'T_0') = s(bool,sK16(X3,X4,bool))) )),
  inference(superposition,[],[f419,f345])).
fof(f3130,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK16(X3,X4,bool))))) | s(bool,'T_0') = s(bool,sK16(X3,X4,bool))) )),
  inference(superposition,[],[f420,f345])).
fof(f3164,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK17(X3,X4,bool))))) | s(bool,'T_0') = s(bool,sK18(X3,X4,bool))) )),
  inference(superposition,[],[f421,f345])).
fof(f3199,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK17(X3,X4,bool))))) | s(bool,'T_0') = s(bool,sK18(X3,X4,bool))) )),
  inference(superposition,[],[f422,f345])).
fof(f3732,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(X16,X17) != s(X16,X18) | p(s(bool,X15)) | s(X16,'const.bool.COND_3'(s(bool,X14),s(X16,X19),s(X16,X17))) = s(X16,'const.bool.COND_3'(s(bool,X15),s(X16,X20),s(X16,X18))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f3595,f361])).
fof(f3595,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'F_0') != s(bool,X15) | s(X16,X17) != s(X16,X18) | p(s(bool,X15)) | s(X16,'const.bool.COND_3'(s(bool,X14),s(X16,X19),s(X16,X17))) = s(X16,'const.bool.COND_3'(s(bool,X15),s(X16,X20),s(X16,X18))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f429,f345])).
fof(f3744,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'F_0') != s(bool,X15) | s(X16,X17) != s(X16,X18) | p(s(bool,X14)) | s(X16,'const.bool.COND_3'(s(bool,X14),s(X16,X20),s(X16,X18))) = s(X16,'const.bool.COND_3'(s(bool,X15),s(X16,X19),s(X16,X17)))) )),
  inference(subsumption_resolution,[],[f3602,f356])).
fof(f3602,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'F_0') != s(bool,X15) | s(X16,X17) != s(X16,X18) | p(s(bool,X14)) | s(X16,'const.bool.COND_3'(s(bool,X14),s(X16,X20),s(X16,X18))) = s(X16,'const.bool.COND_3'(s(bool,X15),s(X16,X19),s(X16,X17))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f429,f345])).
fof(f6402,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'F_0'))))) )),
  inference(condensation,[],[f6401])).
fof(f6401,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.bool.COND_3'(s(bool,X7),s(bool,X8),s(bool,'F_0')))) | p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f5234,f356])).
fof(f5234,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.bool.COND_3'(s(bool,X7),s(bool,X8),s(bool,'F_0')))) | p(s(bool,X7)) | p(s(bool,X6)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f488,f345])).
fof(f5410,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X3)))) | s(bool,'T_0') = s(bool,sK14(X2,bool))) )),
  inference(superposition,[],[f413,f345])).
fof(f5447,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X3)))) | s(bool,'T_0') = s(bool,sK15(X2,bool))) )),
  inference(superposition,[],[f414,f345])).
fof(f5609,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X3),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f5539,f415])).
fof(f5539,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f432,f345])).
fof(f5737,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X3),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f5661,f415])).
fof(f5661,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X3),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f433,f345])).
fof(f360,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f229])).
fof(f229,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.EQ_CLAUSES|split|2')).
fof(f361,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f229])).
fof(f415,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X10] : ! [X12,X13] : s(X10,X13) = s(X10,'const.bool.COND_3'(s(bool,'F_0'),s(X10,X12),s(X10,X13)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.COND_CLAUSES|split|1')).
fof(f595,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f340,f337])).
fof(f340,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f225])).
fof(f225,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f49])).
fof(f49,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.NOT_CLAUSES|split|2')).
fof(f859,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) )),
  inference(unit_resulting_resolution,[],[f595,f415,f527])).
fof(f860,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) )),
  inference(unit_resulting_resolution,[],[f337,f415,f525])).
fof(f861,plain,(
  ( ! [X0,X1] : (~sP5('F_0',X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f595,f415,f527])).
fof(f862,plain,(
  ( ! [X0,X1] : (sP5('T_0',X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f337,f415,f525])).
fof(f873,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)))) )),
  inference(superposition,[],[f415,f345])).
fof(f882,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X20)) | sP0(X21,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X19),s(bool,X20)))) )),
  inference(superposition,[],[f446,f415])).
fof(f883,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X23)) | sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X22),s(bool,X23)),X24)) )),
  inference(superposition,[],[f447,f415])).
fof(f884,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,X26)) | p(s(bool,X27)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X25),s(bool,X26)),X27)) )),
  inference(superposition,[],[f462,f415])).
fof(f885,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X29)) | p(s(bool,X30)) | sP1(X30,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X28),s(bool,X29)))) )),
  inference(superposition,[],[f465,f415])).
fof(f886,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X32)) | ~p(s(bool,X33)) | sP9('const.bool.COND_3'(s(bool,'F_0'),s(bool,X31),s(bool,X32)),X34,X33)) )),
  inference(superposition,[],[f557,f415])).
fof(f887,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X36)) | ~p(s(bool,X37)) | sP9('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X36)),X37,X38)) )),
  inference(superposition,[],[f558,f415])).
fof(f888,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,X40)) | p(s(bool,X41)) | sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X39),s(bool,X40)),X42,X41)) )),
  inference(superposition,[],[f574,f415])).
fof(f889,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X44)) | ~p(s(bool,X45)) | sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X43),s(bool,X44)),X45,X46)) )),
  inference(superposition,[],[f575,f415])).
fof(f890,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X48)) | ~sP10('const.bool.COND_3'(s(bool,'F_0'),s(bool,X47),s(bool,X48)),X49,X50) | sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X47),s(bool,X48)),X49,X50)) )),
  inference(superposition,[],[f579,f415])).
fof(f891,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X52)) | ~sP8('const.bool.COND_3'(s(bool,'F_0'),s(bool,X51),s(bool,X52)),X53,X54) | sP9('const.bool.COND_3'(s(bool,'F_0'),s(bool,X51),s(bool,X52)),X53,X54)) )),
  inference(superposition,[],[f580,f415])).
fof(f921,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(superposition,[],[f416,f345])).
fof(f969,plain,(
  ( ! [X2,X3] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0')),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f859,f345])).
fof(f971,plain,(
  ( ! [X6,X7,X5] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X6)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X5),s(bool,X6)))) )),
  inference(superposition,[],[f859,f415])).
fof(f972,plain,(
  ( ! [X10,X8,X9] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f859,f416])).
fof(f976,plain,(
  ( ! [X0,X1] : (sP4('T_0',X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f860,f507])).
fof(f987,plain,(
  ( ! [X2,X3] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0')),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f860,f345])).
fof(f989,plain,(
  ( ! [X6,X7,X5] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X6)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X5),s(bool,X6)))) )),
  inference(superposition,[],[f860,f415])).
fof(f990,plain,(
  ( ! [X10,X8,X9] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f860,f416])).
fof(f1014,plain,(
  ( ! [X2,X3] : (~sP5('F_0',X2,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f861,f345])).
fof(f1017,plain,(
  ( ! [X10,X8,X9] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X8)))) )),
  inference(superposition,[],[f861,f416])).
fof(f1049,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) )),
  inference(unit_resulting_resolution,[],[f862,f507])).
fof(f1060,plain,(
  ( ! [X2,X3] : (sP5('T_0',X2,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f862,f345])).
fof(f1063,plain,(
  ( ! [X10,X8,X9] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X8)))) )),
  inference(superposition,[],[f862,f416])).
fof(f1088,plain,(
  ( ! [X2,X3] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3)),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f907,f345])).
fof(f1104,plain,(
  ( ! [X2,X3] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3)),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f908,f345])).
fof(f1123,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,X9)) | ~p(s(bool,X10)) | p(s(bool,X11)) | ~sP7(X11,X10,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f544,f415])).
fof(f1130,plain,(
  ( ! [X2,X3] : (~sP5('F_0',X2,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f909,f345])).
fof(f1146,plain,(
  ( ! [X2,X3] : (sP5('T_0',X2,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f910,f345])).
fof(f1167,plain,(
  ( ! [X2,X3] : (sP4('T_0',X2,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f976,f345])).
fof(f1169,plain,(
  ( ! [X6,X7,X5] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X5),s(bool,X6)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X6)))) )),
  inference(superposition,[],[f976,f415])).
fof(f1170,plain,(
  ( ! [X10,X8,X9] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X8)))) )),
  inference(superposition,[],[f976,f416])).
fof(f1181,plain,(
  ( ! [X2,X3] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0')),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1049,f345])).
fof(f1184,plain,(
  ( ! [X10,X8,X9] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f1049,f416])).
fof(f1190,plain,(
  ( ! [X2,X3] : (sP4('T_0',X2,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1100,f345])).
fof(f1202,plain,(
  ( ! [X2,X3] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3)),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1142,f345])).
fof(f1388,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,X9)) | ~p(s(bool,X10)) | p(s(bool,X11)) | ~sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X8),s(bool,X9)),X11,X10)) )),
  inference(superposition,[],[f576,f415])).
fof(f1392,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f882])).
fof(f1425,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f337,f883])).
fof(f1755,plain,(
  ( ! [X0] : (~sP3('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f859,f601,f607,f337,f509])).
fof(f1809,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f861,f604,f601,f595,f510])).
fof(f1810,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f909,f604,f601,f595,f510])).
fof(f1869,plain,(
  ( ! [X0] : (~sP2('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f859,f603,f600,f595,f511])).
fof(f1870,plain,(
  ( ! [X0] : (~sP2('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f907,f603,f600,f595,f511])).
fof(f1885,plain,(
  ( ! [X0] : (~sP3('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f861,f599,f606,f595,f511])).
fof(f2236,plain,(
  ( ! [X2,X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X2)),X2)) )),
  inference(unit_resulting_resolution,[],[f415,f2147,f525])).
fof(f2239,plain,(
  ( ! [X2,X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f415,f2147,f525])).
fof(f2427,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK14('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(forward_demodulation,[],[f2421,f415])).
fof(f2421,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK14('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,X3))))) )),
  inference(superposition,[],[f413,f415])).
fof(f2455,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(forward_demodulation,[],[f2449,f415])).
fof(f2449,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,X3))))) )),
  inference(superposition,[],[f414,f415])).
fof(f2481,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X7),s('type.num.num',X8))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X7),s('type.num.num',X8))) | s('type.num.num',X8) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(superposition,[],[f439,f415])).
fof(f2485,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X8),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X8),s('type.num.num',X7))) | s('type.num.num',X8) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(superposition,[],[f439,f415])).
fof(f3003,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,'T_0')),'F_0')) )),
  inference(forward_demodulation,[],[f2969,f2165])).
fof(f2969,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f861,f601,f2233,f511])).
fof(f3026,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(forward_demodulation,[],[f3010,f2165])).
fof(f3010,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f859,f601,f2234,f511])).
fof(f3083,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0))))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK16('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0)))))) )),
  inference(superposition,[],[f419,f415])).
fof(f3133,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK16('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0)))))) )),
  inference(forward_demodulation,[],[f3127,f415])).
fof(f3127,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK16('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0)))))) )),
  inference(superposition,[],[f420,f415])).
fof(f3161,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0))))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK17('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0)))))) )),
  inference(superposition,[],[f421,f415])).
fof(f3202,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK17('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0)))))) )),
  inference(forward_demodulation,[],[f3196,f415])).
fof(f3196,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK17('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X3,X0)))))) )),
  inference(superposition,[],[f422,f415])).
fof(f3243,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK20(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(forward_demodulation,[],[f3227,f415])).
fof(f3227,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,sK19(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK20(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(superposition,[],[f423,f415])).
fof(f3284,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK19('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0)))))) )),
  inference(forward_demodulation,[],[f3268,f415])).
fof(f3268,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK19('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,sK20('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0)))))) )),
  inference(superposition,[],[f424,f415])).
fof(f3331,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK21(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(forward_demodulation,[],[f3315,f415])).
fof(f3315,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,sK21(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK21(X4,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(superposition,[],[f425,f415])).
fof(f3379,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK21('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0)))))) )),
  inference(forward_demodulation,[],[f3363,f415])).
fof(f3363,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X4),s(X0,sK21('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0))))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,sK21('const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X4,X0)))))) )),
  inference(superposition,[],[f426,f415])).
fof(f3618,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f3617,f415])).
fof(f3617,plain,(
  ( ! [X4,X2,X0,X1] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X4),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f3589,f416])).
fof(f3589,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))),s('type.num.num',X4),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f595,f431,f416,f429])).
fof(f3741,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(X2,X3) != s(X2,X4) | s(X2,'const.bool.COND_3'(s(bool,'F_0'),s(X2,X6),s(X2,X4))) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X5),s(X2,X3))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f3600,f595])).
fof(f3600,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(X2,X3) != s(X2,X4) | p(s(bool,'F_0')) | s(X2,'const.bool.COND_3'(s(bool,'F_0'),s(X2,X6),s(X2,X4))) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X5),s(X2,X3))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f429,f345])).
fof(f432,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.MAX_DEF')).
fof(f433,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X6),s('type.num.num',X7)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.MIN_DEF')).
fof(f470,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f288])).
fof(f288,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.NOT_LESS')).
fof(f471,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f288])).
fof(f480,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : ~(p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6,X7] : ~(p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.LESS_ANTISYM')).
fof(f485,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X8))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X8)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.LESS_TRANS')).
fof(f1455,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(subsumption_resolution,[],[f1450,f595])).
fof(f1450,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f470,f345])).
fof(f2619,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num',X14) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X13),s('type.num.num',X12)))) )),
  inference(superposition,[],[f439,f432])).
fof(f2620,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X15),s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X15),s('type.num.num',X16))))) | s('type.num.num',X17) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num',X16),s('type.num.num',X15)))) )),
  inference(superposition,[],[f439,f432])).
fof(f2706,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23))))) | s('type.num.num',X24) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X22),s('type.num.num',X23)))) )),
  inference(superposition,[],[f439,f433])).
fof(f2730,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X20),s('type.num.num',X21))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))) | s('type.num.num',X21) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(forward_demodulation,[],[f2705,f484])).
fof(f2705,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))) | s('type.num.num',X21) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f439,f433])).
fof(f2774,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X3))))) )),
  inference(superposition,[],[f485,f431])).
fof(f2780,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(superposition,[],[f485,f431])).
fof(f1499,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f480,f431])).
fof(f1471,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f471,f431])).
fof(f1442,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f470,f431])).
fof(f1475,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))) )),
  inference(superposition,[],[f471,f431])).
fof(f1446,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))) )),
  inference(superposition,[],[f470,f431])).
fof(f487,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | ~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))) )),
  inference(cnf_transformation,[],[f295])).
fof(f295,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2))))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X2))) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))))),
  inference(flattening,[],[f294])).
fof(f294,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2))))) & (((p(s(bool,X0)) & ~p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X2)))) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))))),
  inference(nnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X18,X12,X13] : (p(s(bool,'const.bool.COND_3'(s(bool,X18),s(bool,X12),s(bool,X13)))) <=> ((~p(s(bool,X18)) | p(s(bool,X12))) & (p(s(bool,X18)) | p(s(bool,X13)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.COND_EXPAND')).
fof(f488,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f295])).
fof(f490,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))) )),
  inference(cnf_transformation,[],[f295])).
fof(f491,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f295])).
fof(f492,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))) )),
  inference(cnf_transformation,[],[f295])).
fof(f1979,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f1952,f595])).
fof(f1952,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | p(s(bool,'F_0')) | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f488,f345])).
fof(f1990,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0)))) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f1966,f595])).
fof(f1966,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0)))) | p(s(bool,X1)) | p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f488,f345])).
fof(f434,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1))),
  inference(flattening,[],[f186])).
fof(f186,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) => s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X7,X6] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))))) => s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.LESS_EQUAL_ANTISYM')).
fof(f486,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X6,X7,X8] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X8))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X8)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.LESS_EQ_TRANS')).
fof(f2823,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X3))))) )),
  inference(superposition,[],[f486,f431])).
fof(f2829,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(superposition,[],[f486,f431])).
fof(f2555,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f434,f431])).
fof(f2551,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f434,f431])).
fof(f413,plain,(
  ( ! [X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK14(X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) )),
  inference(cnf_transformation,[],[f265])).
fof(f265,plain,(
  ! [X0,X1] : ((! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK14(X1,X0)))))) & (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK15(X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15])],[f264])).
fof(f264,plain,(
  ! [X0,X1] : ((! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) & (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(rectify,[],[f263])).
fof(f263,plain,(
  ! [X0,X1] : ((! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(nnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1] : (? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(ennf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : (~! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1] : (~! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X10] : ! [X21] : (~! [X11] : p(s(bool,happ(s(fun(X10,bool),X21),s(X10,X11)))) <=> ? [X11] : ~p(s(bool,happ(s(fun(X10,bool),X21),s(X10,X11)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.NOT_FORALL_THM')).
fof(f414,plain,(
  ( ! [X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK15(X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f265])).
fof(f419,plain,(
  ( ! [X2,X0,X7,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16(X2,X1,X0)))))) | (! [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) & ! [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18(X2,X1,X0))))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17,sK18])],[f269])).
fof(f269,plain,(
  ! [X0,X1,X2] : ((? [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | (! [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) & ! [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f268])).
fof(f268,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f267])).
fof(f267,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X10] : ! [X21,X23] : (! [X11] : (p(s(bool,happ(s(fun(X10,bool),X21),s(X10,X11)))) & p(s(bool,happ(s(fun(X10,bool),X23),s(X10,X11))))) <=> (! [X11] : p(s(bool,happ(s(fun(X10,bool),X21),s(X10,X11)))) & ! [X11] : p(s(bool,happ(s(fun(X10,bool),X23),s(X10,X11))))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.FORALL_AND_THM')).
fof(f420,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f270])).
fof(f421,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f270])).
fof(f422,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f270])).
fof(f423,plain,(
  ( ! [X2,X0,X8,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f274])).
fof(f274,plain,(
  ! [X0,X1,X2] : ((! [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X2,X1,X0)))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21])],[f273])).
fof(f273,plain,(
  ! [X0,X1,X2] : ((! [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | ? [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) | ? [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f272])).
fof(f272,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f271])).
fof(f271,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X10] : ! [X21,X23] : (? [X11] : (p(s(bool,happ(s(fun(X10,bool),X21),s(X10,X11)))) | p(s(bool,happ(s(fun(X10,bool),X23),s(X10,X11))))) <=> (? [X11] : p(s(bool,happ(s(fun(X10,bool),X21),s(X10,X11)))) | ? [X11] : p(s(bool,happ(s(fun(X10,bool),X23),s(X10,X11))))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.EXISTS_OR_THM')).
fof(f424,plain,(
  ( ! [X2,X0,X8,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f274])).
fof(f425,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f274])).
fof(f426,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f274])).
fof(f2428,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | ~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK14('const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4)))))) )),
  inference(forward_demodulation,[],[f2422,f416])).
fof(f2422,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK14('const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))))) | p(s(bool,happ(s(fun(X4,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6))),s(X4,X7))))) )),
  inference(superposition,[],[f413,f416])).
fof(f2456,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | ~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK15('const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4)))))) )),
  inference(forward_demodulation,[],[f2450,f416])).
fof(f2450,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK15('const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))))) | p(s(bool,happ(s(fun(X4,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6))),s(X4,X7))))) )),
  inference(superposition,[],[f414,f416])).
fof(f3084,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK16('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5))))) | p(s(bool,happ(s(fun(X5,bool),X8),s(X5,X9)))) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK16('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5)))))) )),
  inference(superposition,[],[f419,f416])).
fof(f3134,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X9)))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK16('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5))))) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK16('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5)))))) )),
  inference(forward_demodulation,[],[f3128,f416])).
fof(f3128,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK16('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5))))) | p(s(bool,happ(s(fun(X5,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7))),s(X5,X9)))) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK16('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5)))))) )),
  inference(superposition,[],[f420,f416])).
fof(f3162,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK18('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5))))) | p(s(bool,happ(s(fun(X5,bool),X8),s(X5,X9)))) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK17('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5)))))) )),
  inference(superposition,[],[f421,f416])).
fof(f3203,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X9)))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK18('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5))))) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK17('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5)))))) )),
  inference(forward_demodulation,[],[f3197,f416])).
fof(f3197,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK18('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5))))) | p(s(bool,happ(s(fun(X5,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7))),s(X5,X9)))) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK17('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X8,X5)))))) )),
  inference(superposition,[],[f422,f416])).
fof(f3244,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK19(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5))))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK20(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5)))))) )),
  inference(forward_demodulation,[],[f3228,f416])).
fof(f3228,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7))),s(X5,sK19(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5))))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK20(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5)))))) )),
  inference(superposition,[],[f423,f416])).
fof(f3285,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK20('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5))))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK19('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5)))))) )),
  inference(forward_demodulation,[],[f3269,f416])).
fof(f3269,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK19('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5))))) | p(s(bool,happ(s(fun(X5,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7))),s(X5,sK20('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5)))))) )),
  inference(superposition,[],[f424,f416])).
fof(f3332,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK21(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5))))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK21(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5)))))) )),
  inference(forward_demodulation,[],[f3316,f416])).
fof(f3316,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7))),s(X5,sK21(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5))))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK21(X9,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X5)))))) )),
  inference(superposition,[],[f425,f416])).
fof(f3380,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK21('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5))))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK21('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5)))))) )),
  inference(forward_demodulation,[],[f3364,f416])).
fof(f3364,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X8)))) | p(s(bool,happ(s(fun(X5,bool),X9),s(X5,sK21('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5))))) | p(s(bool,happ(s(fun(X5,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7))),s(X5,sK21('const.bool.COND_3'(s(bool,'T_0'),s(fun(X5,bool),X6),s(fun(X5,bool),X7)),X9,X5)))))) )),
  inference(superposition,[],[f426,f416])).
fof(f3607,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,X1) != s(X0,X2) | p(s(bool,X3)) | s(X0,'const.bool.COND_3'(s(bool,X3),s(X0,X4),s(X0,X1))) = s(X0,'const.bool.COND_3'(s(bool,X3),s(X0,X5),s(X0,X2)))) )),
  inference(equality_resolution,[],[f429])).
fof(f3455,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f3454,f416])).
fof(f3454,plain,(
  ( ! [X4,X2,X0,X1] : (s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f3434,f416])).
fof(f3434,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X3))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X4)))) )),
  inference(unit_resulting_resolution,[],[f337,f431,f416,f428])).
fof(f3025,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X1)),'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(forward_demodulation,[],[f3011,f2165])).
fof(f3011,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))),s(bool,X1)),'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f907,f601,f2234,f511])).
fof(f3014,plain,(
  ( ! [X0] : (sP5('F_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f595,f604,f601,f2234,f510])).
fof(f3002,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X1)),'F_0')) )),
  inference(forward_demodulation,[],[f2970,f2165])).
fof(f2970,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))),s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f909,f601,f2233,f511])).
fof(f2971,plain,(
  ( ! [X0] : (sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f603,f601,f2233,f511])).
fof(f2941,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.num.num',X44) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X43),s('type.num.num',X44))))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))))),s('type.num.num',X44)))) )),
  inference(forward_demodulation,[],[f2940,f484])).
fof(f2940,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X43),s('type.num.num',X44))))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))))),s('type.num.num',X44))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num',X42))),s('type.num.num',X43)))) )),
  inference(forward_demodulation,[],[f2939,f484])).
fof(f2939,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))),s('type.num.num',X44))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))))),s('type.num.num',X44))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num',X42))),s('type.num.num',X43)))) )),
  inference(forward_demodulation,[],[f2913,f484])).
fof(f2913,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))))),s('type.num.num',X44))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X42),s('type.num.num',X43))))),s('type.num.num',X44))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X41),s('type.num.num',X42))),s('type.num.num',X43)))) )),
  inference(superposition,[],[f439,f484])).
fof(f2901,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X3),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f484,f431])).
fof(f2891,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f484,f431])).
fof(f2860,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f604,f600,f2232,f510])).
fof(f2847,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f607,f599,f2231,f509])).
fof(f2848,plain,(
  ( ! [X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f607,f2220,f2231,f509])).
fof(f2814,plain,(
  ( ! [X0] : (~sP5('F_0','T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2226,f506])).
fof(f2802,plain,(
  ( ! [X0] : (~sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f2221,f506])).
fof(f2762,plain,(
  ( ! [X0] : (sP5('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f602,f607,f2220,f509])).
fof(f2742,plain,(
  ( ! [X0] : (~sP5('T_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2211,f507])).
fof(f2541,plain,(
  ( ! [X0,X1] : (~sP3('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1885,f345])).
fof(f2511,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f440,f431])).
fof(f2522,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f2507,f484])).
fof(f2507,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f440,f431])).
fof(f2518,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2503,f484])).
fof(f2503,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f431,f440])).
fof(f2516,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f2505,f416])).
fof(f2505,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f416,f440])).
fof(f2486,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X11),s('type.num.num',X9))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X11),s('type.num.num',X9))) | s('type.num.num',X11) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(superposition,[],[f439,f416])).
fof(f2483,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f439,f431])).
fof(f2482,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X9),s('type.num.num',X11))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X9),s('type.num.num',X11))) | s('type.num.num',X11) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(superposition,[],[f439,f416])).
fof(f2488,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f2479,f484])).
fof(f2479,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f439,f431])).
fof(f2165,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f438])).
fof(f2166,plain,(
  ( ! [X0,X1] : (s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))) = s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f438])).
fof(f2167,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f446])).
fof(f2168,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f2147,f447])).
fof(f2169,plain,(
  ( ! [X0] : (~sP1('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f461])).
fof(f2171,plain,(
  ( ! [X0] : (~sP1('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f461])).
fof(f2172,plain,(
  ( ! [X0,X1] : (~sP1('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f461])).
fof(f2173,plain,(
  ( ! [X0] : (sP1('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f462])).
fof(f2174,plain,(
  ( ! [X0] : (sP1('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f465])).
fof(f2175,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))),s(bool,'F_0'),s(bool,X1))))) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f487])).
fof(f2177,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.COND_3'(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))),s(bool,'T_0'),s(bool,X1))))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f490])).
fof(f2180,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.bool.COND_3'(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0'))),s(bool,X2))))) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f490])).
fof(f2182,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f492])).
fof(f2184,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0'))),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f492])).
fof(f2185,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0'))),s(bool,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f492])).
fof(f2188,plain,(
  ( ! [X0] : (~sP5('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f508])).
fof(f2189,plain,(
  ( ! [X0,X1] : (~sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f508])).
fof(f2201,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f602,f599,f606,f2147,f509])).
fof(f2206,plain,(
  ( ! [X0] : (~sP4('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f512])).
fof(f2211,plain,(
  ( ! [X0] : (~sP4('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f512])).
fof(f2212,plain,(
  ( ! [X0,X1] : (~sP4('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f512])).
fof(f2220,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f513])).
fof(f2221,plain,(
  ( ! [X0] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f516])).
fof(f2226,plain,(
  ( ! [X0] : (~sP3('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f516])).
fof(f2227,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f516])).
fof(f2231,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f517])).
fof(f2232,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f521])).
fof(f2233,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f522])).
fof(f2234,plain,(
  ( ! [X2,X0,X1] : (sP2('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f523])).
fof(f2237,plain,(
  ( ! [X2,X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),X1)) )),
  inference(unit_resulting_resolution,[],[f416,f2147,f525])).
fof(f2240,plain,(
  ( ! [X2,X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)))) )),
  inference(unit_resulting_resolution,[],[f416,f2147,f525])).
fof(f2241,plain,(
  ( ! [X0] : (~sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f626,f2147,f526])).
fof(f2243,plain,(
  ( ! [X0] : (~sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f626,f2147,f526])).
fof(f2245,plain,(
  ( ! [X0,X1] : (~sP7('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f529])).
fof(f2246,plain,(
  ( ! [X0,X1] : (~sP7('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f530])).
fof(f2253,plain,(
  ( ! [X0] : (~sP6('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f535])).
fof(f2258,plain,(
  ( ! [X0] : (~sP6('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f535])).
fof(f2259,plain,(
  ( ! [X0,X1] : (~sP6('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f535])).
fof(f2263,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f536])).
fof(f2264,plain,(
  ( ! [X0] : (sP7('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f337,f2147,f541])).
fof(f2269,plain,(
  ( ! [X0] : (sP7('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f337,f2147,f541])).
fof(f2270,plain,(
  ( ! [X0,X1] : (sP7('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f2147,f337,f2147,f541])).
fof(f2273,plain,(
  ( ! [X0] : (sP7('T_0','T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f337,f2147,f541])).
fof(f2274,plain,(
  ( ! [X0,X1] : (sP7('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f337,f2147,f541])).
fof(f2275,plain,(
  ( ! [X0,X1] : (sP7('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f2147,f541])).
fof(f2276,plain,(
  ( ! [X2,X0,X1] : (sP7('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f2147,f541])).
fof(f2278,plain,(
  ( ! [X0] : (~sP7('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f544])).
fof(f2282,plain,(
  ( ! [X0] : (~sP7('F_0','T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f544])).
fof(f2283,plain,(
  ( ! [X0,X1] : (~sP7('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f544])).
fof(f2286,plain,(
  ( ! [X0,X1] : (~sP9('F_0',X0,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f545])).
fof(f2288,plain,(
  ( ! [X0,X1] : (~sP9('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f546])).
fof(f2292,plain,(
  ( ! [X0] : (~sP8('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f595,f2147,f552])).
fof(f2295,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f553])).
fof(f2296,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f554])).
fof(f2299,plain,(
  ( ! [X0,X1] : (sP9('T_0',X0,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f557])).
fof(f2300,plain,(
  ( ! [X2,X0,X1] : (sP9('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f557])).
fof(f2302,plain,(
  ( ! [X0,X1] : (sP9('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f558])).
fof(f2306,plain,(
  ( ! [X2,X0,X1] : (sP9('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f558])).
fof(f2307,plain,(
  ( ! [X0] : (~sP9('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f595,f2147,f559])).
fof(f2308,plain,(
  ( ! [X0,X1] : (~sP11('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f595,f2147,f563])).
fof(f2323,plain,(
  ( ! [X0] : (~sP10('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f595,f337,f2147,f569])).
fof(f2328,plain,(
  ( ! [X0] : (~sP10('T_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f569])).
fof(f2329,plain,(
  ( ! [X0,X1] : (~sP10('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f569])).
fof(f2333,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f571])).
fof(f2334,plain,(
  ( ! [X0] : (sP11('F_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f595,f595,f2147,f573])).
fof(f2337,plain,(
  ( ! [X0,X1] : (sP11('T_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f337,f2147,f575])).
fof(f2341,plain,(
  ( ! [X2,X0,X1] : (sP11('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f2147,f575])).
fof(f2342,plain,(
  ( ! [X0] : (~sP11('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f576])).
fof(f2344,plain,(
  ( ! [X0] : (~sP11('T_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f337,f595,f2147,f576])).
fof(f2345,plain,(
  ( ! [X0,X1] : (~sP11('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f2147,f595,f2147,f576])).
fof(f2347,plain,(
  ( ! [X0,X1] : (sP11('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f614,f2147,f579])).
fof(f2349,plain,(
  ( ! [X0,X1] : (sP11('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f615,f2147,f579])).
fof(f2350,plain,(
  ( ! [X0,X1] : (sP9('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f611,f2147,f580])).
fof(f2351,plain,(
  ( ! [X0,X1] : (sP9('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f612,f2147,f580])).
fof(f2352,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,'const.bool.COND_3'(s(bool,X2),s(bool,'T_0'),s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f2147,f882])).
fof(f2353,plain,(
  ( ! [X2,X0,X1] : (sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')))),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f883])).
fof(f2354,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0'))),s(bool,X2)))) )),
  inference(unit_resulting_resolution,[],[f2147,f930])).
fof(f2355,plain,(
  ( ! [X2,X0,X1] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))),s(bool,X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f2147,f931])).
fof(f2147,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f337,f337,f492])).
fof(f2137,plain,(
  ( ! [X0,X1] : (~sP2('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1870,f345])).
fof(f2130,plain,(
  ( ! [X0,X1] : (~sP2('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1869,f345])).
fof(f2123,plain,(
  ( ! [X0] : (~sP2('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1869,f345])).
fof(f2095,plain,(
  ( ! [X0,X1] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1810,f345])).
fof(f2088,plain,(
  ( ! [X0,X1] : (~sP2('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1809,f345])).
fof(f2081,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1809,f345])).
fof(f1929,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),'T_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1755,f345])).
fof(f1886,plain,(
  ( ! [X0] : (~sP3('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f909,f599,f606,f595,f511])).
fof(f1819,plain,(
  sP5('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f604,f600,f605,f595,f510])).
fof(f1756,plain,(
  ( ! [X0] : (~sP3('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f907,f601,f607,f337,f509])).
fof(f1769,plain,(
  sP5('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f602,f599,f606,f337,f509])).
fof(f1484,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f337,f931])).
fof(f1456,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f337,f930])).
fof(f1434,plain,(
  ( ! [X2,X0,X1] : (sP0('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1425,f345])).
fof(f1401,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1392,f345])).
fof(f1389,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,X12)) | ~p(s(bool,X14)) | p(s(bool,X15)) | ~sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X12),s(bool,X13)),X15,X14)) )),
  inference(superposition,[],[f576,f416])).
fof(f1354,plain,(
  ~sP11('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1346,f564])).
fof(f1346,plain,(
  ~sP10('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f337,f337,f595,f569])).
fof(f1337,plain,(
  sP11('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f616,f337,f595,f568])).
fof(f1229,plain,(
  ~sP9('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1222,f547])).
fof(f1222,plain,(
  ~sP8('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f337,f595,f595,f552])).
fof(f1214,plain,(
  sP9('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f613,f595,f595,f551])).
fof(f1201,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1142,f345])).
fof(f1193,plain,(
  ( ! [X10,X8,X9] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X10)))) )),
  inference(superposition,[],[f1100,f416])).
fof(f1180,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1049,f345])).
fof(f1173,plain,(
  ( ! [X2,X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1049,f345])).
fof(f1159,plain,(
  ( ! [X2,X0,X1] : (sP4('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f976,f345])).
fof(f1145,plain,(
  ( ! [X0,X1] : (sP5('T_0','F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f910,f345])).
fof(f1142,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) )),
  inference(unit_resulting_resolution,[],[f910,f507])).
fof(f1129,plain,(
  ( ! [X0,X1] : (~sP5('F_0','F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f909,f345])).
fof(f1124,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,X12)) | ~p(s(bool,X14)) | p(s(bool,X15)) | ~sP7(X15,X14,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X12),s(bool,X13)))) )),
  inference(superposition,[],[f544,f416])).
fof(f1107,plain,(
  ( ! [X10,X8,X9] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X10)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f908,f416])).
fof(f1103,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f908,f345])).
fof(f1100,plain,(
  ( ! [X0,X1] : (sP4('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f908,f507])).
fof(f1091,plain,(
  ( ! [X10,X8,X9] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X10)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f907,f416])).
fof(f1087,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f907,f345])).
fof(f1076,plain,(
  ~sP7('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1068,f528])).
fof(f1068,plain,(
  ~sP6('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f337,f595,f337,f535])).
fof(f1059,plain,(
  ( ! [X0,X1] : (sP5('T_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f862,f345])).
fof(f1052,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f862,f345])).
fof(f1042,plain,(
  sP7('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f608,f337,f337,f531])).
fof(f1038,plain,(
  ~sP5('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1033,f505])).
fof(f1033,plain,(
  ~sP2('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f595,f595,f595,f520])).
fof(f1029,plain,(
  ~sP5('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1021,f506])).
fof(f1021,plain,(
  ~sP3('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f337,f595,f337,f516])).
fof(f1013,plain,(
  ( ! [X0,X1] : (~sP5('F_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f861,f345])).
fof(f1006,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f861,f345])).
fof(f995,plain,(
  ~sP4('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f337,f595,f337,f512])).
fof(f986,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f860,f345])).
fof(f979,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f860,f345])).
fof(f968,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f859,f345])).
fof(f961,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f859,f345])).
fof(f939,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X51)) | ~sP8('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54) | sP9('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54)) )),
  inference(superposition,[],[f580,f416])).
fof(f938,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X47)) | ~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50) | sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50)) )),
  inference(superposition,[],[f579,f416])).
fof(f937,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X43)) | ~p(s(bool,X45)) | sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X43),s(bool,X44)),X45,X46)) )),
  inference(superposition,[],[f575,f416])).
fof(f936,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,X39)) | p(s(bool,X41)) | sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X39),s(bool,X40)),X42,X41)) )),
  inference(superposition,[],[f574,f416])).
fof(f935,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X35)) | ~p(s(bool,X37)) | sP9('const.bool.COND_3'(s(bool,'T_0'),s(bool,X35),s(bool,X36)),X37,X38)) )),
  inference(superposition,[],[f558,f416])).
fof(f934,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X31)) | ~p(s(bool,X33)) | sP9('const.bool.COND_3'(s(bool,'T_0'),s(bool,X31),s(bool,X32)),X34,X33)) )),
  inference(superposition,[],[f557,f416])).
fof(f933,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X28)) | p(s(bool,X30)) | sP1(X30,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X28),s(bool,X29)))) )),
  inference(superposition,[],[f465,f416])).
fof(f932,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,X25)) | p(s(bool,X27)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X25),s(bool,X26)),X27)) )),
  inference(superposition,[],[f462,f416])).
fof(f931,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X22)) | sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X22),s(bool,X23)),X24)) )),
  inference(superposition,[],[f447,f416])).
fof(f930,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X19)) | sP0(X21,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X19),s(bool,X20)))) )),
  inference(superposition,[],[f446,f416])).
fof(f907,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) )),
  inference(unit_resulting_resolution,[],[f595,f416,f527])).
fof(f908,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) )),
  inference(unit_resulting_resolution,[],[f337,f416,f525])).
fof(f909,plain,(
  ( ! [X0,X1] : (~sP5('F_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f595,f416,f527])).
fof(f910,plain,(
  ( ! [X0,X1] : (sP5('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f337,f416,f525])).
fof(f863,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.bool.COND_3'(s(bool,X0),s(X1,X3),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f415,f345])).
fof(f830,plain,(
  ~sP5('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f337,f626,f526])).
fof(f834,plain,(
  ~sP5('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f337,f626,f526])).
fof(f811,plain,(
  sP5('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f595,f626,f524])).
fof(f813,plain,(
  sP5('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f595,f626,f524])).
fof(f775,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f772,f595])).
fof(f772,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f435,f345])).
fof(f723,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f345,f345])).
fof(f691,plain,(
  ( ! [X0] : (sP11('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f337,f337,f575])).
fof(f685,plain,(
  ( ! [X0] : (sP11('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f337,f574])).
fof(f682,plain,(
  ( ! [X0] : (~sP11('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f337,f595,f563])).
fof(f681,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f595,f562])).
fof(f677,plain,(
  ( ! [X0] : (sP9('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f337,f337,f558])).
fof(f671,plain,(
  ( ! [X0] : (sP9('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f337,f557])).
fof(f668,plain,(
  ( ! [X0] : (~sP9('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f337,f595,f546])).
fof(f667,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f545])).
fof(f663,plain,(
  ( ! [X0] : (sP7('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f595,f595,f540])).
fof(f657,plain,(
  ( ! [X0] : (sP7('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f595,f539])).
fof(f654,plain,(
  ( ! [X0] : (~sP7('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f337,f595,f530])).
fof(f651,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f337,f595,f529])).
fof(f650,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f595,f595,f596])).
fof(f645,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f595,f337,f465])).
fof(f639,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f595,f337,f462])).
fof(f637,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f337,f337,f461])).
fof(f636,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f595,f595,f460])).
fof(f626,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f595,f356])).
fof(f616,plain,(
  ( ! [X0,X1] : (sP10('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f595,f572])).
fof(f615,plain,(
  ( ! [X0,X1] : (sP10(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f337,f571])).
fof(f614,plain,(
  ( ! [X0,X1] : (sP10(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f595,f570])).
fof(f613,plain,(
  ( ! [X0,X1] : (sP8('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f595,f555])).
fof(f612,plain,(
  ( ! [X0,X1] : (sP8(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f337,f554])).
fof(f611,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f553])).
fof(f610,plain,(
  ( ! [X0,X1] : (sP6('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f595,f538])).
fof(f609,plain,(
  ( ! [X0,X1] : (sP6(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f595,f537])).
fof(f608,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f536])).
fof(f607,plain,(
  ( ! [X0,X1] : (sP2('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f337,f523])).
fof(f606,plain,(
  ( ! [X0,X1] : (sP2(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f337,f522])).
fof(f605,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f521])).
fof(f604,plain,(
  ( ! [X0,X1] : (sP3('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f595,f519])).
fof(f603,plain,(
  ( ! [X0,X1] : (sP3(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f595,f518])).
fof(f602,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f517])).
fof(f601,plain,(
  ( ! [X0,X1] : (sP4('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f595,f515])).
fof(f600,plain,(
  ( ! [X0,X1] : (sP4(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f595,f514])).
fof(f599,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f513])).
fof(f598,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f337,f447])).
fof(f597,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f337,f446])).
fof(f573,plain,(
  ( ! [X2,X0,X1] : (sP11(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f334])).
fof(f334,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP11(X2,X0,X1)) & (~sP11(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f333])).
fof(f333,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP11(X2,X0,X1)) & (~sP11(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP11(X2,X0,X1))),
  inference(definition_folding,[],[f204,f221,f220])).
fof(f220,plain,(
  ! [X2,X0,X1] : (sP10(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f221,plain,(
  ! [X2,X0,X1] : (sP11(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f204,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X14,X15,X8] : ((p(s(bool,X8)) <=> (p(s(bool,X15)) => p(s(bool,X14)))) <=> ((p(s(bool,X8)) | p(s(bool,X15))) & (p(s(bool,X8)) | ~p(s(bool,X14))) & (~p(s(bool,X15)) | p(s(bool,X14)) | ~p(s(bool,X8)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.sat.sat_27_prove_ltb')).
fof(f574,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f334])).
fof(f575,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f334])).
fof(f576,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f334])).
fof(f569,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f332])).
fof(f332,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP10(X0,X1,X2)))),
  inference(rectify,[],[f331])).
fof(f331,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP10(X2,X0,X1)))),
  inference(flattening,[],[f330])).
fof(f330,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP10(X2,X0,X1)))),
  inference(nnf_transformation,[],[f220])).
fof(f570,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f332])).
fof(f571,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f332])).
fof(f572,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f332])).
fof(f562,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f329])).
fof(f329,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP10(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP10(X0,X1,X2) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f328])).
fof(f328,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP10(X2,X0,X1) | sP11(X2,X0,X1)))),
  inference(flattening,[],[f327])).
fof(f327,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP10(X2,X0,X1)) | sP11(X2,X0,X1)))),
  inference(nnf_transformation,[],[f221])).
fof(f563,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f329])).
fof(f564,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | sP10(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f329])).
fof(f579,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP10(X0,X1,X2) | sP11(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f565])).
fof(f565,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f329])).
fof(f566,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f329])).
fof(f567,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f329])).
fof(f568,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f329])).
fof(f556,plain,(
  ( ! [X2,X0,X1] : (sP9(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f326])).
fof(f326,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f325])).
fof(f325,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP9(X2,X0,X1))),
  inference(definition_folding,[],[f166,f218,f217])).
fof(f217,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f218,plain,(
  ! [X2,X0,X1] : (sP9(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f166,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f165])).
fof(f165,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X14,X15,X8] : ((p(s(bool,X8)) <=> (p(s(bool,X15)) | p(s(bool,X14)))) <=> ((p(s(bool,X8)) | ~p(s(bool,X15))) & (p(s(bool,X8)) | ~p(s(bool,X14))) & (p(s(bool,X15)) | p(s(bool,X14)) | ~p(s(bool,X8)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.sat.sat_25_prove_ltb')).
fof(f557,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f326])).
fof(f558,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f326])).
fof(f559,plain,(
  ( ! [X2,X0,X1] : (~sP9(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f326])).
fof(f552,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f324])).
fof(f324,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f323])).
fof(f323,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f322])).
fof(f322,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f217])).
fof(f553,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f324])).
fof(f554,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f324])).
fof(f555,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f324])).
fof(f545,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP8(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f320])).
fof(f320,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1) | sP9(X2,X0,X1)))),
  inference(flattening,[],[f319])).
fof(f319,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1)) | sP9(X2,X0,X1)))),
  inference(nnf_transformation,[],[f218])).
fof(f546,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f321])).
fof(f547,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f321])).
fof(f580,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f548])).
fof(f548,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f321])).
fof(f549,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f321])).
fof(f550,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f321])).
fof(f551,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f321])).
fof(f539,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f318])).
fof(f318,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f317])).
fof(f317,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP7(X2,X0,X1))),
  inference(definition_folding,[],[f164,f215,f214])).
fof(f214,plain,(
  ! [X0,X1,X2] : (sP6(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f215,plain,(
  ! [X2,X0,X1] : (sP7(X2,X0,X1) <=> (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f164,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X14,X15,X8] : ((p(s(bool,X8)) <=> (p(s(bool,X15)) & p(s(bool,X14)))) <=> ((p(s(bool,X8)) | ~p(s(bool,X15)) | ~p(s(bool,X14))) & (p(s(bool,X15)) | ~p(s(bool,X8))) & (p(s(bool,X14)) | ~p(s(bool,X8)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.sat.sat_23_prove_ltb')).
fof(f540,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f318])).
fof(f541,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f318])).
fof(f544,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f318])).
fof(f535,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f316])).
fof(f316,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(flattening,[],[f315])).
fof(f315,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(nnf_transformation,[],[f214])).
fof(f536,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f316])).
fof(f537,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f316])).
fof(f538,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f316])).
fof(f528,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f314])).
fof(f314,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (sP6(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP6(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f313])).
fof(f313,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP6(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP7(X2,X0,X1)))),
  inference(flattening,[],[f312])).
fof(f312,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP6(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP7(X2,X0,X1)))),
  inference(nnf_transformation,[],[f215])).
fof(f529,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f314])).
fof(f530,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f314])).
fof(f531,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f314])).
fof(f581,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0)) | ~sP6(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f534])).
fof(f534,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f314])).
fof(f524,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP5(X2,X1,X0)) & (~sP5(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP5(X2,X1,X0))),
  inference(definition_folding,[],[f162,f212,f211,f210,f209])).
fof(f209,plain,(
  ! [X0,X1,X2] : (sP2(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f210,plain,(
  ! [X1,X0,X2] : (sP3(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f211,plain,(
  ! [X2,X0,X1] : (sP4(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f212,plain,(
  ! [X2,X1,X0] : (sP5(X2,X1,X0) <=> (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f162,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X14,X15,X8] : ((p(s(bool,X8)) <=> s(bool,X14) = s(bool,X15)) <=> ((p(s(bool,X8)) | p(s(bool,X15)) | p(s(bool,X14))) & (p(s(bool,X8)) | ~p(s(bool,X14)) | ~p(s(bool,X15))) & (p(s(bool,X15)) | ~p(s(bool,X14)) | ~p(s(bool,X8))) & (p(s(bool,X14)) | ~p(s(bool,X15)) | ~p(s(bool,X8)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.sat.sat_2|49|_prove_ltb')).
fof(f525,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f311])).
fof(f526,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f311])).
fof(f527,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f311])).
fof(f520,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f310])).
fof(f310,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(flattening,[],[f309])).
fof(f309,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(nnf_transformation,[],[f209])).
fof(f521,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f310])).
fof(f522,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f310])).
fof(f523,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f310])).
fof(f516,plain,(
  ( ! [X2,X0,X1] : (~sP3(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f308])).
fof(f308,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f307])).
fof(f307,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(flattening,[],[f306])).
fof(f306,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(nnf_transformation,[],[f210])).
fof(f517,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f308])).
fof(f518,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f308])).
fof(f519,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f308])).
fof(f512,plain,(
  ( ! [X2,X0,X1] : (~sP4(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f305])).
fof(f305,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f304])).
fof(f304,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(flattening,[],[f303])).
fof(f303,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(nnf_transformation,[],[f211])).
fof(f513,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f305])).
fof(f514,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f305])).
fof(f515,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f305])).
fof(f505,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f302])).
fof(f302,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (sP2(X2,X1,X0) & sP3(X1,X2,X0) & sP4(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP2(X2,X1,X0) | ~sP3(X1,X2,X0) | ~sP4(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f301])).
fof(f301,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP5(X2,X1,X0)))),
  inference(flattening,[],[f300])).
fof(f300,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP5(X2,X1,X0)))),
  inference(nnf_transformation,[],[f212])).
fof(f506,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP3(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f302])).
fof(f507,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP4(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f302])).
fof(f508,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f302])).
fof(f509,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | ~p(s(bool,X2)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f302])).
fof(f510,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | p(s(bool,X1)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f302])).
fof(f511,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | p(s(bool,X0)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f302])).
fof(f484,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7,X8] : s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X8)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.MIN_ASSOC')).
fof(f483,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'const.bool.COND_3'(s(bool,X2),s(fun(X1,X0),X3),s(fun(X1,X0),X4))),s(X1,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,happ(s(fun(X1,X0),X3),s(X1,X5))),s(X0,happ(s(fun(X1,X0),X4),s(X1,X5)))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'const.bool.COND_3'(s(bool,X2),s(fun(X1,X0),X3),s(fun(X1,X0),X4))),s(X1,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,happ(s(fun(X1,X0),X3),s(X1,X5))),s(X0,happ(s(fun(X1,X0),X4),s(X1,X5)))))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'const.bool.COND_3'(s(bool,X2),s(fun(X1,X0),X3),s(fun(X1,X0),X4))),s(X1,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,happ(s(fun(X1,X0),X3),s(X1,X5))),s(X0,happ(s(fun(X1,X0),X4),s(X1,X5)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X16,X10] : ! [X18,X17,X22,X11] : s(X16,happ(s(fun(X10,X16),'const.bool.COND_3'(s(bool,X18),s(fun(X10,X16),X17),s(fun(X10,X16),X22))),s(X10,X11))) = s(X16,'const.bool.COND_3'(s(bool,X18),s(X16,happ(s(fun(X10,X16),X17),s(X10,X11))),s(X16,happ(s(fun(X10,X16),X22),s(X10,X11)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.COND_RATOR')).
fof(f482,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X2),s(X1,'const.bool.COND_3'(s(bool,X3),s(X1,X4),s(X1,X5))))) = s(X0,'const.bool.COND_3'(s(bool,X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,'const.bool.COND_3'(s(bool,X3),s(X1,X4),s(X1,X5))))) = s(X0,'const.bool.COND_3'(s(bool,X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,'const.bool.COND_3'(s(bool,X3),s(X1,X4),s(X1,X5))))) = s(X0,'const.bool.COND_3'(s(bool,X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X16,X10] : ! [X17,X18,X11,X19] : s(X16,happ(s(fun(X10,X16),X17),s(X10,'const.bool.COND_3'(s(bool,X18),s(X10,X11),s(X10,X19))))) = s(X16,'const.bool.COND_3'(s(bool,X18),s(X16,happ(s(fun(X10,X16),X17),s(X10,X11))),s(X16,happ(s(fun(X10,X16),X17),s(X10,X19)))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.COND_RAND')).
fof(f481,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK22(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK22(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK22(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK22(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22])],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.arithmetic.MIN_MAX_LT',aHL_EXT)).
fof(f460,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f285])).
fof(f285,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f284])).
fof(f284,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f207])).
fof(f207,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f461,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f286])).
fof(f462,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f286])).
fof(f465,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f286])).
fof(f596,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f445,f595])).
fof(f445,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f279])).
fof(f279,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f278])).
fof(f278,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f446,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f279])).
fof(f447,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f279])).
fof(f439,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f275])).
fof(f275,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.MIN_MAX_EQ')).
fof(f440,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f275])).
fof(f435,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f188])).
fof(f188,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.IMP_ANTISYM_AX')).
fof(f438,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f189])).
fof(f431,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.MIN_COMM')).
fof(f428,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,X2)) | s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6))) | s(X0,X3) != s(X0,X4) | s(bool,X1) != s(bool,X2)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s(bool,X1) != s(bool,X2) | (p(s(bool,X2)) & s(X0,X3) != s(X0,X4)) | (~p(s(bool,X2)) & s(X0,X5) != s(X0,X6)) | s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6))))),
  inference(flattening,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s(bool,X1) != s(bool,X2) | (p(s(bool,X2)) & s(X0,X3) != s(X0,X4)) | (~p(s(bool,X2)) & s(X0,X5) != s(X0,X6))) | s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6))))),
  inference(ennf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s(bool,X1) = s(bool,X2) & (p(s(bool,X2)) => s(X0,X3) = s(X0,X4)) & (~p(s(bool,X2)) => s(X0,X5) = s(X0,X6))) => s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s(bool,X1) = s(bool,X2) & (p(s(bool,X2)) => s(X0,X3) = s(X0,X4)) & (~p(s(bool,X2)) => s(X0,X5) = s(X0,X6))) => s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X10] : ! [X21,X23,X11,X24,X19,X25] : ((s(bool,X21) = s(bool,X23) & (p(s(bool,X23)) => s(X10,X11) = s(X10,X24)) & (~p(s(bool,X23)) => s(X10,X19) = s(X10,X25))) => s(X10,'const.bool.COND_3'(s(bool,X21),s(X10,X11),s(X10,X19))) = s(X10,'const.bool.COND_3'(s(bool,X23),s(X10,X24),s(X10,X25))))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.COND_CONG')).
fof(f429,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X1) != s(bool,X2) | s(X0,X5) != s(X0,X6) | p(s(bool,X2)) | s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6)))) )),
  inference(cnf_transformation,[],[f185])).
fof(f430,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,'const.bool.COND_3'(s(bool,X1),s(X0,X3),s(X0,X5))) = s(X0,'const.bool.COND_3'(s(bool,X2),s(X0,X4),s(X0,X6))) | s(X0,X5) != s(X0,X6) | s(X0,X3) != s(X0,X4) | s(bool,X1) != s(bool,X2)) )),
  inference(cnf_transformation,[],[f185])).
fof(f416,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X10] : ! [X12,X13] : s(X10,X12) = s(X10,'const.bool.COND_3'(s(bool,'T_0'),s(X10,X12),s(X10,X13)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.COND_CLAUSES|split|0')).
fof(f356,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.EQ_CLAUSES|split|1')).
fof(f357,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f227])).
fof(f345,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,'F_0') = s(bool,X9))),
  file('thm.arithmetic.MIN_MAX_LT','thm.bool.BOOL_CASES_AX')).
fof(f337,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.MIN_MAX_LT',aHL_TRUTH)).
fof(f7845,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761,f7762,f7763,f7764,f7765,f7766,f7767])).
fof(f7767,plain,(
  ~sP0('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7671])).
fof(f7766,plain,(
  ~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7670])).
fof(f7765,plain,(
  ~sP0('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7669])).
fof(f7764,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0',X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7668])).
fof(f7763,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7667])).
fof(f7762,plain,(
  ~sP11('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7666])).
fof(f7761,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7664])).
fof(f7760,plain,(
  sP11('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7662])).
fof(f7759,plain,(
  ~sP10('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7659])).
fof(f7758,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0',X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7658])).
fof(f7757,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7657])).
fof(f7756,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7656])).
fof(f7755,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7655])).
fof(f7754,plain,(
  ~sP9('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7654])).
fof(f7753,plain,(
  ~sP9('T_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7653])).
fof(f7752,plain,(
  ~sP9('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7652])).
fof(f7751,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7651])).
fof(f7750,plain,(
  sP9('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7650])).
fof(f7749,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7649])).
fof(f7748,plain,(
  sP9('F_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7648])).
fof(f7747,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7647])).
fof(f7746,plain,(
  sP9('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7645])).
fof(f7745,plain,(
  ~sP8('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7643])).
fof(f7744,plain,(
  ~sP8('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7642])).
fof(f7743,plain,(
  ~sP8('T_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7641])).
fof(f7742,plain,(
  ( ! [X0] : (~sP9('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0',X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7640])).
fof(f7741,plain,(
  ( ! [X0] : (~sP9('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'T_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7639])).
fof(f7740,plain,(
  ~sP7('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0','T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7638])).
fof(f7739,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7637])).
fof(f7738,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7635])).
fof(f7737,plain,(
  ~sP6('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7631])).
fof(f7736,plain,(
  ( ! [X0] : (~sP7('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7630])).
fof(f7735,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7629])).
fof(f7734,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7628])).
fof(f7733,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7627])).
fof(f7732,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7626])).
fof(f7731,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7625])).
fof(f7730,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7624])).
fof(f7729,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0','F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7623])).
fof(f7728,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7622])).
fof(f7727,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7620])).
fof(f7726,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7619])).
fof(f7725,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7618])).
fof(f7724,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7616])).
fof(f7723,plain,(
  ~sP2('F_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7615])).
fof(f7722,plain,(
  ~sP3('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7611])).
fof(f7721,plain,(
  ( ! [X0] : (sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7607])).
fof(f7720,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7606])).
fof(f7719,plain,(
  sP1('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7603])).
fof(f7718,plain,(
  sP1('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7602])).
fof(f7717,plain,(
  ~sP1('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7601])).
fof(f7716,plain,(
  ~sP1('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7600])).
fof(f7715,plain,(
  ~sP1('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7599])).
fof(f7714,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7593,f7597])).
fof(f7711,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl3 | $spl9)),
  inference(backward_demodulation,[],[f7593,f6902])).
fof(f7671,plain,(
  ~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7140])).
fof(f7670,plain,(
  ~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7139])).
fof(f7669,plain,(
  ~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7133])).
fof(f7668,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0',X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7132])).
fof(f7667,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7131])).
fof(f7666,plain,(
  ~sP11('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7129])).
fof(f7664,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7125])).
fof(f7662,plain,(
  sP11('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7121])).
fof(f7659,plain,(
  ~sP10('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7116])).
fof(f7658,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0',X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7109])).
fof(f7657,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7105])).
fof(f7656,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7104])).
fof(f7655,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7102])).
fof(f7654,plain,(
  ~sP9('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7099])).
fof(f7653,plain,(
  ~sP9('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7098])).
fof(f7652,plain,(
  ~sP9('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7094])).
fof(f7651,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7091])).
fof(f7650,plain,(
  sP9('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7090])).
fof(f7649,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7089])).
fof(f7648,plain,(
  sP9('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7088])).
fof(f7647,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7085])).
fof(f7645,plain,(
  sP9('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7078])).
fof(f7643,plain,(
  ~sP8('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7073])).
fof(f7642,plain,(
  ~sP8('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7072])).
fof(f7641,plain,(
  ~sP8('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7067])).
fof(f7640,plain,(
  ( ! [X0] : (~sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0',X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7044])).
fof(f7639,plain,(
  ( ! [X0] : (~sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'T_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7043])).
fof(f7638,plain,(
  ~sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0','T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7042])).
fof(f7637,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7041])).
fof(f7635,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7033])).
fof(f7631,plain,(
  ~sP6('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7025])).
fof(f7630,plain,(
  ( ! [X0] : (~sP7('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7023])).
fof(f7629,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7021])).
fof(f7628,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7020])).
fof(f7627,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7019])).
fof(f7626,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7018])).
fof(f7625,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7017])).
fof(f7624,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7016])).
fof(f7623,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0','F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7015])).
fof(f7622,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7014])).
fof(f7620,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7006])).
fof(f7619,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7005])).
fof(f7618,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f7004])).
fof(f7616,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6994])).
fof(f7615,plain,(
  ~sP2('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6993])).
fof(f7611,plain,(
  ~sP3('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6978])).
fof(f7607,plain,(
  ( ! [X0] : (sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6970])).
fof(f7606,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0')) ) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6966])).
fof(f7603,plain,(
  sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6952])).
fof(f7602,plain,(
  sP1('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6951])).
fof(f7601,plain,(
  ~sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6950])).
fof(f7600,plain,(
  ~sP1('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6949])).
fof(f7599,plain,(
  ~sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6947])).
fof(f7597,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) | ($spl1 | $spl9)),
  inference(backward_demodulation,[],[f7595,f6916])).
fof(f6916,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f470])).
fof(f6917,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f356])).
fof(f6947,plain,(
  ~sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f460])).
fof(f6949,plain,(
  ~sP1('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f460])).
fof(f6950,plain,(
  ~sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f460])).
fof(f6951,plain,(
  sP1('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f462])).
fof(f6952,plain,(
  sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f465])).
fof(f6959,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f508])).
fof(f6964,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f603,f600,f605,f592,f510])).
fof(f6966,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f2231,f600,f2232,f592,f510])).
fof(f6970,plain,(
  ( ! [X0] : (sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f603,f600,f2233,f592,f511])).
fof(f6971,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f512])).
fof(f6976,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f514])).
fof(f6977,plain,(
  ( ! [X0,X1] : (sP4('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f515])).
fof(f6978,plain,(
  ~sP3('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f516])).
fof(f6981,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f518])).
fof(f6982,plain,(
  ( ! [X0,X1] : (sP3('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f519])).
fof(f6983,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f595,f592,f520])).
fof(f6993,plain,(
  ~sP2('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f595,f592,f520])).
fof(f6994,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f595,f592,f520])).
fof(f7003,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f595,f592,f520])).
fof(f7004,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f592,f595,f592,f520])).
fof(f7005,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f592,f520])).
fof(f7006,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f592,f520])).
fof(f7013,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f626,f592,f524])).
fof(f7014,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | ($spl1 | $spl9)),
  inference(unit_resulting_resolution,[],[f5847,f592,f524])).
fof(f7015,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0','F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f626,f592,f524])).
fof(f7016,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl9)),
  inference(unit_resulting_resolution,[],[f5847,f592,f524])).
fof(f7017,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f416,f592,f527])).
fof(f7018,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f415,f592,f527])).
fof(f7019,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f416,f592,f527])).
fof(f7020,plain,(
  ( ! [X0,X1] : (~sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f415,f592,f527])).
fof(f7021,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f529])).
fof(f7023,plain,(
  ( ! [X0] : (~sP7('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f530])).
fof(f7025,plain,(
  ~sP6('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f535])).
fof(f7028,plain,(
  ( ! [X0,X1] : (sP6(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f537])).
fof(f7029,plain,(
  ( ! [X0,X1] : (sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f538])).
fof(f7032,plain,(
  ( ! [X0] : (sP7('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f539])).
fof(f7033,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f539])).
fof(f7036,plain,(
  ( ! [X0] : (sP7('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f540])).
fof(f7041,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f540])).
fof(f7042,plain,(
  ~sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f544])).
fof(f7043,plain,(
  ( ! [X0] : (~sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'T_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f545])).
fof(f7044,plain,(
  ( ! [X0] : (~sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0',X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f546])).
fof(f7067,plain,(
  ~sP8('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f595,f592,f552])).
fof(f7072,plain,(
  ~sP8('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f595,f592,f552])).
fof(f7073,plain,(
  ~sP8('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f592,f552])).
fof(f7077,plain,(
  ( ! [X0,X1] : (sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f555])).
fof(f7078,plain,(
  sP9('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f595,f592,f556])).
fof(f7084,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f595,f592,f556])).
fof(f7085,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f592,f595,f592,f556])).
fof(f7088,plain,(
  sP9('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f595,f592,f556])).
fof(f7089,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f595,f592,f556])).
fof(f7090,plain,(
  sP9('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f592,f556])).
fof(f7091,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f592,f556])).
fof(f7094,plain,(
  ~sP9('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f337,f592,f559])).
fof(f7098,plain,(
  ~sP9('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f337,f592,f559])).
fof(f7099,plain,(
  ~sP9('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f337,f592,f559])).
fof(f7102,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f562])).
fof(f7104,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f562])).
fof(f7105,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f562])).
fof(f7109,plain,(
  ( ! [X0] : (~sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0',X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f563])).
fof(f7116,plain,(
  ~sP10('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f569])).
fof(f7119,plain,(
  ( ! [X0,X1] : (sP10(X0,X1,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f570])).
fof(f7120,plain,(
  ( ! [X0,X1] : (sP10('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f572])).
fof(f7121,plain,(
  sP11('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f337,f592,f573])).
fof(f7124,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f337,f592,f573])).
fof(f7125,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f592,f337,f592,f573])).
fof(f7126,plain,(
  ( ! [X0] : (sP11('T_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f592,f574])).
fof(f7129,plain,(
  ~sP11('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f337,f592,f576])).
fof(f7131,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f609,f592,f581])).
fof(f7132,plain,(
  ( ! [X0] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0',X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f610,f592,f581])).
fof(f7133,plain,(
  ~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f596])).
fof(f7139,plain,(
  ~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f592,f596])).
fof(f7140,plain,(
  ~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f592,f596])).
fof(f7148,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl9)),
  inference(forward_demodulation,[],[f7146,f6905])).
fof(f7146,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl9)),
  inference(unit_resulting_resolution,[],[f5847,f592,f775])).
fof(f6900,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f593,f439])).
fof(f6902,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | $spl3),
  inference(forward_demodulation,[],[f6901,f431])).
fof(f6901,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | $spl3),
  inference(unit_resulting_resolution,[],[f593,f439])).
fof(f5913,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X21)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num',X24)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X24)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22)))) ) | $spl1),
  inference(superposition,[],[f485,f2639])).
fof(f5905,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X23)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X24)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num',X24)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22)))) ) | $spl1),
  inference(superposition,[],[f485,f2639])).
fof(f5829,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num',X75)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X77)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X75),s('type.num.num',X76)))) ) | $spl1),
  inference(superposition,[],[f480,f2639])).
fof(f5828,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X72),s('type.num.num',X74)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X72),s('type.num.num',X73)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X72),s('type.num.num',X73)))) ) | $spl1),
  inference(superposition,[],[f480,f2639])).
fof(f5827,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X71)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X69),s('type.num.num',X70)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X69),s('type.num.num',X70)))) ) | $spl1),
  inference(superposition,[],[f471,f2639])).
fof(f5826,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',X66)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X66),s('type.num.num',X67))),s('type.num.num',X68)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num',X67)))) ) | $spl1),
  inference(superposition,[],[f471,f2639])).
fof(f5825,plain,(
  ( ! [X64,X65,X63] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X65)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X63),s('type.num.num',X64)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X63),s('type.num.num',X64)))) ) | $spl1),
  inference(superposition,[],[f470,f2639])).
fof(f5824,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num',X60)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num',X62)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num',X61)))) ) | $spl1),
  inference(superposition,[],[f470,f2639])).
fof(f5823,plain,(
  ( ! [X59,X57,X58] : (s('type.num.num',X57) != s('type.num.num',X59) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X57),s('type.num.num',X58))))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X57),s('type.num.num',X58))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X57),s('type.num.num',X58)))) ) | $spl1),
  inference(superposition,[],[f440,f2639])).
fof(f5822,plain,(
  ( ! [X54,X56,X55] : (s('type.num.num',X54) != s('type.num.num',X56) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X56))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X54),s('type.num.num',X55)))) ) | $spl1),
  inference(superposition,[],[f440,f2639])).
fof(f5821,plain,(
  ( ! [X52,X53,X51] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X53),s('type.num.num',X51))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X53),s('type.num.num',X51))) | s('type.num.num',X53) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X51),s('type.num.num',X52))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X52)))) ) | $spl1),
  inference(superposition,[],[f439,f2639])).
fof(f5820,plain,(
  ( ! [X50,X48,X49] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X48),s('type.num.num',X50))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X48),s('type.num.num',X50))) | s('type.num.num',X50) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X48),s('type.num.num',X49))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num',X49)))) ) | $spl1),
  inference(superposition,[],[f439,f2639])).
fof(f5819,plain,(
  ( ! [X47,X45,X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X47),s('type.num.num',X45)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X45),s('type.num.num',X46))),s('type.num.num',X47)))) | s('type.num.num',X47) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X45),s('type.num.num',X46))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',X46)))) ) | $spl1),
  inference(superposition,[],[f434,f2639])).
fof(f5818,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X44)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X42),s('type.num.num',X43)))))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X42),s('type.num.num',X43))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X42),s('type.num.num',X43)))) ) | $spl1),
  inference(superposition,[],[f434,f2639])).
fof(f5810,plain,(
  ( ! [X23,X22] : (s('type.num.num',X22) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num',X22) = s('type.num.num',X23) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23)))) ) | $spl1),
  inference(superposition,[],[f439,f2639])).
fof(f5777,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X18),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X16),s('type.num.num',X17))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) ) | $spl1),
  inference(superposition,[],[f2639,f2639])).
fof(f5772,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl1),
  inference(superposition,[],[f2639,f431])).
fof(f5769,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X16),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) ) | $spl1),
  inference(superposition,[],[f2639,f2639])).
fof(f5764,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) ) | $spl1),
  inference(superposition,[],[f2639,f431])).
fof(f633,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f361])).
fof(f970,plain,(
  ( ! [X4] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X4),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(superposition,[],[f859,f633])).
fof(f988,plain,(
  ( ! [X4] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X4),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(superposition,[],[f860,f633])).
fof(f1015,plain,(
  ( ! [X4] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X4),s(bool,'F_0')))) ) | $spl1),
  inference(superposition,[],[f861,f633])).
fof(f1061,plain,(
  ( ! [X4] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X4),s(bool,'F_0')))) ) | $spl1),
  inference(superposition,[],[f862,f633])).
fof(f1089,plain,(
  ( ! [X4] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X4)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(superposition,[],[f907,f633])).
fof(f1105,plain,(
  ( ! [X4] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X4)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(superposition,[],[f908,f633])).
fof(f1131,plain,(
  ( ! [X4] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X4)))) ) | $spl1),
  inference(superposition,[],[f909,f633])).
fof(f1147,plain,(
  ( ! [X4] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X4)))) ) | $spl1),
  inference(superposition,[],[f910,f633])).
fof(f1182,plain,(
  ( ! [X4] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X4),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(superposition,[],[f1049,f633])).
fof(f1203,plain,(
  ( ! [X4] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X4)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(superposition,[],[f1142,f633])).
fof(f1531,plain,(
  ( ! [X4,X5] : (s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X4),s(bool,X5)))) ) | $spl1),
  inference(superposition,[],[f1524,f415])).
fof(f1636,plain,(
  ( ! [X50,X51] : (~sP5('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X51),s(bool,X50)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X50)) ) | $spl1),
  inference(superposition,[],[f859,f1524])).
fof(f1638,plain,(
  ( ! [X54,X55] : (sP5('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X55),s(bool,X54)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X54)) ) | $spl1),
  inference(superposition,[],[f860,f1524])).
fof(f1639,plain,(
  ( ! [X57,X56] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X57),s(bool,X56))) | s(bool,'T_0') = s(bool,X56)) ) | $spl1),
  inference(superposition,[],[f861,f1524])).
fof(f1641,plain,(
  ( ! [X61,X60] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X61),s(bool,X60))) | s(bool,'T_0') = s(bool,X60)) ) | $spl1),
  inference(superposition,[],[f862,f1524])).
fof(f1661,plain,(
  ( ! [X101,X102] : (sP4('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X102),s(bool,X101)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X101)) ) | $spl1),
  inference(superposition,[],[f1049,f1524])).
fof(f1876,plain,(
  ( ! [X0] : (~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0')),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f970,f619,f617,f595,f511])).
fof(f1877,plain,(
  ( ! [X0] : (~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1089,f619,f617,f595,f511])).
fof(f1899,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | $spl1),
  inference(forward_demodulation,[],[f1866,f633])).
fof(f1866,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f909,f620,f601,f595,f511])).
fof(f1900,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | $spl1),
  inference(forward_demodulation,[],[f1865,f633])).
fof(f1865,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f861,f620,f601,f595,f511])).
fof(f1993,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'F_0')))) | p(s(bool,X0))) ) | $spl1),
  inference(forward_demodulation,[],[f1992,f633])).
fof(f1992,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))))) ) | $spl1),
  inference(condensation,[],[f1991])).
fof(f1991,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,X4)) | p(s(bool,X3))) ) | $spl1),
  inference(subsumption_resolution,[],[f1967,f356])).
fof(f1967,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,X4)) | p(s(bool,X3)) | s(bool,'T_0') = s(bool,X3)) ) | $spl1),
  inference(superposition,[],[f488,f1524])).
fof(f2429,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'T_0') = s(bool,sK14(X0,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f2423,f633])).
fof(f2423,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'T_0') = s(bool,sK14(X0,bool))) ) | $spl1),
  inference(superposition,[],[f413,f1524])).
fof(f2457,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'T_0') = s(bool,sK15(X0,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f2451,f633])).
fof(f2451,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'T_0') = s(bool,sK15(X0,bool))) ) | $spl1),
  inference(superposition,[],[f414,f1524])).
fof(f3031,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK22(X0,X1,X2,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f3027,f633])).
fof(f3027,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))) != s(X2,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK22(X0,X1,X2,bool))) ) | $spl1),
  inference(superposition,[],[f481,f1524])).
fof(f3032,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK22(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK22(X1,X2,bool,X0))))) ) | $spl1),
  inference(forward_demodulation,[],[f3029,f633])).
fof(f3029,plain,(
  ( ! [X2,X0,X1] : (s(bool,f(s(X0,sK22(X1,X2,bool,X0)))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK22(X1,X2,bool,X0))))) ) | $spl1),
  inference(superposition,[],[f481,f1524])).
fof(f3089,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK16(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK16(X0,X1,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f3085,f633])).
fof(f3085,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK16(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK16(X0,X1,bool))) ) | $spl1),
  inference(superposition,[],[f419,f1524])).
fof(f3135,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK16(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK16(X0,X1,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f3129,f633])).
fof(f3129,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK16(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK16(X0,X1,bool))) ) | $spl1),
  inference(superposition,[],[f420,f1524])).
fof(f3167,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK17(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK18(X0,X1,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f3163,f633])).
fof(f3163,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK17(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK18(X0,X1,bool))) ) | $spl1),
  inference(superposition,[],[f421,f1524])).
fof(f3204,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK17(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK18(X0,X1,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f3198,f633])).
fof(f3198,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK17(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK18(X0,X1,bool))) ) | $spl1),
  inference(superposition,[],[f422,f1524])).
fof(f3743,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,'F_0') != s(bool,X8) | s(X9,X10) != s(X9,X11) | p(s(bool,X7)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X13),s(X9,X11))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X12),s(X9,X10)))) ) | $spl1),
  inference(forward_demodulation,[],[f3742,f633])).
fof(f3742,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X8) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(X9,X10) != s(X9,X11) | p(s(bool,X7)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X13),s(X9,X11))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X12),s(X9,X10)))) ) | $spl1),
  inference(subsumption_resolution,[],[f3601,f356])).
fof(f3601,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X8) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(X9,X10) != s(X9,X11) | p(s(bool,X7)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X13),s(X9,X11))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X12),s(X9,X10))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(superposition,[],[f429,f1524])).
fof(f2639,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl1),
  inference(forward_demodulation,[],[f2638,f415])).
fof(f2638,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X2),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl1),
  inference(forward_demodulation,[],[f2603,f633])).
fof(f2603,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s('type.num.num',X2),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl1),
  inference(superposition,[],[f432,f1524])).
fof(f2724,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl1),
  inference(forward_demodulation,[],[f2723,f415])).
fof(f2723,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl1),
  inference(forward_demodulation,[],[f2683,f633])).
fof(f2683,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | $spl1),
  inference(superposition,[],[f433,f1524])).
fof(f2019,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f1998,f595])).
fof(f1998,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)))) | p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1993,f345])).
fof(f3738,plain,(
  ( ! [X30,X28,X33,X31,X29] : (s(X29,X30) = s(X29,'const.bool.COND_3'(s(bool,X28),s(X29,X33),s(X29,X31))) | s(X29,X30) != s(X29,X31) | p(s(bool,X28))) ) | $spl1),
  inference(forward_demodulation,[],[f3737,f415])).
fof(f3737,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(X29,'const.bool.COND_3'(s(bool,'F_0'),s(X29,X32),s(X29,X30))) = s(X29,'const.bool.COND_3'(s(bool,X28),s(X29,X33),s(X29,X31))) | s(X29,X30) != s(X29,X31) | p(s(bool,X28))) ) | $spl1),
  inference(forward_demodulation,[],[f3736,f633])).
fof(f3736,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(X29,X30) != s(X29,X31) | p(s(bool,X28)) | s(X29,'const.bool.COND_3'(s(bool,X28),s(X29,X33),s(X29,X31))) = s(X29,'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s(X29,X32),s(X29,X30)))) ) | $spl1),
  inference(subsumption_resolution,[],[f3597,f361])).
fof(f3597,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,'F_0') != s(bool,X28) | s(X29,X30) != s(X29,X31) | p(s(bool,X28)) | s(X29,'const.bool.COND_3'(s(bool,X28),s(X29,X33),s(X29,X31))) = s(X29,'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s(X29,X32),s(X29,X30)))) ) | $spl1),
  inference(superposition,[],[f429,f633])).
fof(f3731,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(X9,X10) != s(X9,X11) | p(s(bool,X8)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X12),s(X9,X10))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X13),s(X9,X11))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(subsumption_resolution,[],[f3730,f361])).
fof(f3730,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,'F_0') != s(bool,X8) | s(X9,X10) != s(X9,X11) | p(s(bool,X8)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X12),s(X9,X10))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X13),s(X9,X11))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(forward_demodulation,[],[f3594,f633])).
fof(f3594,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X8) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(X9,X10) != s(X9,X11) | p(s(bool,X8)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X12),s(X9,X10))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X13),s(X9,X11))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(superposition,[],[f429,f1524])).
fof(f3013,plain,(
  ( ! [X0] : (sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f620,f601,f2234,f511])).
fof(f3015,plain,(
  ( ! [X0] : (sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f604,f618,f2234,f510])).
fof(f2972,plain,(
  ( ! [X0] : (sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f619,f601,f2233,f511])).
fof(f2722,plain,(
  s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(forward_demodulation,[],[f2682,f415])).
fof(f2682,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(superposition,[],[f433,f633])).
fof(f2721,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))) = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(forward_demodulation,[],[f2681,f484])).
fof(f2681,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f433,f1524])).
fof(f2637,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))) | ($spl1 | $spl3)),
  inference(backward_demodulation,[],[f2635,f2494])).
fof(f2635,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(forward_demodulation,[],[f2602,f415])).
fof(f2602,plain,(
  s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(superposition,[],[f432,f633])).
fof(f2601,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f432,f1524])).
fof(f2499,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) | $spl3),
  inference(forward_demodulation,[],[f2495,f484])).
fof(f2495,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) | $spl3),
  inference(unit_resulting_resolution,[],[f2487,f439])).
fof(f2498,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(forward_demodulation,[],[f2497,f484])).
fof(f2497,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(forward_demodulation,[],[f2496,f431])).
fof(f2496,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(unit_resulting_resolution,[],[f2487,f439])).
fof(f2494,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(forward_demodulation,[],[f2490,f484])).
fof(f2490,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(unit_resulting_resolution,[],[f2477,f439])).
fof(f2493,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(forward_demodulation,[],[f2492,f484])).
fof(f2492,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(forward_demodulation,[],[f2491,f431])).
fof(f2491,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl3),
  inference(unit_resulting_resolution,[],[f2477,f439])).
fof(f2477,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f593,f439])).
fof(f2487,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | $spl3),
  inference(forward_demodulation,[],[f2478,f431])).
fof(f2478,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK13),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | $spl3),
  inference(unit_resulting_resolution,[],[f593,f439])).
fof(f2235,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f633,f2147,f525])).
fof(f2238,plain,(
  ( ! [X0] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f633,f2147,f525])).
fof(f2242,plain,(
  ( ! [X0] : (~sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f627,f2147,f526])).
fof(f2244,plain,(
  ( ! [X0] : (~sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f627,f2147,f526])).
fof(f2322,plain,(
  ( ! [X0] : (sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f625,f2147,f568])).
fof(f2348,plain,(
  ( ! [X0,X1] : (sP11('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f624,f2147,f579])).
fof(f1872,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f845,f620,f600,f595,f511])).
fof(f1812,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f846,f619,f601,f595,f510])).
fof(f1759,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f604,f618,f607,f337,f509])).
fof(f1760,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f620,f618,f607,f337,f509])).
fof(f1764,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f831,f620,f605,f337,f509])).
fof(f1532,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7)))) ) | $spl1),
  inference(superposition,[],[f1524,f416])).
fof(f1524,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(subsumption_resolution,[],[f1520,f595])).
fof(f1520,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(superposition,[],[f775,f633])).
fof(f1372,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1203,f345])).
fof(f1370,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1182,f345])).
fof(f1365,plain,(
  ( ! [X0] : (sP4('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1182,f345])).
fof(f1338,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f625,f337,f595,f568])).
fof(f1327,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1147,f345])).
fof(f1315,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1131,f345])).
fof(f1303,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1105,f345])).
fof(f1291,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1089,f345])).
fof(f1285,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1061,f345])).
fof(f1280,plain,(
  ( ! [X0] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1061,f345])).
fof(f1273,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1015,f345])).
fof(f1268,plain,(
  ( ! [X0] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1015,f345])).
fof(f1258,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f988,f345])).
fof(f1253,plain,(
  ( ! [X0] : (sP5('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f988,f345])).
fof(f1246,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f970,f345])).
fof(f1241,plain,(
  ( ! [X0] : (~sP5('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f970,f345])).
fof(f1215,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0','F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f623,f595,f595,f551])).
fof(f845,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f633,f527])).
fof(f846,plain,(
  ~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f633,f527])).
fof(f831,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f627,f526])).
fof(f835,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f627,f526])).
fof(f821,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f337,f633,f525])).
fof(f822,plain,(
  sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f337,f633,f525])).
fof(f812,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f595,f627,f524])).
fof(f814,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f595,f627,f524])).
fof(f716,plain,(
  ( ! [X0] : (sP7('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f621,f595,f581])).
fof(f718,plain,(
  ( ! [X0] : (sP7('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f622,f595,f581])).
fof(f699,plain,(
  ( ! [X0] : (sP11('T_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f624,f337,f579])).
fof(f627,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f356])).
fof(f617,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f514])).
fof(f618,plain,(
  ( ! [X0,X1] : (sP4('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f515])).
fof(f619,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f518])).
fof(f620,plain,(
  ( ! [X0,X1] : (sP3('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f519])).
fof(f621,plain,(
  ( ! [X0,X1] : (sP6(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f537])).
fof(f622,plain,(
  ( ! [X0,X1] : (sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f538])).
fof(f623,plain,(
  ( ! [X0,X1] : (sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f555])).
fof(f624,plain,(
  ( ! [X0,X1] : (sP10(X0,X1,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f570])).
fof(f625,plain,(
  ( ! [X0,X1] : (sP10('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f592,f572])).
fof(f7844,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761,f7762,f7763,f7764,f7765,f7766])).
fof(f7843,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761,f7762,f7763,f7764,f7765])).
fof(f7842,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761,f7762,f7763,f7764])).
fof(f7841,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761,f7762,f7763])).
fof(f7840,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761,f7762])).
fof(f7839,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760,f7761])).
fof(f7838,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759,f7760])).
fof(f7837,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758,f7759])).
fof(f7836,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757,f7758])).
fof(f7835,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756,f7757])).
fof(f7834,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755,f7756])).
fof(f7833,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754,f7755])).
fof(f7832,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753,f7754])).
fof(f7831,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752,f7753])).
fof(f7830,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751,f7752])).
fof(f7829,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750,f7751])).
fof(f7828,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749,f7750])).
fof(f7827,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748,f7749])).
fof(f7826,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747,f7748])).
fof(f7825,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746,f7747])).
fof(f7824,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745,f7746])).
fof(f7823,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744,f7745])).
fof(f7822,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743,f7744])).
fof(f7821,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7743])).
fof(f7820,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742])).
fof(f7819,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741])).
fof(f7818,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740])).
fof(f7817,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739])).
fof(f7816,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737,f7738])).
fof(f7815,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736,f7737])).
fof(f7814,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735,f7736])).
fof(f7813,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734,f7735])).
fof(f7812,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733,f7734])).
fof(f7811,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732,f7733])).
fof(f7810,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731,f7732])).
fof(f7809,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730,f7731])).
fof(f7808,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729,f7730])).
fof(f7807,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728,f7729])).
fof(f7806,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727,f7728])).
fof(f7805,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7727])).
fof(f7804,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726])).
fof(f7803,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725])).
fof(f7802,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724])).
fof(f7801,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723])).
fof(f7800,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722])).
fof(f7799,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721])).
fof(f7798,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719,f7720])).
fof(f7797,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718,f7719])).
fof(f7796,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717,f7718])).
fof(f7795,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716,f7717])).
fof(f7794,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715,f7716])).
fof(f7793,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714,f7715])).
fof(f7792,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711,f7714])).
fof(f7791,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl69)),
  inference(global_subsumption,[],[f7790,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711])).
fof(f7790,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl69)),
  inference(forward_demodulation,[],[f7713,f7593])).
fof(f7713,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl69)),
  inference(backward_demodulation,[],[f7593,f7361])).
fof(f7361,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl69),
  inference(forward_demodulation,[],[f7360,f431])).
fof(f7360,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl69),
  inference(unit_resulting_resolution,[],[f5895,f439])).
fof(f7788,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691,f7711])).
fof(f7787,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl67)),
  inference(global_subsumption,[],[f7710,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7710,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl9 | $spl67)),
  inference(backward_demodulation,[],[f7593,f5893])).
fof(f7786,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl65)),
  inference(global_subsumption,[],[f7709,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7709,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0','F_0') | ($spl9 | $spl65)),
  inference(backward_demodulation,[],[f7593,f5891])).
fof(f7785,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl63)),
  inference(global_subsumption,[],[f7708,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7708,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl63)),
  inference(backward_demodulation,[],[f7593,f5889])).
fof(f7784,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl60)),
  inference(global_subsumption,[],[f7707,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7707,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0','T_0') | ($spl9 | $spl60)),
  inference(backward_demodulation,[],[f7593,f5887])).
fof(f7783,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl58)),
  inference(global_subsumption,[],[f7706,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7706,plain,(
  ( ! [X21] : (s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,X21)) ) | ($spl9 | $spl58)),
  inference(backward_demodulation,[],[f7593,f5885])).
fof(f7782,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl56)),
  inference(global_subsumption,[],[f7705,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7705,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0','T_0') | ($spl9 | $spl56)),
  inference(backward_demodulation,[],[f7593,f5884])).
fof(f7781,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl54)),
  inference(global_subsumption,[],[f7704,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7704,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0','F_0') | ($spl9 | $spl54)),
  inference(backward_demodulation,[],[f7593,f5882])).
fof(f7780,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl53)),
  inference(global_subsumption,[],[f7703,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7703,plain,(
  ~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl53)),
  inference(backward_demodulation,[],[f7593,f5880])).
fof(f7779,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl51)),
  inference(global_subsumption,[],[f7702,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7702,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl9 | $spl51)),
  inference(backward_demodulation,[],[f7593,f5878])).
fof(f7778,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl49)),
  inference(global_subsumption,[],[f7701,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7701,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl49)),
  inference(backward_demodulation,[],[f7593,f5876])).
fof(f7777,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f7700,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7700,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl9 | $spl47)),
  inference(backward_demodulation,[],[f7593,f5874])).
fof(f7776,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl44)),
  inference(global_subsumption,[],[f7699,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7699,plain,(
  sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl44)),
  inference(backward_demodulation,[],[f7593,f5872])).
fof(f7775,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl42)),
  inference(global_subsumption,[],[f7698,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7698,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'F_0') | ($spl9 | $spl42)),
  inference(backward_demodulation,[],[f7593,f5870])).
fof(f7774,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl40)),
  inference(global_subsumption,[],[f7697,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7697,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl40)),
  inference(backward_demodulation,[],[f7593,f5868])).
fof(f7773,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl38)),
  inference(global_subsumption,[],[f7696,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7696,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),'T_0') | ($spl9 | $spl38)),
  inference(backward_demodulation,[],[f7593,f5866])).
fof(f7772,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl36)),
  inference(global_subsumption,[],[f7695,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7695,plain,(
  ( ! [X20] : (sP7('F_0','const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)),X20)) ) | ($spl9 | $spl36)),
  inference(backward_demodulation,[],[f7593,f5864])).
fof(f7771,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl34)),
  inference(global_subsumption,[],[f7694,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7694,plain,(
  ( ! [X19] : (sP7('F_0',X19,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)))) ) | ($spl9 | $spl34)),
  inference(backward_demodulation,[],[f7593,f5863])).
fof(f7770,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl32)),
  inference(global_subsumption,[],[f7693,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7693,plain,(
  ( ! [X18] : (sP11('T_0',X18,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12)))) ) | ($spl9 | $spl32)),
  inference(backward_demodulation,[],[f7593,f5862])).
fof(f7769,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29 | $spl30)),
  inference(global_subsumption,[],[f7692,f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7692,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl9 | $spl30)),
  inference(backward_demodulation,[],[f7593,f5861])).
fof(f7768,plain,(
  $false | ($spl1 | $spl3 | $spl9 | $spl29)),
  inference(global_subsumption,[],[f336,f335,f337,f345,f357,f356,f416,f430,f429,f428,f431,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f481,f482,f483,f484,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f625,f624,f623,f622,f621,f620,f619,f618,f617,f627,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f699,f718,f716,f723,f775,f814,f813,f812,f811,f822,f821,f835,f834,f831,f830,f846,f845,f863,f910,f909,f908,f907,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f979,f986,f995,f1006,f1013,f1021,f1029,f1033,f1038,f1042,f1052,f1059,f1068,f1076,f1087,f1091,f1100,f1103,f1107,f1124,f1129,f1142,f1145,f1159,f1173,f1180,f1193,f1201,f1215,f1214,f1222,f1229,f1241,f1246,f1253,f1258,f1268,f1273,f1280,f1285,f1291,f1303,f1315,f1327,f1338,f1337,f1346,f1354,f1365,f1370,f1372,f1389,f1401,f1434,f1456,f1484,f1524,f1532,f1769,f1764,f1760,f1759,f1756,f1819,f1812,f1886,f1872,f1929,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2348,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2322,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2244,f2243,f2242,f2241,f2240,f2238,f2237,f2235,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2487,f2477,f2488,f2482,f2483,f2486,f2493,f2494,f2498,f2499,f2516,f2518,f2522,f2511,f2541,f2601,f2635,f2637,f2721,f2722,f2742,f2762,f2802,f2814,f2848,f2847,f2860,f2891,f2901,f2941,f2972,f2971,f3002,f3015,f3014,f3013,f3025,f3455,f3727,f3731,f3735,f3738,f3607,f3380,f3332,f3285,f3244,f3203,f3162,f3134,f3084,f2456,f2428,f426,f425,f424,f423,f422,f421,f420,f419,f414,f413,f2551,f2555,f2829,f2823,f486,f434,f2019,f1990,f1979,f492,f491,f490,f488,f487,f1446,f1475,f1442,f1471,f1499,f2780,f2774,f2730,f2724,f2706,f2639,f2620,f2619,f1455,f485,f480,f471,f470,f433,f432,f3743,f3741,f3618,f3379,f3331,f3284,f3243,f3204,f3202,f3167,f3161,f3135,f3133,f3089,f3083,f3032,f3031,f3026,f3003,f2485,f2481,f2457,f2455,f2429,f2427,f2239,f2236,f1993,f1900,f1899,f1885,f1877,f1876,f1870,f1869,f1810,f1809,f1755,f1661,f1641,f1639,f1638,f1636,f1531,f1425,f1392,f1388,f1203,f1202,f1190,f1184,f1182,f1181,f1170,f1169,f1167,f1147,f1146,f1131,f1130,f1123,f1105,f1104,f1089,f1088,f1063,f1061,f1060,f1049,f1017,f1015,f1014,f990,f989,f988,f987,f976,f972,f971,f970,f969,f921,f891,f890,f889,f888,f887,f886,f885,f884,f883,f882,f873,f862,f861,f860,f859,f633,f595,f415,f361,f360,f5764,f5769,f5772,f5777,f5780,f5781,f5782,f5783,f5784,f5785,f5786,f5787,f5788,f5789,f5790,f5791,f5792,f5793,f5794,f5795,f5796,f5797,f5798,f5799,f5800,f5801,f5802,f5803,f5804,f5805,f5806,f5807,f5808,f5809,f5810,f5811,f5818,f5819,f5820,f5821,f5822,f5823,f5824,f5825,f5826,f5827,f5828,f5829,f5905,f5913,f5737,f5609,f5447,f5410,f6402,f3744,f3732,f3199,f3164,f3130,f3086,f3030,f3028,f5859,f5847,f593,f592,f6902,f6900,f6913,f6912,f6911,f6908,f6907,f6905,f7148,f7140,f7139,f7133,f7132,f7131,f7129,f7126,f7125,f7124,f7121,f7120,f7119,f7116,f7109,f7105,f7104,f7102,f7099,f7098,f7094,f7091,f7090,f7089,f7088,f7085,f7084,f7078,f7077,f7073,f7072,f7067,f7044,f7043,f7042,f7041,f7036,f7033,f7032,f7029,f7028,f7025,f7023,f7021,f7020,f7019,f7018,f7017,f7016,f7015,f7014,f7013,f7006,f7005,f7004,f7003,f6994,f6993,f6983,f6982,f6981,f6978,f6977,f6976,f6971,f6970,f6966,f6964,f6959,f6952,f6951,f6950,f6949,f6947,f6917,f6916,f7293,f7299,f7335,f7394,f7393,f7373,f7372,f7595,f7597,f7599,f7600,f7601,f7602,f7603,f7606,f7607,f7611,f7615,f7616,f7618,f7619,f7620,f7622,f7623,f7624,f7625,f7626,f7627,f7628,f7629,f7630,f7631,f7635,f7637,f7638,f7639,f7640,f7641,f7642,f7643,f7645,f7647,f7648,f7649,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f7657,f7658,f7659,f7662,f7664,f7666,f7667,f7668,f7669,f7670,f7671,f7681,f7436,f7438,f7439,f7441,f7443,f7445,f7447,f7449,f7453,f7456,f7457,f7459,f7593,f7691])).
fof(f7594,plain,(
  $false | ($spl9 | $spl73)),
  inference(subsumption_resolution,[],[f7593,f5899])).
fof(f6895,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f6894,f337])).
fof(f6894,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f6488,f6525])).
fof(f6525,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f337,f6406,f438])).
fof(f6406,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12)))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f6405,f2516])).
fof(f6405,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK12)))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f591,f594])).
fof(f6488,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12)))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f6406,f480])).
fof(f6893,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f6892,f337])).
fof(f6892,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f6490,f6525])).
fof(f6490,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12))),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK12)))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f6406,f480])).
fof(f6491,plain,(
  $false | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f6406,f6406,f480])).
fof(f6489,plain,(
  $false | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f6406,f6406,f480])).
fof(f6356,plain,(
  $false | ($spl1 | $spl3 | $spl8)),
  inference(subsumption_resolution,[],[f6355,f593])).
fof(f6355,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK13) | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f6339,f6176])).
fof(f6176,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl8),
  inference(forward_demodulation,[],[f5966,f416])).
fof(f5966,plain,(
  s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK12),s('type.num.num',sK13))) | $spl8),
  inference(superposition,[],[f433,f5848])).
fof(f6339,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6257])).
fof(f6257,plain,(
  s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f2722])).
fof(f6262,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl8),
  inference(forward_demodulation,[],[f5967,f416])).
fof(f5967,plain,(
  s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK13),s('type.num.num',sK12))) | $spl8),
  inference(superposition,[],[f432,f5848])).
fof(f6354,plain,(
  $false | ($spl1 | $spl3 | $spl8)),
  inference(subsumption_resolution,[],[f6336,f6249])).
fof(f6249,plain,(
  s('type.num.num',sK12) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl3 | $spl8)),
  inference(backward_demodulation,[],[f6176,f2477])).
fof(f6336,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6254])).
fof(f6254,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f2635])).
fof(f6349,plain,(
  $false | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6282,f5957])).
fof(f5957,plain,(
  sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl8),
  inference(unit_resulting_resolution,[],[f337,f5848,f525])).
fof(f6282,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6196])).
fof(f6196,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f835])).
fof(f6348,plain,(
  $false | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6281,f5933])).
fof(f5933,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f337,f5848,f525])).
fof(f6281,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6195])).
fof(f6195,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f831])).
fof(f6347,plain,(
  $false | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6278,f5956])).
fof(f5956,plain,(
  ~sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl8),
  inference(unit_resulting_resolution,[],[f595,f5848,f527])).
fof(f6278,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6192])).
fof(f6192,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f814])).
fof(f6346,plain,(
  $false | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6277,f5932])).
fof(f5932,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f595,f5848,f527])).
fof(f6277,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)),'T_0') | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6191])).
fof(f6191,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'T_0') | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f812])).
fof(f6345,plain,(
  $false | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6344,f626])).
fof(f6344,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f6273,f5848])).
fof(f6273,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6187])).
fof(f6187,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f633])).
fof(f6343,plain,(
  $false | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6272,f5848])).
fof(f6272,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6262,f6186])).
fof(f6186,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f6176,f627])).
fof(f5897,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | $spl70),
  inference(cnf_transformation,[],[f5897_D])).
fof(f5897_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f5899,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl73),
  inference(cnf_transformation,[],[f5899_D])).
fof(f5899_D,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f5811,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num',sK12))) | ($spl1 | $spl3)),
  inference(superposition,[],[f2487,f2639])).
fof(f5848,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl8),
  inference(cnf_transformation,[],[f5848_D])).
fof(f5848_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f5895,plain,(
  s('type.num.num',sK12) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl69),
  inference(cnf_transformation,[],[f5895_D])).
fof(f5895_D,plain,(
  s('type.num.num',sK12) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f5809,plain,(
  s('type.num.num',sK12) != s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl1 | $spl3)),
  inference(superposition,[],[f2477,f2639])).
fof(f5893,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | $spl67),
  inference(cnf_transformation,[],[f5893_D])).
fof(f5893_D,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f5808,plain,(
  ~sP2('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f1872,f2639])).
fof(f5891,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','F_0') | $spl65),
  inference(cnf_transformation,[],[f5891_D])).
fof(f5891_D,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','F_0') <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f5807,plain,(
  ~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f1812,f2639])).
fof(f5889,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl63),
  inference(cnf_transformation,[],[f5889_D])).
fof(f5889_D,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f5806,plain,(
  ~sP4('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f1764,f2639])).
fof(f5887,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','T_0') | $spl60),
  inference(cnf_transformation,[],[f5887_D])).
fof(f5887_D,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','T_0') <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f5805,plain,(
  sP5('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','T_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f1759,f2639])).
fof(f5885,plain,(
  ( ! [X21] : (s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,X21)) ) | $spl58),
  inference(cnf_transformation,[],[f5885_D])).
fof(f5885_D,plain,(
  ( ! [X21] : (s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,X21)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f5804,plain,(
  ( ! [X21] : (s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f1524,f2639])).
fof(f5884,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','T_0') | $spl56),
  inference(cnf_transformation,[],[f5884_D])).
fof(f5884_D,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','T_0') <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f5803,plain,(
  sP11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','T_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f1338,f2639])).
fof(f5882,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','F_0') | $spl54),
  inference(cnf_transformation,[],[f5882_D])).
fof(f5882_D,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','F_0') <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f5802,plain,(
  sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0','F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f1215,f2639])).
fof(f5880,plain,(
  ~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl53),
  inference(cnf_transformation,[],[f5880_D])).
fof(f5880_D,plain,(
  ~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f5801,plain,(
  ~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f846,f2639])).
fof(f5878,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | $spl51),
  inference(cnf_transformation,[],[f5878_D])).
fof(f5878_D,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f5800,plain,(
  ~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f845,f2639])).
fof(f5876,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl49),
  inference(cnf_transformation,[],[f5876_D])).
fof(f5876_D,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f5799,plain,(
  ~sP5('T_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f835,f2639])).
fof(f5874,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | $spl47),
  inference(cnf_transformation,[],[f5874_D])).
fof(f5874_D,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f5798,plain,(
  ~sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f831,f2639])).
fof(f5872,plain,(
  sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl44),
  inference(cnf_transformation,[],[f5872_D])).
fof(f5872_D,plain,(
  sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f5797,plain,(
  sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f822,f2639])).
fof(f5870,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | $spl42),
  inference(cnf_transformation,[],[f5870_D])).
fof(f5870_D,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f5796,plain,(
  sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f821,f2639])).
fof(f5868,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl40),
  inference(cnf_transformation,[],[f5868_D])).
fof(f5868_D,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f5795,plain,(
  sP5('F_0','T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f814,f2639])).
fof(f5866,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | $spl38),
  inference(cnf_transformation,[],[f5866_D])).
fof(f5866_D,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f5794,plain,(
  sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),'T_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f812,f2639])).
fof(f5864,plain,(
  ( ! [X20] : (sP7('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X20)) ) | $spl36),
  inference(cnf_transformation,[],[f5864_D])).
fof(f5864_D,plain,(
  ( ! [X20] : (sP7('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X20)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f5793,plain,(
  ( ! [X20] : (sP7('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X20) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f718,f2639])).
fof(f5863,plain,(
  ( ! [X19] : (sP7('F_0',X19,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | $spl34),
  inference(cnf_transformation,[],[f5863_D])).
fof(f5863_D,plain,(
  ( ! [X19] : (sP7('F_0',X19,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f5792,plain,(
  ( ! [X19] : (sP7('F_0',X19,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f716,f2639])).
fof(f5862,plain,(
  ( ! [X18] : (sP11('T_0',X18,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | $spl32),
  inference(cnf_transformation,[],[f5862_D])).
fof(f5862_D,plain,(
  ( ! [X18] : (sP11('T_0',X18,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f5791,plain,(
  ( ! [X18] : (sP11('T_0',X18,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f699,f2639])).
fof(f5861,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl30),
  inference(cnf_transformation,[],[f5861_D])).
fof(f5861_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f5790,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f633,f2639])).
fof(f5859,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl29),
  inference(cnf_transformation,[],[f5859_D])).
fof(f5859_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f5789,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl1),
  inference(superposition,[],[f627,f2639])).
fof(f5857,plain,(
  ( ! [X17,X16] : (sP10('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X16,X17)) ) | $spl26),
  inference(cnf_transformation,[],[f5857_D])).
fof(f5857_D,plain,(
  ( ! [X17,X16] : (sP10('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X16,X17)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f5788,plain,(
  ( ! [X17,X16] : (sP10('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X16,X17) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f625,f2639])).
fof(f5856,plain,(
  ( ! [X14,X15] : (sP10(X14,X15,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) | $spl24),
  inference(cnf_transformation,[],[f5856_D])).
fof(f5856_D,plain,(
  ( ! [X14,X15] : (sP10(X14,X15,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f5787,plain,(
  ( ! [X14,X15] : (sP10(X14,X15,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f624,f2639])).
fof(f5855,plain,(
  ( ! [X12,X13] : (sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X12,X13)) ) | $spl22),
  inference(cnf_transformation,[],[f5855_D])).
fof(f5855_D,plain,(
  ( ! [X12,X13] : (sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X12,X13)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f5786,plain,(
  ( ! [X12,X13] : (sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X12,X13) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f623,f2639])).
fof(f5854,plain,(
  ( ! [X10,X11] : (sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X10,X11)) ) | $spl20),
  inference(cnf_transformation,[],[f5854_D])).
fof(f5854_D,plain,(
  ( ! [X10,X11] : (sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X10,X11)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f5785,plain,(
  ( ! [X10,X11] : (sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X10,X11) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f622,f2639])).
fof(f5853,plain,(
  ( ! [X8,X9] : (sP6(X8,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X9)) ) | $spl18),
  inference(cnf_transformation,[],[f5853_D])).
fof(f5853_D,plain,(
  ( ! [X8,X9] : (sP6(X8,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X9)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f5784,plain,(
  ( ! [X8,X9] : (sP6(X8,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X9) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f621,f2639])).
fof(f5852,plain,(
  ( ! [X6,X7] : (sP3('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X6,X7)) ) | $spl16),
  inference(cnf_transformation,[],[f5852_D])).
fof(f5852_D,plain,(
  ( ! [X6,X7] : (sP3('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X6,X7)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f5783,plain,(
  ( ! [X6,X7] : (sP3('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X6,X7) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f620,f2639])).
fof(f5851,plain,(
  ( ! [X4,X5] : (sP3(X4,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X5)) ) | $spl14),
  inference(cnf_transformation,[],[f5851_D])).
fof(f5851_D,plain,(
  ( ! [X4,X5] : (sP3(X4,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X5)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f5782,plain,(
  ( ! [X4,X5] : (sP3(X4,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X5) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f619,f2639])).
fof(f5850,plain,(
  ( ! [X2,X3] : (sP4('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X2,X3)) ) | $spl12),
  inference(cnf_transformation,[],[f5850_D])).
fof(f5850_D,plain,(
  ( ! [X2,X3] : (sP4('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X2,X3)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f5781,plain,(
  ( ! [X2,X3] : (sP4('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X2,X3) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f618,f2639])).
fof(f5849,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X1)) ) | $spl10),
  inference(cnf_transformation,[],[f5849_D])).
fof(f5849_D,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X1)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f5780,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num',sK12)),X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) ) | $spl1),
  inference(superposition,[],[f617,f2639])).
fof(f4054,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018,f4020,f4035,f4037,f4041,f4049,f4053])).
fof(f4053,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(subsumption_resolution,[],[f4052,f337])).
fof(f4052,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f4051,f3728])).
fof(f4051,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(subsumption_resolution,[],[f3885,f337])).
fof(f3885,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2551])).
fof(f4049,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(subsumption_resolution,[],[f4048,f337])).
fof(f4048,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f4047,f3728])).
fof(f4047,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(subsumption_resolution,[],[f3884,f337])).
fof(f3884,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2555])).
fof(f4041,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl4),
  inference(subsumption_resolution,[],[f4040,f337])).
fof(f4040,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl4),
  inference(forward_demodulation,[],[f4039,f3728])).
fof(f4039,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl4),
  inference(subsumption_resolution,[],[f3880,f337])).
fof(f3880,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f434])).
fof(f4037,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl4),
  inference(subsumption_resolution,[],[f3909,f337])).
fof(f3909,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | $spl4),
  inference(condensation,[],[f3873])).
fof(f3873,plain,(
  ( ! [X2,X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X2))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f488])).
fof(f4035,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl4),
  inference(subsumption_resolution,[],[f3910,f337])).
fof(f3910,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl4),
  inference(condensation,[],[f3872])).
fof(f3872,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f487])).
fof(f4020,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X19) = s('type.num.num',X21) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X20),s('type.num.num',X21))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21)))) ) | $spl4),
  inference(forward_demodulation,[],[f3864,f416])).
fof(f3864,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X19),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X20),s('type.num.num',X21))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2730])).
fof(f4018,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X22) = s('type.num.num',X24) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23)))))) ) | $spl4),
  inference(forward_demodulation,[],[f3863,f416])).
fof(f3863,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X24) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X22),s('type.num.num',X23)))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2706])).
fof(f4016,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X16) = s('type.num.num',X17) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X15),s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X15),s('type.num.num',X16)))))) ) | $spl4),
  inference(forward_demodulation,[],[f3862,f416])).
fof(f3862,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num',X17) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X16),s('type.num.num',X15))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X15),s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X15),s('type.num.num',X16)))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2620])).
fof(f4014,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X13) = s('type.num.num',X14) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14)))) ) | $spl4),
  inference(forward_demodulation,[],[f3861,f416])).
fof(f3861,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num',X14) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X14)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2619])).
fof(f4002,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f3855,f416])).
fof(f3855,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f433])).
fof(f4000,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl4),
  inference(forward_demodulation,[],[f3854,f416])).
fof(f3854,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f432])).
fof(f3851,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X2)))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f3618])).
fof(f3836,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'const.bool.COND_3'(s(bool,X1),s(bool,'T_0'),s(bool,'T_0')),'F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f3026])).
fof(f3835,plain,(
  ( ! [X0,X1] : (~sP3('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,'T_0')),'F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f3003])).
fof(f3834,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num',X8) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X6),s('type.num.num',X7))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X8),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X8),s('type.num.num',X7)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2485])).
fof(f3833,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num',X8) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X6),s('type.num.num',X7))) | s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X7),s('type.num.num',X8))) != s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X7),s('type.num.num',X8)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2481])).
fof(f3828,plain,(
  ( ! [X2,X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X2),s(bool,X1)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2239])).
fof(f3827,plain,(
  ( ! [X2,X0,X1] : (sP5('const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0')),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),X2)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f2236])).
fof(f3823,plain,(
  ( ! [X0] : (~sP3('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1885])).
fof(f3820,plain,(
  ( ! [X0] : (~sP2('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1870])).
fof(f3819,plain,(
  ( ! [X0] : (~sP2('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1869])).
fof(f3818,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0','F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1810])).
fof(f3817,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0','F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1809])).
fof(f3816,plain,(
  ( ! [X0] : (~sP3('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'T_0','F_0')) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1755])).
fof(f3809,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),X1)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1425])).
fof(f3808,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,'T_0')))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1392])).
fof(f3807,plain,(
  ( ! [X10,X8,X11,X9] : (~sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),X11,X10) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | p(s(bool,X11))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1388])).
fof(f3803,plain,(
  ( ! [X10,X8,X9] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1184])).
fof(f3800,plain,(
  ( ! [X10,X8,X9] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X8)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1170])).
fof(f3799,plain,(
  ( ! [X6,X7,X5] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X5),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X6)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1169])).
fof(f3793,plain,(
  ( ! [X10,X8,X11,X9] : (~sP7(X11,X10,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9))) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | p(s(bool,X11))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1123])).
fof(f3788,plain,(
  ( ! [X10,X8,X9] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X8)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1063])).
fof(f3785,plain,(
  ( ! [X0,X1] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1049])).
fof(f3784,plain,(
  ( ! [X10,X8,X9] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X8)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1017])).
fof(f3781,plain,(
  ( ! [X10,X8,X9] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f990])).
fof(f3780,plain,(
  ( ! [X6,X7,X5] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X5),s(bool,X6)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f989])).
fof(f3777,plain,(
  ( ! [X0,X1] : (sP4('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f976])).
fof(f3776,plain,(
  ( ! [X10,X8,X9] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f972])).
fof(f3775,plain,(
  ( ! [X6,X7,X5] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X5),s(bool,X6)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f971])).
fof(f3929,plain,(
  ( ! [X54,X52,X53,X51] : (sP9('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54) | ~sP8('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54) | ~p(s(bool,X52))) ) | $spl4),
  inference(forward_demodulation,[],[f3771,f3728])).
fof(f3771,plain,(
  ( ! [X54,X52,X53,X51] : (~sP8('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54) | ~p(s(bool,X52)) | sP9('const.bool.COND_3'(s(bool,'F_0'),s(bool,X51),s(bool,X52)),X53,X54)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f891])).
fof(f3927,plain,(
  ( ! [X47,X50,X48,X49] : (sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50) | ~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50) | ~p(s(bool,X48))) ) | $spl4),
  inference(forward_demodulation,[],[f3770,f3728])).
fof(f3770,plain,(
  ( ! [X47,X50,X48,X49] : (~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50) | ~p(s(bool,X48)) | sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X47),s(bool,X48)),X49,X50)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f890])).
fof(f3769,plain,(
  ( ! [X45,X43,X46,X44] : (sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X43),s(bool,X44)),X45,X46) | ~p(s(bool,X44)) | ~p(s(bool,X45))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f889])).
fof(f3768,plain,(
  ( ! [X39,X41,X42,X40] : (sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X39),s(bool,X40)),X42,X41) | ~p(s(bool,X40)) | p(s(bool,X41))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f888])).
fof(f3767,plain,(
  ( ! [X37,X35,X38,X36] : (sP9('const.bool.COND_3'(s(bool,'T_0'),s(bool,X35),s(bool,X36)),X37,X38) | ~p(s(bool,X36)) | ~p(s(bool,X37))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f887])).
fof(f3766,plain,(
  ( ! [X33,X31,X34,X32] : (sP9('const.bool.COND_3'(s(bool,'T_0'),s(bool,X31),s(bool,X32)),X34,X33) | ~p(s(bool,X32)) | ~p(s(bool,X33))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f886])).
fof(f3765,plain,(
  ( ! [X30,X28,X29] : (sP1(X30,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X28),s(bool,X29))) | ~p(s(bool,X29)) | p(s(bool,X30))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f885])).
fof(f3764,plain,(
  ( ! [X26,X27,X25] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X25),s(bool,X26)),X27) | ~p(s(bool,X26)) | p(s(bool,X27))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f884])).
fof(f3763,plain,(
  ( ! [X24,X23,X22] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X22),s(bool,X23)),X24) | ~p(s(bool,X23))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f883])).
fof(f3762,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X19),s(bool,X20))) | ~p(s(bool,X20))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f882])).
fof(f3760,plain,(
  ( ! [X0,X1] : (sP5('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f862])).
fof(f3759,plain,(
  ( ! [X0,X1] : (~sP5('F_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f861])).
fof(f3758,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f860])).
fof(f3757,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f859])).
fof(f3754,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f415])).
fof(f3911,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl4),
  inference(subsumption_resolution,[],[f3752,f3728])).
fof(f3752,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f360])).
fof(f4050,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018,f4020,f4035,f4037,f4041,f4049])).
fof(f4042,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018,f4020,f4035,f4037,f4041])).
fof(f4038,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018,f4020,f4035,f4037])).
fof(f4036,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018,f4020,f4035])).
fof(f4034,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f4033,f337])).
fof(f4033,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f4032,f3728])).
fof(f4032,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3870,f337])).
fof(f3870,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1475])).
fof(f4031,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f4030,f337])).
fof(f4030,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f4029,f3728])).
fof(f4029,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3868,f337])).
fof(f3868,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1471])).
fof(f4028,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f4027,f337])).
fof(f4027,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f4026,f3728])).
fof(f4026,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3867,f337])).
fof(f3867,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f1499])).
fof(f4021,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018,f4020])).
fof(f4019,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016,f4018])).
fof(f4017,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014,f4016])).
fof(f4015,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002,f4014])).
fof(f4009,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f4008,f337])).
fof(f4008,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f4007,f3728])).
fof(f4007,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3858,f337])).
fof(f3858,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f480])).
fof(f4006,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f4005,f337])).
fof(f4005,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f4004,f3728])).
fof(f4004,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl4),
  inference(subsumption_resolution,[],[f3857,f337])).
fof(f3857,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl4),
  inference(backward_demodulation,[],[f3728,f471])).
fof(f4003,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000,f4002])).
fof(f4001,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851,f4000])).
fof(f3999,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3998,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851])).
fof(f3998,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(X9,X10) != s(X9,X11) | p(s(bool,X7)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X13),s(X9,X11))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X12),s(X9,X10)))) ) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f3853,f3731])).
fof(f3853,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,'T_0') != s(bool,X8) | s(X9,X10) != s(X9,X11) | p(s(bool,X7)) | s(X9,'const.bool.COND_3'(s(bool,X7),s(X9,X13),s(X9,X11))) = s(X9,'const.bool.COND_3'(s(bool,X8),s(X9,X12),s(X9,X10)))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f3743])).
fof(f3997,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836,f3851])).
fof(f3980,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835,f3836])).
fof(f3979,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834,f3835])).
fof(f3978,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833,f3834])).
fof(f3977,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828,f3833])).
fof(f3970,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827,f3828])).
fof(f3969,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823,f3827])).
fof(f3968,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3967,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823])).
fof(f3967,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f3966,f337])).
fof(f3966,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f3826,f3728])).
fof(f3826,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')))) | p(s(bool,X0))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1993])).
fof(f3965,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3825,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823])).
fof(f3825,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1900])).
fof(f3964,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3824,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823])).
fof(f3824,plain,(
  ( ! [X0] : (~sP2('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'F_0')) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1899])).
fof(f3963,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820,f3823])).
fof(f3962,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3822,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820])).
fof(f3822,plain,(
  ( ! [X0] : (~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0')) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1877])).
fof(f3961,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3821,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820])).
fof(f3821,plain,(
  ( ! [X0] : (~sP2('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0')) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1876])).
fof(f3960,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819,f3820])).
fof(f3959,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818,f3819])).
fof(f3958,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817,f3818])).
fof(f3957,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816,f3817])).
fof(f3956,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809,f3816])).
fof(f3955,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808,f3809])).
fof(f3954,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807,f3808])).
fof(f3953,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803,f3807])).
fof(f3952,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3806,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803])).
fof(f3806,plain,(
  ( ! [X4] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X4)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1203])).
fof(f3951,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800,f3803])).
fof(f3950,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3802,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800])).
fof(f3802,plain,(
  ( ! [X4] : (sP4('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1182])).
fof(f3949,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799,f3800])).
fof(f3948,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793,f3799])).
fof(f3947,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3797,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793])).
fof(f3797,plain,(
  ( ! [X4] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X4)))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1147])).
fof(f3946,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3795,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793])).
fof(f3795,plain,(
  ( ! [X4] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X4)))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1131])).
fof(f3945,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788,f3793])).
fof(f3944,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3792,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788])).
fof(f3792,plain,(
  ( ! [X4] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X4)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1105])).
fof(f3943,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3790,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788])).
fof(f3790,plain,(
  ( ! [X4] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X4)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1089])).
fof(f3942,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785,f3788])).
fof(f3941,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3787,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785])).
fof(f3787,plain,(
  ( ! [X4] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,'T_0')))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1061])).
fof(f3940,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784,f3785])).
fof(f3939,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781,f3784])).
fof(f3938,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3783,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781])).
fof(f3783,plain,(
  ( ! [X4] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,'T_0')))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f1015])).
fof(f3937,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780,f3781])).
fof(f3936,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777,f3780])).
fof(f3935,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3779,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777])).
fof(f3779,plain,(
  ( ! [X4] : (sP5('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f988])).
fof(f3934,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776,f3777])).
fof(f3933,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775,f3776])).
fof(f3932,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929,f3775])).
fof(f3931,plain,(
  $false | ($spl1 | $spl4)),
  inference(global_subsumption,[],[f3774,f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929])).
fof(f3774,plain,(
  ( ! [X4] : (~sP5('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,'T_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) ) | ($spl1 | $spl4)),
  inference(backward_demodulation,[],[f3728,f970])).
fof(f3930,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927,f3929])).
fof(f3928,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769,f3927])).
fof(f3926,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768,f3769])).
fof(f3925,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767,f3768])).
fof(f3924,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766,f3767])).
fof(f3923,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765,f3766])).
fof(f3922,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764,f3765])).
fof(f3921,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763,f3764])).
fof(f3920,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762,f3763])).
fof(f3919,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760,f3762])).
fof(f3918,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759,f3760])).
fof(f3917,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758,f3759])).
fof(f3916,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757,f3758])).
fof(f3915,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754,f3757])).
fof(f3914,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f3755,f337])).
fof(f3755,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(backward_demodulation,[],[f3728,f595])).
fof(f3913,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911,f3754])).
fof(f3912,plain,(
  $false | $spl4),
  inference(global_subsumption,[],[f336,f335,f337,f595,f345,f357,f356,f361,f360,f414,f413,f415,f416,f422,f421,f420,f419,f426,f425,f424,f423,f430,f429,f428,f431,f432,f433,f434,f438,f435,f440,f439,f447,f446,f596,f465,f462,f461,f460,f471,f470,f480,f481,f482,f483,f484,f485,f486,f492,f491,f490,f488,f487,f511,f510,f509,f508,f507,f506,f505,f515,f514,f513,f512,f519,f518,f517,f516,f523,f522,f521,f520,f527,f526,f525,f524,f581,f531,f530,f529,f528,f538,f537,f536,f535,f544,f541,f540,f539,f551,f550,f549,f580,f547,f546,f545,f555,f554,f553,f552,f559,f558,f557,f556,f568,f567,f566,f579,f564,f563,f562,f572,f571,f570,f569,f576,f575,f574,f573,f597,f598,f599,f600,f601,f602,f603,f604,f605,f606,f607,f608,f609,f610,f611,f612,f613,f614,f615,f616,f626,f636,f637,f639,f645,f650,f651,f654,f657,f663,f667,f668,f671,f677,f681,f682,f685,f691,f723,f775,f813,f811,f834,f830,f862,f861,f860,f859,f863,f873,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f910,f909,f908,f907,f921,f930,f931,f932,f933,f934,f935,f936,f937,f938,f939,f961,f968,f969,f971,f972,f976,f979,f986,f987,f989,f990,f995,f1006,f1013,f1014,f1017,f1021,f1029,f1033,f1038,f1042,f1049,f1052,f1059,f1060,f1063,f1068,f1076,f1087,f1088,f1091,f1100,f1103,f1104,f1107,f1123,f1124,f1129,f1130,f1142,f1145,f1146,f1159,f1167,f1169,f1170,f1173,f1180,f1181,f1184,f1190,f1193,f1201,f1202,f1214,f1222,f1229,f1337,f1346,f1354,f1388,f1389,f1392,f1401,f1425,f1434,f1442,f1446,f1455,f1456,f1471,f1475,f1484,f1499,f1769,f1756,f1755,f1819,f1810,f1809,f1886,f1885,f1870,f1869,f1929,f1979,f1990,f2081,f2088,f2095,f2123,f2130,f2137,f2147,f2355,f2354,f2353,f2352,f2351,f2350,f2349,f2347,f2345,f2344,f2342,f2341,f2337,f2334,f2333,f2329,f2328,f2323,f2308,f2307,f2306,f2302,f2300,f2299,f2296,f2295,f2292,f2288,f2286,f2283,f2282,f2278,f2276,f2275,f2274,f2273,f2270,f2269,f2264,f2263,f2259,f2258,f2253,f2246,f2245,f2243,f2241,f2240,f2239,f2237,f2236,f2234,f2233,f2232,f2231,f2227,f2226,f2221,f2220,f2212,f2211,f2206,f2201,f2189,f2188,f2185,f2184,f2182,f2180,f2177,f2175,f2174,f2173,f2172,f2171,f2169,f2168,f2167,f2166,f2165,f2427,f2428,f2455,f2456,f2488,f2481,f2482,f2483,f2485,f2486,f2516,f2518,f2522,f2511,f2541,f2551,f2555,f2619,f2620,f2730,f2706,f2742,f2762,f2774,f2780,f2802,f2814,f2823,f2829,f2848,f2847,f2860,f2891,f2901,f2941,f2971,f3002,f3003,f3014,f3025,f3026,f3083,f3084,f3133,f3134,f3161,f3162,f3202,f3203,f3243,f3244,f3284,f3285,f3331,f3332,f3379,f3380,f3455,f3618,f3727,f3741,f3607,f3728,f3911])).
fof(f3728,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f3728_D])).
fof(f3728_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f3729,plain,(
  ( ! [X6,X4,X2,X3,X1] : (s(X2,X3) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X6),s(X2,X4))) | p(s(bool,X1)) | s(X2,X3) != s(X2,X4)) ) | $spl6),
  inference(cnf_transformation,[],[f3729_D])).
fof(f3729_D,plain,(
  ( ! [X6,X4,X2,X3,X1] : (s(X2,X3) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X6),s(X2,X4))) | p(s(bool,X1)) | s(X2,X3) != s(X2,X4)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f3735,plain,(
  ( ! [X24,X23,X21,X27,X25,X22] : (s(X23,X24) = s(X23,'const.bool.COND_3'(s(bool,X22),s(X23,X27),s(X23,X25))) | s(X23,X24) != s(X23,X25) | p(s(bool,X22)) | s(bool,'T_0') = s(bool,X21)) ) | $spl1),
  inference(forward_demodulation,[],[f3734,f415])).
fof(f3734,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(X23,'const.bool.COND_3'(s(bool,'F_0'),s(X23,X26),s(X23,X24))) = s(X23,'const.bool.COND_3'(s(bool,X22),s(X23,X27),s(X23,X25))) | s(X23,X24) != s(X23,X25) | p(s(bool,X22)) | s(bool,'T_0') = s(bool,X21)) ) | $spl1),
  inference(forward_demodulation,[],[f3733,f633])).
fof(f3733,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(X23,X24) != s(X23,X25) | p(s(bool,X22)) | s(X23,'const.bool.COND_3'(s(bool,X22),s(X23,X27),s(X23,X25))) = s(X23,'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s(X23,X26),s(X23,X24))) | s(bool,'T_0') = s(bool,X21)) ) | $spl1),
  inference(subsumption_resolution,[],[f3596,f775])).
fof(f3596,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,X21) != s(bool,X22) | s(X23,X24) != s(X23,X25) | p(s(bool,X22)) | s(X23,'const.bool.COND_3'(s(bool,X22),s(X23,X27),s(X23,X25))) = s(X23,'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),s(X23,X26),s(X23,X24))) | s(bool,'T_0') = s(bool,X21)) ) | $spl1),
  inference(superposition,[],[f429,f1524])).
fof(f3727,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s(X2,X3) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X6),s(X2,X4))) | s(X2,X3) != s(X2,X4) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f3726,f415])).
fof(f3726,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X2,X3) != s(X2,X4) | p(s(bool,X1)) | s(X2,'const.bool.COND_3'(s(bool,'F_0'),s(X2,X5),s(X2,X3))) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X6),s(X2,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f3593,f775])).
fof(f3593,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(X2,X3) != s(X2,X4) | p(s(bool,X1)) | s(X2,'const.bool.COND_3'(s(bool,'F_0'),s(X2,X5),s(X2,X3))) = s(X2,'const.bool.COND_3'(s(bool,X1),s(X2,X6),s(X2,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f429,f345])).
fof(f591,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) | $spl0),
  inference(cnf_transformation,[],[f591_D])).
fof(f591_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f593,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK13) | $spl3),
  inference(cnf_transformation,[],[f593_D])).
fof(f593_D,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK13) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f335,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK13) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) | s('type.num.num',sK12) != s('type.num.num',sK13)) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) | s('type.num.num',sK12) = s('type.num.num',sK13))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f223])).
fof(f223,plain,(
  ? [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s('type.num.num',X0) != s('type.num.num',X1)) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f169])).
fof(f169,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <~> s('type.num.num',X0) != s('type.num.num',X1))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> s('type.num.num',X0) != s('type.num.num',X1))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> ~s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X6),s('type.num.num',X7)))))) <=> ~s('type.num.num',X6) = s('type.num.num',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',X6),s('type.num.num',X7)))))) <=> ~s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.arithmetic.MIN_MAX_LT','thm.arithmetic.MIN_MAX_LT')).
fof(f592,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) | $spl1),
  inference(cnf_transformation,[],[f592_D])).
fof(f592_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f594,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK13) | $spl2),
  inference(cnf_transformation,[],[f594_D])).
fof(f594_D,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK13) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f336,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK13) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MIN_2'(s('type.num.num',sK12),s('type.num.num',sK13))),s('type.num.num','const.arithmetic.MAX_2'(s('type.num.num',sK12),s('type.num.num',sK13))))))),
  inference(cnf_transformation,[],[f224])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 352
% Passive clauses: 1210
% Generated clauses: 7672
% Final active clauses: 254
% Final passive clauses: 214
% Input formulas: 69
% Initial clauses: 244
% 
% Duplicate literals: 14
% Trivial inequalities: 4
% Fw subsumption resolutions: 133
% Fw demodulations: 1716
% Bw demodulations: 509
% Condensations: 28
% Global subsumptions: 150
% 
% Simple tautologies: 96
% Equational tautologies: 30
% Forward subsumptions: 4088
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 2233
% Factoring: 1
% Forward superposition: 1505
% Backward superposition: 877
% Self superposition: 28
% Equality factoring: 4
% Equality resolution: 3
% 
% Split clauses: 35
% Split components: 70
% SAT solver clauses: 1599
% SAT solver unit clauses: 297
% SAT solver binary clauses: 459
% 
% Sat splits: 35
% Sat splitting refutations: 167
% 
% Memory used [KB]: 6012
% Time elapsed: 0.230 s
% ------------------------------
% ------------------------------
% Success in time 1.55 s
