Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (112676)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 389
% Passive clauses: 3199
% Generated clauses: 30232
% Final active clauses: 159
% Final passive clauses: 1668
% Input formulas: 69
% Initial clauses: 123
% 
% Duplicate literals: 439
% Trivial inequalities: 166
% Fw subsumption resolutions: 1344
% Fw demodulations: 4125
% Bw demodulations: 178
% 
% Simple tautologies: 216
% Equational tautologies: 41
% Forward subsumptions: 20496
% Fw demodulations to eq. taut.: 33
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 325
% Factoring: 1
% Forward superposition: 10653
% Backward superposition: 12243
% Self superposition: 247
% Equality factoring: 74
% Equality resolution: 23
% 
% Split clauses: 371
% Split components: 752
% SAT solver clauses: 629
% SAT solver unit clauses: 7
% SAT solver binary clauses: 55
% 
% Sat splits: 371
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 618
% TWLsolver calls for satisfiability: 120
% 
% Memory used [KB]: 20852
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f5981,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5980,f2105,f2137,f328,f446,f546,f547,f237,f380,f457,f458,f245,f389,f512,f527,f241,f385,f4969,f4988,f331,f449,f542,f544,f234,f376,f239,f383,f5910,f5961,f2329,f2330,f329,f447,f514,f529,f243,f387,f944,f960,f511,f526,f240,f384])).
fof(f384,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl10),
  inference(cnf_transformation,[],[f384_D])).
fof(f384_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f240,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X28] : s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f526,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl176),
  inference(cnf_transformation,[],[f526_D])).
fof(f526_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f511,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | ($spl4 | $spl10)),
  inference(backward_demodulation,[],[f380,f384])).
fof(f960,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl286),
  inference(cnf_transformation,[],[f960_D])).
fof(f960_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f944,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl176 | $spl208)),
  inference(superposition,[],[f547,f526])).
fof(f387,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f387_D])).
fof(f387_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f243,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X28] : s('type.num.num',X28) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.SUB_|48||split|1')).
fof(f529,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl182),
  inference(cnf_transformation,[],[f529_D])).
fof(f529_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f514,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl4 | $spl16)),
  inference(backward_demodulation,[],[f380,f387])).
fof(f447,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl122),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f329,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6,X28] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X28))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.SUB_MONO_EQ')).
fof(f2330,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl540),
  inference(cnf_transformation,[],[f2330_D])).
fof(f2330_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl540),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl540])])).
fof(f2329,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl122 | $spl182 | $spl286)),
  inference(forward_demodulation,[],[f2300,f529])).
fof(f2300,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl122 | $spl286)),
  inference(superposition,[],[f447,f960])).
fof(f5961,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl1066),
  inference(cnf_transformation,[],[f5961_D])).
fof(f5961_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl1066),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1066])])).
fof(f5910,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl514 | $spl540)),
  inference(superposition,[],[f2330,f2137])).
fof(f383,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(cnf_transformation,[],[f383_D])).
fof(f383_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f239,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X15] : s('type.num.num',X15) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.NUMERAL_DEF')).
fof(f376,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1))))) | $spl1),
  inference(cnf_transformation,[],[f376_D])).
fof(f376_D,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f234,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1)))))),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f170])).
fof(f170,plain,(
  ? [X0,X1] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),X1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),X1)))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X7))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X7))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),X7)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.rich_list.COUNT_LIST_AUX_def_compute|split|1')).
fof(f544,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),sK1))))) | $spl207),
  inference(cnf_transformation,[],[f544_D])).
fof(f544_D,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),sK1))))) <=> ~$spl207),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl207])])).
fof(f542,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),sK1))))) | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f541,f383])).
fof(f541,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.num.num'),sK1))))) | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f376,f383])).
fof(f449,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1)))))) ) | $spl126),
  inference(cnf_transformation,[],[f449_D])).
fof(f449_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1)))))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f331,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1)))))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.list.list'('type.num.num'),X7))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X6),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X6),s('type.list.list'('type.num.num'),X7)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.rich_list.COUNT_LIST_AUX_def|split|1')).
fof(f4988,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1))) | $spl955),
  inference(cnf_transformation,[],[f4988_D])).
fof(f4988_D,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1))) <=> ~$spl955),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl955])])).
fof(f4969,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.num.num'),sK1))) | ($spl126 | $spl207)),
  inference(superposition,[],[f544,f449])).
fof(f385,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl12),
  inference(cnf_transformation,[],[f385_D])).
fof(f385_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f241,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X28] : s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.ADD_|48|')).
fof(f527,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl178),
  inference(cnf_transformation,[],[f527_D])).
fof(f527_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f512,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl4 | $spl12)),
  inference(backward_demodulation,[],[f380,f385])).
fof(f389,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl20),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f245,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.BIT|49|')).
fof(f458,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | $spl138),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f457,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | ($spl20 | $spl120)),
  inference(forward_demodulation,[],[f389,f446])).
fof(f380,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl4),
  inference(cnf_transformation,[],[f380_D])).
fof(f380_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f237,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f50])).
fof(f50,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.ALT_ZERO')).
fof(f547,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl208),
  inference(cnf_transformation,[],[f547_D])).
fof(f547_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f546,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl4 | $spl138 | $spl178)),
  inference(forward_demodulation,[],[f545,f527])).
fof(f545,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl4 | $spl138)),
  inference(forward_demodulation,[],[f458,f380])).
fof(f446,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl120),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f328,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X6,X28] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|1','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f2137,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | $spl514),
  inference(cnf_transformation,[],[f2137_D])).
fof(f2137_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) <=> ~$spl514),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl514])])).
fof(f2105,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl120 | $spl208)),
  inference(superposition,[],[f446,f547])).
fof(f5980,plain,(
  $false | ($spl514 | $spl955 | $spl1066)),
  inference(trivial_inequality_removal,[],[f5979])).
fof(f5979,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) | ($spl514 | $spl955 | $spl1066)),
  inference(forward_demodulation,[],[f5977,f2137])).
fof(f5977,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.list.list'('type.num.num'),sK1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK0))))),s('type.list.list'('type.num.num'),sK1))) | ($spl955 | $spl1066)),
  inference(backward_demodulation,[],[f5961,f4988])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 109
% Passive clauses: 519
% Generated clauses: 5662
% Final active clauses: 104
% Final passive clauses: 341
% Input formulas: 69
% Initial clauses: 123
% 
% Duplicate literals: 65
% Trivial inequalities: 31
% Fw subsumption resolutions: 175
% Fw demodulations: 895
% Bw demodulations: 73
% Condensations: 118
% Global subsumptions: 7
% 
% Simple tautologies: 56
% Equational tautologies: 17
% Forward subsumptions: 3108
% Fw demodulations to eq. taut.: 8
% 
% Binary resolution: 104
% Factoring: 1
% Forward superposition: 1488
% Backward superposition: 1951
% Self superposition: 63
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 24
% Split components: 48
% SAT solver clauses: 778
% SAT solver unit clauses: 156
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 15
% 
% Sat splits: 24
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 749
% TWLsolver calls for satisfiability: 436
% 
% Memory used [KB]: 7419
% Time elapsed: 0.143 s
% ------------------------------
% ------------------------------
% Success in time 0.749 s
