Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.Omega
% (120911)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 149
% Passive clauses: 2746
% Generated clauses: 19546
% Final active clauses: 142
% Final passive clauses: 2410
% Input formulas: 21
% Initial clauses: 35
% 
% Duplicate literals: 1145
% Trivial inequalities: 107
% Fw subsumption resolutions: 2443
% Fw demodulations: 3023
% Bw demodulations: 6
% 
% Simple tautologies: 307
% Equational tautologies: 19
% Forward subsumptions: 8588
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 367
% Factoring: 1
% Forward superposition: 7569
% Backward superposition: 4534
% Self superposition: 129
% Equality factoring: 32
% Equality resolution: 22
% 
% Split clauses: 553
% Split components: 1112
% SAT solver clauses: 1177
% SAT solver unit clauses: 10
% SAT solver binary clauses: 51
% 
% Sat splits: 553
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1176
% TWLsolver calls for satisfiability: 194
% 
% Memory used [KB]: 15479
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f2876,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2875,f81,f120,f1718,f1720,f121,f123,f89,f128,f194,f197,f80,f116,f95,f132,f205,f207,f78,f118,f91,f130,f2862,f2863,f114,f129,f778,f791,f79,f117])).
fof(f117,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))) ) | $spl2),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f79,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X9))),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X4,X5,X6,X7,X8] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f59])).
fof(f59,plain,(
  ? [X0] : (! [X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X9))),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X4,X5,X6,X7,X8] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X4))),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X6),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8))))))) & ? [X1,X2,X3] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))),
  inference(rectify,[],[f52])).
fof(f52,plain,(
  ? [X0] : (! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5))))))) & ? [X8,X9,X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X8))),s('type.integer.int',X9))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ? [X0] : ((! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))))))) & ? [X8,X9,X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X8))),s('type.integer.int',X9))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ((! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X1))),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X4))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X5)))))))) => ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X0),s('type.num.num',X8))),s('type.integer.int',X9))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X7))),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X7,X8,X9,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X7))),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X7))),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X12))),s('type.integer.int',X13))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X7))),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X7,X8,X9,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X7))),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X7))),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X11)))))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),X6),s('type.num.num',X12))),s('type.integer.int',X13))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X14)))))),
  file('thm.Omega.dark_shadow_row_ind','thm.Omega.dark_shadow_row_ind')).
fof(f791,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))))) ) | $spl110),
  inference(cnf_transformation,[],[f791_D])).
fof(f791_D,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f778,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X6))),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X9),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X8)))))) ) | ($spl2 | $spl16)),
  inference(resolution,[],[f117,f130])).
fof(f129,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) | $spl14),
  inference(cnf_transformation,[],[f129_D])).
fof(f129_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f114,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(condensation,[],[f88])).
fof(f88,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0)))))))) | ! [X1,X2] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8])],[f63])).
fof(f63,plain,(
  ! [X0] : (? [X7] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X7))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X4),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6))))))) | ! [X1,X2] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))),
  inference(rectify,[],[f54])).
fof(f54,plain,(
  ! [X0] : (? [X5] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X2),s('type.integer.int',X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4))))))) | ! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X6))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ((? [X5] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X2),s('type.integer.int',X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))))))) | ! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X6))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : ((! [X5] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X5))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X2),s('type.integer.int',X3))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X4)))))))) => ! [X6,X7] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X6))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ((! [X15] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) & ! [X15,X7,X16,X17] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X17)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X7),s('type.integer.int',X16))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X17)))))))) => ! [X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X6),s('type.integer.int',X12))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X13)))))),
  file('thm.Omega.dark_shadow_row_ind','thm.Omega.evalupper_ind')).
fof(f2863,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X14),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))))))))) ) | $spl432),
  inference(cnf_transformation,[],[f2863_D])).
fof(f2863_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X14),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))))))))) ) <=> ~$spl432),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl432])])).
fof(f2862,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X14),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))))))))) ) | ($spl6 | $spl14 | $spl52 | $spl110)),
  inference(subsumption_resolution,[],[f2861,f120])).
fof(f2861,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X14),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))))))))) ) | ($spl14 | $spl52 | $spl110)),
  inference(forward_demodulation,[],[f2841,f207])).
fof(f2841,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X14),s('type.integer.int',X15))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13))),s('type.integer.int',sK4(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X13)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) | ($spl14 | $spl110)),
  inference(resolution,[],[f791,f129])).
fof(f130,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f130_D])).
fof(f130_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f91,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X20] : (s(bool,'T_0') = s(bool,X20) <=> p(s(bool,X20)))),
  file('thm.Omega.dark_shadow_row_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f118,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X9))),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) | $spl4),
  inference(cnf_transformation,[],[f118_D])).
fof(f118_D,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X9))),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f78,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X9))),s('type.integer.int',X10))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f207,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X0))),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) ) | $spl52),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X0))),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f205,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',X0))),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) ) | ($spl4 | $spl16)),
  inference(resolution,[],[f118,f130])).
fof(f132,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f132_D])).
fof(f132_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f95,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X20] : (s(bool,'F_0') = s(bool,X20) <=> ~p(s(bool,X20)))),
  file('thm.Omega.dark_shadow_row_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f116,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl1),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f80,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f60])).
fof(f197,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))) | $spl50),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f194,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))) | ($spl1 | $spl20)),
  inference(resolution,[],[f116,f132])).
fof(f128,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) | $spl12),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f89,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',X1))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK5(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(X0)),s('type.integer.int',sK7(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),X0),s('type.integer.int',sK4(X0)))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f123,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f121,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f83,f81])).
fof(f83,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f18])).
fof(f18,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.Omega.dark_shadow_row_ind','thm.bool.NOT_CLAUSES|split|1')).
fof(f1720,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))),s('type.integer.int',sK7(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))))))))) | $spl295),
  inference(cnf_transformation,[],[f1720_D])).
fof(f1720_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))),s('type.integer.int',sK7(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))))))))) <=> ~$spl295),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl295])])).
fof(f1718,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))),s('type.integer.int',sK7(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))))))))) | ($spl6 | $spl9 | $spl12 | $spl50 | $spl52)),
  inference(subsumption_resolution,[],[f1717,f120])).
fof(f1717,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))),s('type.integer.int',sK7(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))))))))) | ($spl9 | $spl12 | $spl50 | $spl52)),
  inference(forward_demodulation,[],[f1716,f207])).
fof(f1716,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))),s('type.integer.int',sK7(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK4(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ($spl9 | $spl12 | $spl50)),
  inference(subsumption_resolution,[],[f1705,f123])).
fof(f1705,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK5(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK6(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))),s('type.integer.int',sK7(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK8(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool),happ(s(fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool)),happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1))),s('type.integer.int',sK4(happ(s(fun('type.num.num',fun('type.integer.int',fun('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),bool))),sK0),s('type.num.num',sK1)))))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.NIL_0')))) | ($spl12 | $spl50)),
  inference(superposition,[],[f128,f197])).
fof(f120,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f81,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.dark_shadow_row_ind',aHL_TRUTH)).
fof(f2875,plain,(
  $false | ($spl6 | $spl295 | $spl432)),
  inference(subsumption_resolution,[],[f2874,f120])).
fof(f2874,plain,(
  ~p(s(bool,'T_0')) | ($spl295 | $spl432)),
  inference(backward_demodulation,[],[f2863,f1720])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 65
% Passive clauses: 244
% Generated clauses: 2753
% Final active clauses: 55
% Final passive clauses: 138
% Input formulas: 21
% Initial clauses: 35
% 
% Duplicate literals: 187
% Trivial inequalities: 33
% Fw subsumption resolutions: 149
% Fw demodulations: 142
% Bw demodulations: 37
% Condensations: 291
% Global subsumptions: 6
% 
% Simple tautologies: 74
% Equational tautologies: 17
% Forward subsumptions: 1231
% Bw demodulations to eq. taut.: 9
% 
% Binary resolution: 59
% Forward superposition: 952
% Backward superposition: 529
% Self superposition: 40
% Equality factoring: 28
% Equality resolution: 10
% 
% Split clauses: 16
% Split components: 37
% SAT solver clauses: 433
% SAT solver unit clauses: 58
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 13
% SAT solver learnt literals: 2
% 
% Sat splits: 16
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 408
% TWLsolver calls for satisfiability: 209
% 
% Memory used [KB]: 3965
% Time elapsed: 0.103 s
% ------------------------------
% ------------------------------
% Success in time 0.72 s
